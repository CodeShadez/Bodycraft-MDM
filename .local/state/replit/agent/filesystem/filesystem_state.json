{"file_contents":{"Bodycraft-MDM/Bodycraft-MDM/README.md":{"content":"# Bodycraft-MDM\nBodycraft master data management software \n","size_bytes":59},"Bodycraft-MDM/Bodycraft-MDM/replit.md":{"content":"# BODYCRAFT Master Data Management (MDM) System\n\n## Overview\n\nThe BODYCRAFT Master Data Management (MDM) System is a comprehensive web application designed to manage IT assets across 32 retail outlets throughout India. The system replaces manual Excel-based tracking with a centralized, digital solution that maintains complete historical records of asset assignments, employee data, and location information. Built as a single source of truth for asset management, the application ensures data integrity through historical preservation and comprehensive audit trails, supporting various asset types including laptops, desktops, monitors, mobile devices, networking equipment, and specialized systems like CCTV and biometric devices.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18** with TypeScript for type-safe component development and modern React patterns\n- **Vite** as the build tool providing fast development server and optimized production builds\n- **Wouter** for lightweight client-side routing without the overhead of React Router\n- **TanStack Query** for sophisticated server state management, caching, and data synchronization\n- **Shadcn/ui** component library built on Radix UI primitives, providing accessible and customizable UI components\n- **Tailwind CSS** with extensive custom design system including dual theme support (light/dark mode)\n- **Class Variance Authority** for type-safe component variant management\n\n### Backend Architecture\n- **Node.js** with Express.js providing RESTful API architecture\n- **TypeScript** throughout the entire stack ensuring type safety from database to frontend\n- **Zod** for comprehensive runtime schema validation and automatic type inference\n- **Modular storage interface** design allowing flexible database implementations and easy testing\n- **Session-based authentication** with PostgreSQL session store for scalable user management\n- **RESTful API design** with consistent error handling and response formatting\n\n### Data Storage Solutions\n- **PostgreSQL** as the primary relational database with Neon serverless hosting for scalability\n- **Drizzle ORM** providing type-safe database queries, migrations, and schema management\n- **Historical data preservation** architecture where assignment history is never overwritten, ensuring complete audit trails\n- **Multi-tenant data isolation** supporting all 32 outlet locations with location-based data filtering\n- **Comprehensive audit logging** for all data modifications with timestamps and user attribution\n\n### Authentication and Authorization\n- **Session-based authentication** using connect-pg-simple for reliable PostgreSQL session storage\n- **Role-based access control** framework designed for different permission levels (administrators, managers, users)\n- **Location-based data filtering** ensuring users only access relevant outlet information\n- **Security-first design** with data encryption and compliance-ready audit trails\n\n### Design System and UI Architecture\n- **Modern design approach** inspired by productivity tools like Canva, Figma, Notion, and Linear\n- **Purple-based color palette** (264 100% 50%) for creative energy with carefully crafted light and dark theme variants\n- **Typography system** using Inter for interface text and Plus Jakarta Sans for headings\n- **Responsive design** supporting desktop, tablet, and mobile devices with consistent spacing using Tailwind's systematic approach\n- **Accessibility-first** component library with keyboard navigation, screen reader support, and WCAG compliance\n- **Comprehensive component library** including navigation, data management, and content creation interfaces\n\n### Database Schema Design\nThe system employs a relational model with core entities designed for scalability and data integrity:\n- **Locations table** managing 32 BODYCRAFT outlets with contact information and management details\n- **Employees table** with unique employee codes, department tracking, and location assignment\n- **Assets table** with unique asset IDs, comprehensive metadata, and current assignment tracking\n- **Assignment history table** preserving complete historical records of all asset movements\n- **Maintenance records** for tracking asset servicing and repairs\n- **Integration tables** for CCTV systems, biometric systems, and backup management\n\n## External Dependencies\n\n### Database and Infrastructure\n- **Neon Database** - Serverless PostgreSQL hosting with automatic scaling and branching capabilities\n- **Drizzle Kit** - Database migrations and schema management tooling\n\n### Frontend Libraries and Frameworks\n- **Radix UI** - Comprehensive primitive component library providing accessibility and customization foundation\n- **TanStack Query** - Advanced data fetching, caching, and synchronization for React applications\n- **Wouter** - Minimalist routing library for React applications\n- **React Hook Form** with Hookform Resolvers for form management and validation\n- **Embla Carousel** for image and content carousels in the interface\n\n### Development and Build Tools\n- **Vite** - Fast build tool and development server with Hot Module Replacement\n- **TypeScript** - Static type checking and enhanced developer experience\n- **ESBuild** - Fast JavaScript bundler for production builds\n- **PostCSS** with Autoprefixer for CSS processing and vendor prefixing\n\n### Utility Libraries\n- **date-fns** - Modern JavaScript date utility library for date manipulation and formatting\n- **clsx** and **tailwind-merge** - Conditional CSS class composition utilities\n- **class-variance-authority** - Type-safe component variant management\n- **Zod** - TypeScript-first schema validation with static type inference\n- **nanoid** - URL-safe unique string ID generator\n\n### UI and Design Dependencies\n- **Lucide React** - Feature-rich icon library with consistent design system\n- **CMDK** - Command palette component for advanced user interactions\n- **Vaul** - Drawer component library for mobile-friendly interfaces\n\n### Session and Authentication\n- **connect-pg-simple** - PostgreSQL session store for Express.js applications ensuring scalable session management across multiple server instances","size_bytes":6247},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/design_guidelines.md":{"content":"# Social Media Graphics Automation Tool - Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from modern design tools like Canva and Figma, with productivity-focused patterns from Notion and Linear. This utility-focused application prioritizes efficiency and learnability for social media managers.\n\n## Core Design Elements\n\n### Color Palette\n**Light Mode:**\n- Primary: 264 100% 50% (vibrant purple for creative energy)\n- Secondary: 220 15% 25% (dark slate for text)\n- Background: 0 0% 98% (soft white)\n- Surface: 0 0% 100% (pure white cards)\n- Accent: 142 76% 50% (success green, used sparingly)\n\n**Dark Mode:**\n- Primary: 264 100% 60% (lighter purple for contrast)\n- Secondary: 210 40% 85% (light gray text)\n- Background: 222 20% 12% (deep dark blue)\n- Surface: 220 15% 16% (elevated dark cards)\n- Accent: 142 76% 60% (success green)\n\n### Typography\n- **Primary Font**: Inter (Google Fonts) - excellent readability for interfaces\n- **Display Font**: Plus Jakarta Sans (Google Fonts) - friendly, modern for headings\n- **Hierarchy**: h1 (32px), h2 (24px), h3 (20px), body (16px), small (14px)\n\n### Layout System\n**Tailwind Spacing**: Use units of 2, 4, 6, 8, 12, 16 for consistent rhythm\n- Base padding: p-4, p-6, p-8\n- Component margins: m-2, m-4, m-8\n- Heights: h-8, h-12, h-16 for consistent component sizing\n\n### Component Library\n\n**Navigation:**\n- Clean sidebar with icon + text labels\n- Top header with search and user profile\n- Breadcrumb navigation for deep workflows\n\n**Content Creation:**\n- Canvas area with drag-drop interface\n- Tool palette with categorized options\n- Property panel for selected elements\n- Template gallery with preview cards\n\n**Data Management:**\n- Table views with sorting/filtering\n- Card layouts for visual content\n- Upload areas with drag-drop zones\n- Progress indicators for processing\n\n**Privacy Controls:**\n- Toggle switches for privacy settings\n- Clear data usage indicators\n- Consent management modal\n- Export/delete data options\n\n**Forms:**\n- Floating labels for inputs\n- Clear validation states\n- Multi-step wizards for complex flows\n- Auto-save indicators\n\n### Visual Hierarchy\n- Use 4-6 shades of gray for text hierarchy\n- Bold typography for primary actions\n- Subtle shadows for card elevation\n- Strategic use of the accent color for success states only\n\n### Interactions\n- Hover states with subtle scale (102%) and shadow changes\n- Loading states with skeleton screens\n- Smooth transitions (200-300ms ease-out)\n- Clear focus indicators for accessibility\n\n## Images\n**Hero Section**: Medium-sized hero (60vh) showcasing the graphic creation interface with a blurred background featuring sample social media posts. Place a primary CTA button with variant=\"outline\" and blurred background overlay.\n\n**Feature Sections**: Screenshots of the interface, template gallery, and brand kit management. Use actual interface mockups rather than abstract illustrations.\n\n**Template Gallery**: Preview thumbnails of social media templates organized by platform and category.\n\nThis design prioritizes usability and efficiency while maintaining visual appeal appropriate for creative professionals.","size_bytes":3165},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/replit.md":{"content":"# BODYCRAFT Master Data Management (MDM) System\n\n## Overview\n\nThe BODYCRAFT Master Data Management (MDM) System is a comprehensive web application designed to manage IT assets across 32 retail outlets throughout India. The system replaces manual Excel-based tracking with a centralized platform that maintains complete audit trails, manages asset assignments, and integrates with existing infrastructure systems like CCTV and biometric devices.\n\nThe application serves as a single source of truth for asset management, employee tracking, and location-based operations, ensuring data integrity through historical preservation and comprehensive logging of all transactions.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18** with TypeScript for type safety and modern component patterns\n- **Vite** as the build tool for fast development and optimized production builds\n- **Wouter** for lightweight client-side routing\n- **TanStack Query** for server state management and caching\n- **Shadcn/ui** component library built on Radix UI primitives for accessible, customizable components\n- **Tailwind CSS** with custom design system for consistent styling\n\n### Backend Architecture\n- **Node.js** with Express.js providing RESTful API endpoints\n- **TypeScript** throughout the stack for consistent type safety\n- **Zod** for runtime schema validation and type inference\n- **Modular storage interface** allowing for flexible database implementations\n- **Session-based architecture** with PostgreSQL session store\n\n### Data Storage Solutions\n- **PostgreSQL** as the primary database with Neon serverless hosting\n- **Drizzle ORM** for type-safe database queries and schema management\n- **Historical data preservation** - assignment history is never overwritten\n- **Comprehensive audit trails** for all data modifications\n- **Multi-tenant data isolation** supporting all 32 outlet locations\n\n### Authentication and Authorization\n- **Session-based authentication** using connect-pg-simple for PostgreSQL session storage\n- **Role-based access control** framework ready for implementation\n- **Location-based data filtering** ensuring users see relevant outlet information\n\n### Design System\n- **Modern design approach** inspired by Canva and Figma\n- **Dual theme support** (light/dark) with purple primary branding\n- **Responsive design** supporting desktop, tablet, and mobile devices\n- **Accessibility-first** component library with keyboard navigation and screen reader support\n\n### Database Schema Design\nThe system uses a relational model with core entities:\n- **Locations** - 32 BODYCRAFT outlets with contact information\n- **Employees** - Staff members with department and designation tracking\n- **Assets** - IT equipment with detailed specifications and lifecycle management\n- **Assignment History** - Immutable record of asset-to-employee assignments\n- **Maintenance Records** - Service history and warranty tracking\n- **Integration Tables** - CCTV systems, biometric devices, and backup records\n\n### API Architecture\n- **RESTful endpoints** following standard HTTP conventions\n- **Consistent error handling** with proper status codes and error messages\n- **Input validation** using Zod schemas at API boundaries\n- **Structured logging** for debugging and audit purposes\n\n## External Dependencies\n\n### Database Services\n- **Neon Database** - Serverless PostgreSQL hosting with automatic scaling\n- **Drizzle Kit** - Database migration and schema management tools\n\n### UI Framework\n- **Radix UI** - Headless component primitives for accessibility and customization\n- **Lucide React** - Modern icon library with consistent styling\n- **Embla Carousel** - Touch-friendly carousel components\n- **Class Variance Authority** - Type-safe component variant management\n\n### Development Tools\n- **Vite Plugins** - Development enhancements including error overlay and development banner\n- **PostCSS with Autoprefixer** - CSS processing and vendor prefix management\n- **TypeScript** - Static type checking across the entire application\n\n### Google Fonts Integration\n- **Inter** - Primary interface font for excellent readability\n- **Plus Jakarta Sans** - Display font for headings and emphasis\n- **Additional fonts** - Extended typography palette for various use cases\n\n### Form Management\n- **React Hook Form** - Performance-optimized form handling\n- **Hookform Resolvers** - Zod integration for form validation\n\n### Utilities\n- **Date-fns** - Date manipulation and formatting\n- **clsx and tailwind-merge** - Conditional CSS class management\n- **nanoid** - Unique ID generation for sessions and records\n\nThe system is architected for scalability and maintainability, with clear separation of concerns and comprehensive type safety throughout the stack.","size_bytes":4826},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1117},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport ConnectPgSimple from \"connect-pg-simple\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\nconst PgSession = ConnectPgSimple(session);\napp.use(session({\n  store: new PgSession({\n    conString: process.env.DATABASE_URL,\n  }),\n  secret: process.env.SESSION_SECRET || 'bodycraft-mdm-session-secret-key-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    maxAge: 8 * 60 * 60 * 1000, // 8 hours\n  },\n  name: 'bodycraft.sid',\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      \n      // Only log response body in development to prevent data leakage\n      if (app.get(\"env\") === \"development\" && capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2731},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport bcrypt from \"bcryptjs\";\nimport { storage } from \"./storage\";\nimport { \n  insertAssetSchema, \n  insertEmployeeSchema, \n  insertLocationSchema,\n  insertAssetAssignmentHistorySchema,\n  insertAssetMaintenanceSchema,\n  insertCctvSystemSchema,\n  insertBiometricSystemSchema,\n  insertBackupSchema \n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password are required\" });\n      }\n\n      // Get user by username\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid username or password\" });\n      }\n\n      // Check password\n      const isValid = await bcrypt.compare(password, user.passwordHash);\n      if (!isValid) {\n        return res.status(401).json({ message: \"Invalid username or password\" });\n      }\n\n      // Check if user is active\n      if (user.status !== \"active\") {\n        return res.status(401).json({ message: \"Account is inactive\" });\n      }\n\n      // Update last login\n      await storage.updateUser(user.id, { lastLogin: new Date() });\n\n      // Regenerate session ID to prevent session fixation\n      req.session.regenerate((err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Session error\" });\n        }\n        \n        // Create session (store in session)\n        req.session.userId = user.id;\n        req.session.username = user.username;\n        req.session.role = user.role;\n\n        // Return user info (without password hash)\n        const { passwordHash, ...userResponse } = user;\n        res.json({\n          message: \"Login successful\",\n          user: userResponse\n        });\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", async (req, res) => {\n    try {\n      req.session.destroy((err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Could not log out\" });\n        }\n        res.json({ message: \"Logged out successfully\" });\n      });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/auth/session\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      // Get current user info\n      const user = await storage.getUserByUsername(req.session.username);\n      if (!user || user.status !== \"active\") {\n        return res.status(401).json({ message: \"Invalid session\" });\n      }\n\n      // Return user info (without password hash)\n      const { passwordHash, ...userResponse } = user;\n      res.json({ user: userResponse });\n    } catch (error) {\n      console.error(\"Session check error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Middleware to check authentication\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    next();\n  };\n\n  // Middleware to check role permissions\n  const requireRole = (roles: string[]) => {\n    return (req: any, res: any, next: any) => {\n      if (!req.session.role || !roles.includes(req.session.role)) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      next();\n    };\n  };\n\n  // Assets routes - Protected with authentication\n  app.get(\"/api/assets\", requireAuth, async (req, res) => {\n    try {\n      const assets = await storage.getAllAssets();\n      res.json(assets);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch assets\" });\n    }\n  });\n\n  app.get(\"/api/assets/:id\", async (req, res) => {\n    try {\n      const asset = await storage.getAsset(req.params.id);\n      if (!asset) {\n        return res.status(404).json({ error: \"Asset not found\" });\n      }\n      res.json(asset);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch asset\" });\n    }\n  });\n\n  app.post(\"/api/assets\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const validatedAsset = insertAssetSchema.parse(req.body);\n      const asset = await storage.createAsset(validatedAsset);\n      res.status(201).json(asset);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid asset data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create asset\" });\n    }\n  });\n\n  app.patch(\"/api/assets/:id\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const validatedAsset = insertAssetSchema.partial().parse(req.body);\n      const asset = await storage.updateAsset(req.params.id, validatedAsset);\n      if (!asset) {\n        return res.status(404).json({ error: \"Asset not found\" });\n      }\n      res.json(asset);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid asset data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update asset\" });\n    }\n  });\n\n  app.delete(\"/api/assets/:id\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const success = await storage.deleteAsset(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Asset not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete asset\" });\n    }\n  });\n\n  // Employees routes\n  app.get(\"/api/employees\", requireAuth, async (req, res) => {\n    try {\n      const employees = await storage.getAllEmployees();\n      res.json(employees);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch employees\" });\n    }\n  });\n\n  app.get(\"/api/employees/:id\", async (req, res) => {\n    try {\n      const employee = await storage.getEmployee(parseInt(req.params.id));\n      if (!employee) {\n        return res.status(404).json({ error: \"Employee not found\" });\n      }\n      res.json(employee);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch employee\" });\n    }\n  });\n\n  app.post(\"/api/employees\", async (req, res) => {\n    try {\n      const validatedEmployee = insertEmployeeSchema.parse(req.body);\n      const employee = await storage.createEmployee(validatedEmployee);\n      res.status(201).json(employee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid employee data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create employee\" });\n    }\n  });\n\n  app.patch(\"/api/employees/:id\", async (req, res) => {\n    try {\n      const validatedEmployee = insertEmployeeSchema.partial().parse(req.body);\n      const employee = await storage.updateEmployee(parseInt(req.params.id), validatedEmployee);\n      if (!employee) {\n        return res.status(404).json({ error: \"Employee not found\" });\n      }\n      res.json(employee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid employee data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update employee\" });\n    }\n  });\n\n  app.delete(\"/api/employees/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteEmployee(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"Employee not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete employee\" });\n    }\n  });\n\n  // Locations routes\n  app.get(\"/api/locations\", requireAuth, async (req, res) => {\n    try {\n      const locations = await storage.getAllLocations();\n      res.json(locations);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch locations\" });\n    }\n  });\n\n  app.post(\"/api/locations\", async (req, res) => {\n    try {\n      const validatedLocation = insertLocationSchema.parse(req.body);\n      const location = await storage.createLocation(validatedLocation);\n      res.status(201).json(location);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid location data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create location\" });\n    }\n  });\n\n  app.patch(\"/api/locations/:id\", async (req, res) => {\n    try {\n      const validatedLocation = insertLocationSchema.partial().parse(req.body);\n      const location = await storage.updateLocation(parseInt(req.params.id), validatedLocation);\n      if (!location) {\n        return res.status(404).json({ error: \"Location not found\" });\n      }\n      res.json(location);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid location data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update location\" });\n    }\n  });\n\n  app.delete(\"/api/locations/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteLocation(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"Location not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete location\" });\n    }\n  });\n\n  // Assignment History routes\n  app.get(\"/api/assignments\", requireAuth, async (req, res) => {\n    try {\n      const assetId = req.query.assetId as string;\n      const employeeId = req.query.employeeId ? parseInt(req.query.employeeId as string) : undefined;\n      const assignments = await storage.getAssignmentHistory(assetId, employeeId);\n      res.json(assignments);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch assignments\" });\n    }\n  });\n\n  app.post(\"/api/assignments\", async (req, res) => {\n    try {\n      const validatedAssignment = insertAssetAssignmentHistorySchema.parse(req.body);\n      const assignment = await storage.createAssignment(validatedAssignment);\n      res.status(201).json(assignment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid assignment data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create assignment\" });\n    }\n  });\n\n  // Maintenance routes\n  app.get(\"/api/maintenance\", async (req, res) => {\n    try {\n      const assetId = req.query.assetId as string;\n      const maintenance = await storage.getMaintenanceRecords(assetId);\n      res.json(maintenance);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch maintenance records\" });\n    }\n  });\n\n  app.post(\"/api/maintenance\", async (req, res) => {\n    try {\n      const validatedMaintenance = insertAssetMaintenanceSchema.parse(req.body);\n      const maintenance = await storage.createMaintenanceRecord(validatedMaintenance);\n      res.status(201).json(maintenance);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid maintenance data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create maintenance record\" });\n    }\n  });\n\n  app.patch(\"/api/maintenance/:id\", async (req, res) => {\n    try {\n      const validatedMaintenance = insertAssetMaintenanceSchema.partial().parse(req.body);\n      const maintenance = await storage.updateMaintenanceRecord(parseInt(req.params.id), validatedMaintenance);\n      if (!maintenance) {\n        return res.status(404).json({ error: \"Maintenance record not found\" });\n      }\n      res.json(maintenance);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid maintenance data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update maintenance record\" });\n    }\n  });\n\n  app.delete(\"/api/maintenance/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteMaintenanceRecord(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"Maintenance record not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete maintenance record\" });\n    }\n  });\n\n  // CCTV Systems routes\n  app.get(\"/api/cctv\", async (req, res) => {\n    try {\n      const systems = await storage.getAllCctvSystems();\n      // Mask sensitive data\n      const maskedSystems = systems.map(system => ({\n        ...system,\n        passwordHash: system.passwordHash ? \"********\" : null\n      }));\n      res.json(maskedSystems);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch CCTV systems\" });\n    }\n  });\n\n  app.post(\"/api/cctv\", async (req, res) => {\n    try {\n      const validatedSystem = insertCctvSystemSchema.parse(req.body);\n      const system = await storage.createCctvSystem(validatedSystem);\n      // Mask sensitive data in response\n      const maskedSystem = {\n        ...system,\n        passwordHash: system.passwordHash ? \"********\" : null\n      };\n      res.status(201).json(maskedSystem);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid CCTV system data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create CCTV system\" });\n    }\n  });\n\n  app.patch(\"/api/cctv/:id\", async (req, res) => {\n    try {\n      const validatedSystem = insertCctvSystemSchema.partial().parse(req.body);\n      const system = await storage.updateCctvSystem(parseInt(req.params.id), validatedSystem);\n      if (!system) {\n        return res.status(404).json({ error: \"CCTV system not found\" });\n      }\n      // Mask sensitive data in response\n      const maskedSystem = {\n        ...system,\n        passwordHash: system.passwordHash ? \"********\" : null\n      };\n      res.json(maskedSystem);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid CCTV system data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update CCTV system\" });\n    }\n  });\n\n  app.delete(\"/api/cctv/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteCctvSystem(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"CCTV system not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete CCTV system\" });\n    }\n  });\n\n  // Biometric Systems routes\n  app.get(\"/api/biometric\", async (req, res) => {\n    try {\n      const systems = await storage.getAllBiometricSystems();\n      res.json(systems);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch biometric systems\" });\n    }\n  });\n\n  app.post(\"/api/biometric\", async (req, res) => {\n    try {\n      const validatedSystem = insertBiometricSystemSchema.parse(req.body);\n      const system = await storage.createBiometricSystem(validatedSystem);\n      res.status(201).json(system);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid biometric system data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create biometric system\" });\n    }\n  });\n\n  app.patch(\"/api/biometric/:id\", async (req, res) => {\n    try {\n      const validatedSystem = insertBiometricSystemSchema.partial().parse(req.body);\n      const system = await storage.updateBiometricSystem(parseInt(req.params.id), validatedSystem);\n      if (!system) {\n        return res.status(404).json({ error: \"Biometric system not found\" });\n      }\n      res.json(system);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid biometric system data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update biometric system\" });\n    }\n  });\n\n  app.delete(\"/api/biometric/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteBiometricSystem(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"Biometric system not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete biometric system\" });\n    }\n  });\n\n  // Backup routes\n  app.get(\"/api/backups\", async (req, res) => {\n    try {\n      const assetId = req.query.assetId as string;\n      const backups = await storage.getBackups(assetId);\n      res.json(backups);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch backups\" });\n    }\n  });\n\n  app.post(\"/api/backups\", async (req, res) => {\n    try {\n      const validatedBackup = insertBackupSchema.parse(req.body);\n      const backup = await storage.createBackup(validatedBackup);\n      res.status(201).json(backup);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid backup data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create backup\" });\n    }\n  });\n\n  app.patch(\"/api/backups/:id\", async (req, res) => {\n    try {\n      const validatedBackup = insertBackupSchema.partial().parse(req.body);\n      const backup = await storage.updateBackup(parseInt(req.params.id), validatedBackup);\n      if (!backup) {\n        return res.status(404).json({ error: \"Backup not found\" });\n      }\n      res.json(backup);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid backup data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update backup\" });\n    }\n  });\n\n  app.delete(\"/api/backups/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteBackup(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"Backup not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete backup\" });\n    }\n  });\n\n  // Reports API endpoints\n  \n  // Get available report templates\n  app.get(\"/api/reports/templates\", async (req, res) => {\n    try {\n      const templates = [\n        {\n          id: \"asset-inventory\",\n          name: \"Asset Inventory Report\", \n          description: \"Complete inventory of all assets across locations with current status, condition, and assignment details\",\n          category: \"assets\",\n          fields: [\"assetId\", \"assetType\", \"brand\", \"modelName\", \"serialNumber\", \"purchaseDate\", \"purchaseCost\", \"status\", \"condition\", \"locationId\"],\n          filters: [\"location\", \"assetType\", \"status\", \"condition\", \"purchaseDate\"],\n          totalRuns: 15,\n          lastRun: \"2024-01-18\"\n        },\n        {\n          id: \"maintenance-summary\",\n          name: \"Maintenance Summary Report\",\n          description: \"Comprehensive maintenance activities, costs, and schedules with vendor performance analysis\",\n          category: \"maintenance\", \n          fields: [\"assetId\", \"maintenanceType\", \"description\", \"scheduledDate\", \"completedDate\", \"cost\", \"vendor\", \"status\"],\n          filters: [\"maintenanceType\", \"status\", \"vendor\", \"dateRange\", \"location\"],\n          totalRuns: 23,\n          lastRun: \"2024-01-19\"\n        },\n        {\n          id: \"assignment-history\",\n          name: \"Assignment History Report\",\n          description: \"Historical tracking of asset assignments with employee details and assignment duration analysis\",\n          category: \"assignments\",\n          fields: [\"assetId\", \"employeeId\", \"assignedDate\", \"returnedDate\", \"notes\"],\n          filters: [\"employee\", \"department\", \"location\", \"dateRange\", \"assetType\"],\n          totalRuns: 18,\n          lastRun: \"2024-01-20\"\n        },\n        {\n          id: \"location-analytics\", \n          name: \"Location Analytics Report\",\n          description: \"Multi-location performance analytics with asset distribution, utilization rates, and cost analysis\",\n          category: \"locations\",\n          fields: [\"outletName\", \"city\", \"state\", \"manager\", \"contactEmail\", \"contactPhone\"],\n          filters: [\"location\", \"assetType\", \"dateRange\"],\n          totalRuns: 8,\n          lastRun: \"2024-01-17\"\n        },\n        {\n          id: \"compliance-audit\",\n          name: \"Compliance Audit Report\", \n          description: \"Comprehensive compliance status across backup verification, security audits, and policy adherence\",\n          category: \"compliance\",\n          fields: [\"locationId\", \"backupType\", \"backupDate\", \"verificationStatus\", \"evidenceProvided\", \"auditResult\"],\n          filters: [\"complianceType\", \"status\", \"location\", \"dateRange\"],\n          totalRuns: 12,\n          lastRun: \"2024-01-16\"\n        }\n      ];\n      res.json(templates);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch report templates\" });\n    }\n  });\n\n  // Generate and export report\n  app.post(\"/api/reports/generate\", async (req, res) => {\n    try {\n      const { templateId, filters, format = 'excel' } = req.body;\n      \n      let data: any[] = [];\n      let filename = \"\";\n      let headers: string[] = [];\n      \n      // Generate report data based on template\n      switch (templateId) {\n        case \"asset-inventory\":\n          data = await storage.getAllAssets();\n          filename = \"Asset_Inventory_Report\";\n          headers = [\"Asset ID\", \"Type\", \"Brand\", \"Model\", \"Serial Number\", \"Purchase Date\", \"Cost\", \"Status\", \"Condition\", \"Location\"];\n          \n          // Apply location filter if provided\n          if (filters?.location && filters.location !== \"all\") {\n            const locationId = parseInt(filters.location);\n            data = data.filter((asset: any) => asset.locationId === locationId);\n          }\n          \n          // Apply asset type filter\n          if (filters?.assetType && filters.assetType !== \"all\") {\n            data = data.filter((asset: any) => asset.assetType === filters.assetType);\n          }\n          \n          // Apply status filter\n          if (filters?.status && filters.status !== \"all\") {\n            data = data.filter((asset: any) => asset.status === filters.status);\n          }\n          \n          // Transform data for export\n          data = data.map((asset: any) => [\n            asset.assetId,\n            asset.assetType,\n            asset.brand,\n            asset.modelName,\n            asset.serialNumber || \"\",\n            asset.purchaseDate,\n            asset.purchaseCost || 0,\n            asset.status,\n            asset.condition,\n            asset.locationId || \"\"\n          ]);\n          break;\n          \n        case \"maintenance-summary\":\n          data = await storage.getMaintenanceRecords();\n          filename = \"Maintenance_Summary_Report\";\n          headers = [\"Asset ID\", \"Type\", \"Description\", \"Scheduled Date\", \"Completed Date\", \"Cost\", \"Vendor\", \"Status\"];\n          \n          // Apply status filter\n          if (filters?.status && filters.status !== \"all\") {\n            data = data.filter((maintenance: any) => maintenance.status === filters.status);\n          }\n          \n          // Apply maintenance type filter\n          if (filters?.maintenanceType && filters.maintenanceType !== \"all\") {\n            data = data.filter((maintenance: any) => maintenance.maintenanceType === filters.maintenanceType);\n          }\n          \n          // Transform data for export\n          data = data.map((maintenance: any) => [\n            maintenance.assetId,\n            maintenance.maintenanceType,\n            maintenance.description,\n            maintenance.scheduledDate,\n            maintenance.completedDate || \"\",\n            maintenance.cost || 0,\n            maintenance.vendor || \"\",\n            maintenance.status\n          ]);\n          break;\n          \n        case \"assignment-history\":\n          data = await storage.getAssignmentHistory();\n          filename = \"Assignment_History_Report\";\n          headers = [\"Asset ID\", \"Employee ID\", \"Assigned Date\", \"Returned Date\", \"Notes\"];\n          \n          // Transform data for export\n          data = data.map((assignment: any) => [\n            assignment.assetId,\n            assignment.employeeId,\n            assignment.assignedDate,\n            assignment.returnedDate || \"\",\n            assignment.notes || \"\"\n          ]);\n          break;\n          \n        case \"location-analytics\":\n          data = await storage.getAllLocations();\n          filename = \"Location_Analytics_Report\";\n          headers = [\"Outlet Name\", \"City\", \"State\", \"Manager\", \"Contact Email\", \"Contact Phone\"];\n          \n          // Transform data for export\n          data = data.map((location: any) => [\n            location.outletName,\n            location.city,\n            location.state,\n            location.manager || \"\",\n            location.contactEmail || \"\",\n            location.contactPhone || \"\"\n          ]);\n          break;\n          \n        case \"compliance-audit\":\n          data = await storage.getBackups();\n          filename = \"Compliance_Audit_Report\";\n          headers = [\"Location ID\", \"Backup Type\", \"Backup Date\", \"Verification Status\", \"Evidence\", \"Audit Result\"];\n          \n          // Transform data for export\n          data = data.map((backup: any) => [\n            backup.locationId,\n            backup.backupType,\n            backup.backupDate,\n            backup.verificationStatus,\n            backup.evidenceProvided ? \"Yes\" : \"No\",\n            backup.auditResult || \"\"\n          ]);\n          break;\n          \n        default:\n          return res.status(400).json({ error: \"Invalid template ID\" });\n      }\n      \n      // Generate Excel file\n      if (format === 'excel') {\n        const XLSX = require('xlsx');\n        \n        // Create workbook and worksheet\n        const wb = XLSX.utils.book_new();\n        const ws = XLSX.utils.aoa_to_sheet([headers, ...data]);\n        \n        // Add worksheet to workbook\n        XLSX.utils.book_append_sheet(wb, ws, 'Report');\n        \n        // Generate Excel buffer\n        const excelBuffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });\n        \n        // Set response headers for file download\n        res.set({\n          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n          'Content-Disposition': `attachment; filename=\"${filename}_${new Date().toISOString().split('T')[0]}.xlsx\"`\n        });\n        \n        return res.send(excelBuffer);\n      }\n      \n      // For CSV format\n      if (format === 'csv') {\n        const csvData = [headers, ...data].map(row => row.join(',')).join('\\n');\n        \n        res.set({\n          'Content-Type': 'text/csv',\n          'Content-Disposition': `attachment; filename=\"${filename}_${new Date().toISOString().split('T')[0]}.csv\"`\n        });\n        \n        return res.send(csvData);\n      }\n      \n      // Default JSON response\n      res.json({\n        templateId,\n        filename,\n        headers,\n        data,\n        rowCount: data.length,\n        generatedAt: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error('Report generation error:', error);\n      res.status(500).json({ error: \"Failed to generate report\" });\n    }\n  });\n\n  // Get custom reports\n  app.get(\"/api/reports/custom\", async (req, res) => {\n    try {\n      // In a real implementation, this would fetch from database\n      // For now, returning mock data with proper structure\n      const customReports = [\n        {\n          id: \"custom-1\",\n          name: \"Monthly Laptop Assignment Report\",\n          description: \"Monthly tracking of laptop assignments for JP Nagar location\",\n          entity: \"assignments\",\n          fields: [\"assetId\", \"employeeName\", \"assignedDate\", \"status\"],\n          filters: { location: \"JP Nagar\", assetType: \"Laptop\", dateRange: \"monthly\" },\n          createdDate: \"2024-01-15\",\n          createdBy: \"Admin User\",\n          lastRun: \"2024-01-20\",\n          totalRuns: 5\n        }\n      ];\n      res.json(customReports);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch custom reports\" });\n    }\n  });\n\n  // Create custom report\n  app.post(\"/api/reports/custom\", async (req, res) => {\n    try {\n      const { name, description, entity, fields, filters } = req.body;\n      \n      // Validate required fields\n      if (!name || !entity || !fields) {\n        return res.status(400).json({ error: \"Name, entity, and fields are required\" });\n      }\n      \n      const customReport = {\n        id: `custom-${Date.now()}`,\n        name,\n        description: description || \"\",\n        entity,\n        fields,\n        filters: filters || {},\n        createdDate: new Date().toISOString().split('T')[0],\n        createdBy: \"Admin User\", // In real implementation, get from auth\n        lastRun: null,\n        totalRuns: 0\n      };\n      \n      // In real implementation, save to database\n      // await storage.createCustomReport(customReport);\n      \n      res.status(201).json(customReport);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create custom report\" });\n    }\n  });\n\n  // Generate custom report\n  app.post(\"/api/reports/custom/:id/generate\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { format = 'excel' } = req.body;\n      \n      // In real implementation, fetch custom report config from database\n      // For now, handle basic case\n      \n      let data: any[] = [];\n      let filename = \"Custom_Report\";\n      let headers: string[] = [];\n      \n      // This would fetch the custom report configuration and execute it\n      // For demonstration, we'll return assets data\n      data = await storage.getAllAssets();\n      filename = \"Custom_Asset_Report\";\n      headers = [\"Asset ID\", \"Type\", \"Brand\", \"Model\", \"Status\"];\n      \n      data = data.map((asset: any) => [\n        asset.assetId,\n        asset.assetType,\n        asset.brand,\n        asset.modelName,\n        asset.status\n      ]);\n      \n      if (format === 'excel') {\n        const XLSX = require('xlsx');\n        const wb = XLSX.utils.book_new();\n        const ws = XLSX.utils.aoa_to_sheet([headers, ...data]);\n        XLSX.utils.book_append_sheet(wb, ws, 'Report');\n        \n        const excelBuffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });\n        \n        res.set({\n          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n          'Content-Disposition': `attachment; filename=\"${filename}_${new Date().toISOString().split('T')[0]}.xlsx\"`\n        });\n        \n        return res.send(excelBuffer);\n      }\n      \n      res.json({ data, rowCount: data.length });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to generate custom report\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":31556},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/server/storage.ts":{"content":"import { \n  type Asset, type InsertAsset,\n  type Employee, type InsertEmployee,\n  type Location, type InsertLocation,\n  type AssetAssignmentHistory, type InsertAssetAssignmentHistory,\n  type AssetMaintenance, type InsertAssetMaintenance,\n  type CctvSystem, type InsertCctvSystem,\n  type BiometricSystem, type InsertBiometricSystem,\n  type Backup, type InsertBackup\n} from \"@shared/schema\";\n\n// BODYCRAFT MDM Storage Interface\nexport interface IStorage {\n  // Assets\n  getAsset(assetId: string): Promise<Asset | undefined>;\n  getAllAssets(): Promise<Asset[]>;\n  createAsset(asset: InsertAsset): Promise<Asset>;\n  updateAsset(assetId: string, asset: Partial<InsertAsset>): Promise<Asset | undefined>;\n  deleteAsset(assetId: string): Promise<boolean>;\n  \n  // Employees\n  getEmployee(id: number): Promise<Employee | undefined>;\n  getAllEmployees(): Promise<Employee[]>;\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  updateEmployee(id: number, employee: Partial<InsertEmployee>): Promise<Employee | undefined>;\n  deleteEmployee(id: number): Promise<boolean>;\n  \n  // Locations\n  getLocation(id: number): Promise<Location | undefined>;\n  getAllLocations(): Promise<Location[]>;\n  createLocation(location: InsertLocation): Promise<Location>;\n  updateLocation(id: number, location: Partial<InsertLocation>): Promise<Location | undefined>;\n  deleteLocation(id: number): Promise<boolean>;\n  \n  // Assignment History\n  getAssignmentHistory(assetId?: string, employeeId?: number): Promise<AssetAssignmentHistory[]>;\n  createAssignment(assignment: InsertAssetAssignmentHistory): Promise<AssetAssignmentHistory>;\n  \n  // Maintenance\n  getMaintenanceRecords(assetId?: string): Promise<AssetMaintenance[]>;\n  createMaintenanceRecord(maintenance: InsertAssetMaintenance): Promise<AssetMaintenance>;\n  updateMaintenanceRecord(id: number, maintenance: Partial<InsertAssetMaintenance>): Promise<AssetMaintenance | undefined>;\n  deleteMaintenanceRecord(id: number): Promise<boolean>;\n  \n  // CCTV Systems\n  getAllCctvSystems(): Promise<CctvSystem[]>;\n  createCctvSystem(system: InsertCctvSystem): Promise<CctvSystem>;\n  updateCctvSystem(id: number, system: Partial<InsertCctvSystem>): Promise<CctvSystem | undefined>;\n  deleteCctvSystem(id: number): Promise<boolean>;\n  \n  // Biometric Systems\n  getAllBiometricSystems(): Promise<BiometricSystem[]>;\n  createBiometricSystem(system: InsertBiometricSystem): Promise<BiometricSystem>;\n  updateBiometricSystem(id: number, system: Partial<InsertBiometricSystem>): Promise<BiometricSystem | undefined>;\n  deleteBiometricSystem(id: number): Promise<boolean>;\n  \n  // Backups\n  getBackups(assetId?: string): Promise<Backup[]>;\n  createBackup(backup: InsertBackup): Promise<Backup>;\n  updateBackup(id: number, backup: Partial<InsertBackup>): Promise<Backup | undefined>;\n  deleteBackup(id: number): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private assets: Map<string, Asset>;\n  private employees: Map<number, Employee>;\n  private locations: Map<number, Location>;\n  private assignmentHistory: AssetAssignmentHistory[];\n  private maintenance: AssetMaintenance[];\n  private cctvSystems: Map<number, CctvSystem>;\n  private biometricSystems: Map<number, BiometricSystem>;\n  private backups: Backup[];\n  \n  // Counters for auto-increment IDs\n  private nextEmployeeId: number = 1;\n  private nextLocationId: number = 1;\n  private nextAssignmentId: number = 1;\n  private nextMaintenanceId: number = 1;\n  private nextCctvId: number = 1;\n  private nextBiometricId: number = 1;\n  private nextBackupId: number = 1;\n\n  constructor() {\n    this.assets = new Map();\n    this.employees = new Map();\n    this.locations = new Map();\n    this.assignmentHistory = [];\n    this.maintenance = [];\n    this.cctvSystems = new Map();\n    this.biometricSystems = new Map();\n    this.backups = [];\n    \n    // Initialize with sample data\n    this.initializeSampleData();\n  }\n\n  // Assets\n  async getAsset(assetId: string): Promise<Asset | undefined> {\n    return this.assets.get(assetId);\n  }\n\n  async getAllAssets(): Promise<Asset[]> {\n    return Array.from(this.assets.values());\n  }\n\n  async createAsset(insertAsset: InsertAsset): Promise<Asset> {\n    const asset: Asset = {\n      ...insertAsset,\n      status: insertAsset.status || \"available\",\n      condition: insertAsset.condition || \"good\",\n      serviceTag: insertAsset.serviceTag || null,\n      purchaseDate: insertAsset.purchaseDate || null,\n      warrantyExpiry: insertAsset.warrantyExpiry || null,\n      locationId: insertAsset.locationId || null,\n      currentUserId: insertAsset.currentUserId || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.assets.set(asset.assetId, asset);\n    return asset;\n  }\n\n  async updateAsset(assetId: string, updateData: Partial<InsertAsset>): Promise<Asset | undefined> {\n    const existing = this.assets.get(assetId);\n    if (!existing) return undefined;\n    \n    // Prevent assetId changes as suggested by architect\n    const { assetId: _, ...safeUpdateData } = updateData;\n    \n    const updated: Asset = {\n      ...existing,\n      ...safeUpdateData,\n      assetId: existing.assetId, // Preserve original asset ID\n      createdAt: existing.createdAt, // Preserve creation date\n      updatedAt: new Date(),\n    };\n    this.assets.set(assetId, updated);\n    return updated;\n  }\n\n  async deleteAsset(assetId: string): Promise<boolean> {\n    return this.assets.delete(assetId);\n  }\n\n  // Employees\n  async getEmployee(id: number): Promise<Employee | undefined> {\n    return this.employees.get(id);\n  }\n\n  async getAllEmployees(): Promise<Employee[]> {\n    return Array.from(this.employees.values());\n  }\n\n  async createEmployee(insertEmployee: InsertEmployee): Promise<Employee> {\n    const employee: Employee = {\n      id: this.nextEmployeeId++,\n      employeeCode: insertEmployee.employeeCode,\n      firstName: insertEmployee.firstName,\n      lastName: insertEmployee.lastName,\n      department: insertEmployee.department,\n      designation: insertEmployee.designation || null,\n      email: insertEmployee.email || null,\n      phone: insertEmployee.phone || null,\n      status: insertEmployee.status || \"active\",\n      locationId: insertEmployee.locationId || null,\n      createdAt: new Date(),\n    };\n    this.employees.set(employee.id, employee);\n    return employee;\n  }\n\n  async updateEmployee(id: number, updateData: Partial<InsertEmployee>): Promise<Employee | undefined> {\n    const existing = this.employees.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Employee = { \n      ...existing, \n      ...updateData,\n      id: existing.id, // Prevent ID changes\n      createdAt: existing.createdAt, // Preserve creation date\n    };\n    this.employees.set(id, updated);\n    return updated;\n  }\n\n  async deleteEmployee(id: number): Promise<boolean> {\n    return this.employees.delete(id);\n  }\n\n  // Locations\n  async getLocation(id: number): Promise<Location | undefined> {\n    return this.locations.get(id);\n  }\n\n  async getAllLocations(): Promise<Location[]> {\n    return Array.from(this.locations.values());\n  }\n\n  async createLocation(insertLocation: InsertLocation): Promise<Location> {\n    const location: Location = {\n      id: this.nextLocationId++,\n      outletName: insertLocation.outletName,\n      city: insertLocation.city,\n      state: insertLocation.state,\n      address: insertLocation.address || null,\n      managerName: insertLocation.managerName || null,\n      contactDetails: insertLocation.contactDetails || null,\n      createdAt: new Date(),\n    };\n    this.locations.set(location.id, location);\n    return location;\n  }\n\n  async updateLocation(id: number, updateData: Partial<InsertLocation>): Promise<Location | undefined> {\n    const existing = this.locations.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Location = { \n      ...existing, \n      ...updateData,\n      id: existing.id, // Prevent ID changes\n      createdAt: existing.createdAt, // Preserve creation date\n    };\n    this.locations.set(id, updated);\n    return updated;\n  }\n\n  async deleteLocation(id: number): Promise<boolean> {\n    return this.locations.delete(id);\n  }\n\n  // Assignment History\n  async getAssignmentHistory(assetId?: string, employeeId?: number): Promise<AssetAssignmentHistory[]> {\n    let filtered = this.assignmentHistory;\n    \n    if (assetId) {\n      filtered = filtered.filter(h => h.assetId === assetId);\n    }\n    \n    if (employeeId) {\n      filtered = filtered.filter(h => h.employeeId === employeeId);\n    }\n    \n    return filtered;\n  }\n\n  async createAssignment(insertAssignment: InsertAssetAssignmentHistory): Promise<AssetAssignmentHistory> {\n    const assignment: AssetAssignmentHistory = {\n      id: this.nextAssignmentId++,\n      assetId: insertAssignment.assetId,\n      employeeId: insertAssignment.employeeId,\n      assignedDate: insertAssignment.assignedDate,\n      returnedDate: insertAssignment.returnedDate || null,\n      assignmentReason: insertAssignment.assignmentReason || null,\n      returnReason: insertAssignment.returnReason || null,\n      conditionOnAssignment: insertAssignment.conditionOnAssignment || null,\n      conditionOnReturn: insertAssignment.conditionOnReturn || null,\n      backupDetails: insertAssignment.backupDetails || null,\n      createdBy: insertAssignment.createdBy || null,\n      createdAt: new Date(),\n    };\n    this.assignmentHistory.push(assignment);\n    return assignment;\n  }\n\n  // Maintenance\n  async getMaintenanceRecords(assetId?: string): Promise<AssetMaintenance[]> {\n    if (assetId) {\n      return this.maintenance.filter(m => m.assetId === assetId);\n    }\n    return this.maintenance;\n  }\n\n  async createMaintenanceRecord(insertMaintenance: InsertAssetMaintenance): Promise<AssetMaintenance> {\n    const maintenance: AssetMaintenance = {\n      id: this.nextMaintenanceId++,\n      assetId: insertMaintenance.assetId,\n      maintenanceType: insertMaintenance.maintenanceType || null,\n      description: insertMaintenance.description || null,\n      scheduledDate: insertMaintenance.scheduledDate || null,\n      completedDate: insertMaintenance.completedDate || null,\n      cost: insertMaintenance.cost || null,\n      technicianName: insertMaintenance.technicianName || null,\n      partsReplaced: insertMaintenance.partsReplaced || null,\n      createdAt: new Date(),\n    };\n    this.maintenance.push(maintenance);\n    return maintenance;\n  }\n\n  async updateMaintenanceRecord(id: number, updateData: Partial<InsertAssetMaintenance>): Promise<AssetMaintenance | undefined> {\n    const index = this.maintenance.findIndex(m => m.id === id);\n    if (index === -1) return undefined;\n    \n    const updated: AssetMaintenance = { ...this.maintenance[index], ...updateData };\n    this.maintenance[index] = updated;\n    return updated;\n  }\n\n  async deleteMaintenanceRecord(id: number): Promise<boolean> {\n    const index = this.maintenance.findIndex(m => m.id === id);\n    if (index === -1) return false;\n    this.maintenance.splice(index, 1);\n    return true;\n  }\n\n  // CCTV Systems\n  async getAllCctvSystems(): Promise<CctvSystem[]> {\n    return Array.from(this.cctvSystems.values());\n  }\n\n  async createCctvSystem(insertSystem: InsertCctvSystem): Promise<CctvSystem> {\n    const system: CctvSystem = {\n      id: this.nextCctvId++,\n      deviceName: insertSystem.deviceName,\n      ipAddress: insertSystem.ipAddress,\n      locationDetails: insertSystem.locationDetails || null,\n      username: insertSystem.username || null,\n      passwordHash: insertSystem.passwordHash || null,\n      status: insertSystem.status || \"online\",\n      lastOnline: insertSystem.lastOnline || null,\n      locationId: insertSystem.locationId || null,\n      createdAt: new Date(),\n    };\n    this.cctvSystems.set(system.id, system);\n    return system;\n  }\n\n  async updateCctvSystem(id: number, updateData: Partial<InsertCctvSystem>): Promise<CctvSystem | undefined> {\n    const existing = this.cctvSystems.get(id);\n    if (!existing) return undefined;\n    \n    const updated: CctvSystem = { ...existing, ...updateData };\n    this.cctvSystems.set(id, updated);\n    return updated;\n  }\n\n  async deleteCctvSystem(id: number): Promise<boolean> {\n    return this.cctvSystems.delete(id);\n  }\n\n  // Biometric Systems\n  async getAllBiometricSystems(): Promise<BiometricSystem[]> {\n    return Array.from(this.biometricSystems.values());\n  }\n\n  async createBiometricSystem(insertSystem: InsertBiometricSystem): Promise<BiometricSystem> {\n    const system: BiometricSystem = {\n      id: this.nextBiometricId++,\n      deviceName: insertSystem.deviceName,\n      deviceModel: insertSystem.deviceModel || null,\n      ipAddress: insertSystem.ipAddress || null,\n      locationDetails: insertSystem.locationDetails || null,\n      employeeCount: insertSystem.employeeCount ?? 0,  // Fix: Use nullish coalescing to handle 0 properly\n      lastSyncDate: insertSystem.lastSyncDate || null,\n      status: insertSystem.status || \"online\",\n      locationId: insertSystem.locationId || null,\n      createdAt: new Date(),\n    };\n    this.biometricSystems.set(system.id, system);\n    return system;\n  }\n\n  async updateBiometricSystem(id: number, updateData: Partial<InsertBiometricSystem>): Promise<BiometricSystem | undefined> {\n    const existing = this.biometricSystems.get(id);\n    if (!existing) return undefined;\n    \n    const updated: BiometricSystem = { ...existing, ...updateData };\n    this.biometricSystems.set(id, updated);\n    return updated;\n  }\n\n  async deleteBiometricSystem(id: number): Promise<boolean> {\n    return this.biometricSystems.delete(id);\n  }\n\n  // Backups\n  async getBackups(assetId?: string): Promise<Backup[]> {\n    if (assetId) {\n      return this.backups.filter(b => b.assetId === assetId);\n    }\n    return this.backups;\n  }\n\n  async createBackup(insertBackup: InsertBackup): Promise<Backup> {\n    const backup: Backup = {\n      id: this.nextBackupId++,\n      assetId: insertBackup.assetId,\n      employeeId: insertBackup.employeeId || null,\n      backupDate: insertBackup.backupDate,\n      backupSize: insertBackup.backupSize || null,\n      backupType: insertBackup.backupType || null,\n      backupLocation: insertBackup.backupLocation || null,\n      performedBy: insertBackup.performedBy || null,\n      createdAt: new Date(),\n    };\n    this.backups.push(backup);\n    return backup;\n  }\n\n  async updateBackup(id: number, updateData: Partial<InsertBackup>): Promise<Backup | undefined> {\n    const index = this.backups.findIndex(b => b.id === id);\n    if (index === -1) return undefined;\n    \n    const updated: Backup = { ...this.backups[index], ...updateData };\n    this.backups[index] = updated;\n    return updated;\n  }\n\n  async deleteBackup(id: number): Promise<boolean> {\n    const index = this.backups.findIndex(b => b.id === id);\n    if (index === -1) return false;\n    this.backups.splice(index, 1);\n    return true;\n  }\n\n  private initializeSampleData() {\n    // Sample locations\n    const locations = [\n      { outletName: \"JP Nagar\", city: \"Bangalore\", state: \"Karnataka\", managerName: \"Rajesh Kumar\", contactDetails: \"rajesh@bodycraft.com\" },\n      { outletName: \"Koramangala\", city: \"Bangalore\", state: \"Karnataka\", managerName: \"Priya Sharma\", contactDetails: \"priya@bodycraft.com\" },\n      { outletName: \"Indiranagar\", city: \"Bangalore\", state: \"Karnataka\", managerName: \"Amit Singh\", contactDetails: \"amit@bodycraft.com\" },\n    ];\n\n    locations.forEach(loc => {\n      const location: Location = {\n        ...loc,\n        id: this.nextLocationId++,\n        address: null,\n        createdAt: new Date(),\n      };\n      this.locations.set(location.id, location);\n    });\n\n    // Sample employees\n    const employees = [\n      { employeeCode: \"BFC2024001\", firstName: \"Rajesh\", lastName: \"Kumar\", department: \"IT\", designation: \"Manager\", email: \"rajesh@bodycraft.com\", status: \"active\", locationId: 1 },\n      { employeeCode: \"BFC2024002\", firstName: \"Priya\", lastName: \"Sharma\", department: \"Sales\", designation: \"Executive\", email: \"priya@bodycraft.com\", status: \"active\", locationId: 2 },\n      { employeeCode: \"BFC2024003\", firstName: \"Amit\", lastName: \"Singh\", department: \"Operations\", designation: \"Specialist\", email: \"amit@bodycraft.com\", status: \"active\", locationId: 3 },\n      { employeeCode: \"BFC2024004\", firstName: \"Sunita\", lastName: \"Reddy\", department: \"Marketing\", designation: \"Specialist\", email: \"sunita@bodycraft.com\", status: \"active\", locationId: 1 },\n    ];\n\n    employees.forEach(emp => {\n      const employee: Employee = {\n        ...emp,\n        id: this.nextEmployeeId++,\n        phone: null,\n        createdAt: new Date(),\n      };\n      this.employees.set(employee.id, employee);\n    });\n\n    // Sample assets\n    const assets = [\n      { assetId: \"BFC001\", modelName: \"ThinkPad E15\", brand: \"Lenovo\", serviceTag: \"LEN001\", assetType: \"Laptop\", status: \"assigned\", condition: \"good\", locationId: 1, currentUserId: 1 },\n      { assetId: \"BFC002\", modelName: \"OptiPlex 3080\", brand: \"Dell\", serviceTag: \"DELL002\", assetType: \"Desktop\", status: \"available\", condition: \"excellent\", locationId: 1, currentUserId: null },\n      { assetId: \"BFC003\", modelName: \"Surface Pro 8\", brand: \"Microsoft\", serviceTag: \"MS003\", assetType: \"Laptop\", status: \"assigned\", condition: \"good\", locationId: 2, currentUserId: 2 },\n      { assetId: \"BFC004\", modelName: \"UZ2450\", brand: \"Dell\", serviceTag: \"DELL004\", assetType: \"Monitor\", status: \"available\", condition: \"good\", locationId: 2, currentUserId: null },\n      { assetId: \"BFC005\", modelName: \"iPhone 14\", brand: \"Apple\", serviceTag: \"APL005\", assetType: \"Mobile\", status: \"assigned\", condition: \"excellent\", locationId: 3, currentUserId: 3 },\n      { assetId: \"BFC006\", modelName: \"MacBook Pro 14\", brand: \"Apple\", serviceTag: \"APL006\", assetType: \"Laptop\", status: \"maintenance\", condition: \"fair\", locationId: 3, currentUserId: null },\n      { assetId: \"BFC007\", modelName: \"ThinkPad X1\", brand: \"Lenovo\", serviceTag: \"LEN007\", assetType: \"Laptop\", status: \"assigned\", condition: \"good\", locationId: 1, currentUserId: 4 },\n    ];\n\n    assets.forEach(asset => {\n      const fullAsset: Asset = {\n        ...asset,\n        purchaseDate: null,\n        warrantyExpiry: null,\n        serviceTag: asset.serviceTag,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.assets.set(asset.assetId, fullAsset);\n    });\n\n    // Sample assignment history\n    const assignmentHistory = [\n      { assetId: \"BFC001\", employeeId: 1, assignedDate: \"2024-01-15\", returnedDate: null, assignmentReason: \"New employee setup\", createdBy: 1 },\n      { assetId: \"BFC003\", employeeId: 2, assignedDate: \"2024-02-01\", returnedDate: null, assignmentReason: \"Department transfer\", createdBy: 1 },\n      { assetId: \"BFC005\", employeeId: 3, assignedDate: \"2024-02-15\", returnedDate: null, assignmentReason: \"Business requirement\", createdBy: 1 },\n      { assetId: \"BFC007\", employeeId: 4, assignedDate: \"2024-03-01\", returnedDate: null, assignmentReason: \"New hire equipment\", createdBy: 1 },\n    ];\n\n    assignmentHistory.forEach(hist => {\n      const assignment: AssetAssignmentHistory = {\n        ...hist,\n        id: this.nextAssignmentId++,\n        returnReason: null,\n        conditionOnAssignment: null,\n        conditionOnReturn: null,\n        backupDetails: null,\n        createdAt: new Date(),\n      };\n      this.assignmentHistory.push(assignment);\n    });\n\n    // Sample maintenance records\n    const maintenanceRecords = [\n      { assetId: \"BFC006\", maintenanceType: \"corrective\", description: \"Screen replacement due to crack\", scheduledDate: \"2024-03-01\", completedDate: \"2024-03-02\", cost: \"15000.00\", technicianName: \"Ravi Tech Services\", partsReplaced: \"LCD Screen\" },\n      { assetId: \"BFC001\", maintenanceType: \"preventive\", description: \"Regular cleaning and system check\", scheduledDate: \"2024-03-15\", completedDate: \"2024-03-15\", cost: \"500.00\", technicianName: \"Internal IT\", partsReplaced: null },\n      { assetId: \"BFC002\", maintenanceType: \"upgrade\", description: \"RAM upgrade from 8GB to 16GB\", scheduledDate: \"2024-02-20\", completedDate: \"2024-02-21\", cost: \"3500.00\", technicianName: \"Dell Support\", partsReplaced: \"8GB DDR4 RAM\" },\n    ];\n\n    maintenanceRecords.forEach(record => {\n      const maintenance: AssetMaintenance = {\n        id: this.nextMaintenanceId++,\n        assetId: record.assetId,\n        maintenanceType: record.maintenanceType,\n        description: record.description,\n        scheduledDate: record.scheduledDate,\n        completedDate: record.completedDate,\n        cost: record.cost,\n        technicianName: record.technicianName,\n        partsReplaced: record.partsReplaced,\n        createdAt: new Date(),\n      };\n      this.maintenance.push(maintenance);\n    });\n\n    // Sample CCTV systems\n    const cctvSystems = [\n      { deviceName: \"JP Nagar Entrance Camera\", ipAddress: \"192.168.1.101\", locationDetails: \"Main entrance\", username: \"admin\", passwordHash: \"hashed_password_1\", status: \"online\", lastOnline: new Date(), locationId: 1 },\n      { deviceName: \"JP Nagar DVR System\", ipAddress: \"192.168.1.102\", locationDetails: \"Server room\", username: \"admin\", passwordHash: \"hashed_password_2\", status: \"online\", lastOnline: new Date(), locationId: 1 },\n      { deviceName: \"Koramangala Reception Cam\", ipAddress: \"192.168.2.101\", locationDetails: \"Reception area\", username: \"admin\", passwordHash: \"hashed_password_3\", status: \"online\", lastOnline: new Date(), locationId: 2 },\n      { deviceName: \"Indiranagar Security DVR\", ipAddress: \"192.168.3.101\", locationDetails: \"Security office\", username: \"admin\", passwordHash: \"hashed_password_4\", status: \"offline\", lastOnline: null, locationId: 3 },\n    ];\n\n    cctvSystems.forEach(system => {\n      const cctvSystem: CctvSystem = {\n        id: this.nextCctvId++,\n        deviceName: system.deviceName,\n        ipAddress: system.ipAddress,\n        locationDetails: system.locationDetails,\n        username: system.username,\n        passwordHash: system.passwordHash,\n        status: system.status,\n        lastOnline: system.lastOnline,\n        locationId: system.locationId,\n        createdAt: new Date(),\n      };\n      this.cctvSystems.set(cctvSystem.id, cctvSystem);\n    });\n\n    // Sample biometric systems\n    const biometricSystems = [\n      { deviceName: \"JP Nagar Attendance\", deviceModel: \"eSSL K30 Pro\", ipAddress: \"192.168.1.201\", locationDetails: \"Main entrance\", employeeCount: 15, lastSyncDate: new Date(), status: \"online\", locationId: 1 },\n      { deviceName: \"Koramangala Biometric\", deviceModel: \"ZKTeco F18\", ipAddress: \"192.168.2.201\", locationDetails: \"Employee entrance\", employeeCount: 12, lastSyncDate: new Date(), status: \"online\", locationId: 2 },\n      { deviceName: \"Indiranagar Access Control\", deviceModel: \"Realtime T502\", ipAddress: \"192.168.3.201\", locationDetails: \"Staff entry\", employeeCount: 18, lastSyncDate: new Date(), status: \"error\", locationId: 3 },\n    ];\n\n    biometricSystems.forEach(system => {\n      const biometricSystem: BiometricSystem = {\n        id: this.nextBiometricId++,\n        deviceName: system.deviceName,\n        deviceModel: system.deviceModel,\n        ipAddress: system.ipAddress,\n        locationDetails: system.locationDetails,\n        employeeCount: system.employeeCount,\n        lastSyncDate: system.lastSyncDate,\n        status: system.status,\n        locationId: system.locationId,\n        createdAt: new Date(),\n      };\n      this.biometricSystems.set(biometricSystem.id, biometricSystem);\n    });\n\n    // Sample backup records\n    const backupRecords = [\n      { assetId: \"BFC001\", employeeId: 1, backupDate: new Date(\"2024-01-14\"), backupSize: \"250GB\", backupType: \"full\", backupLocation: \"NAS Server - /backups/users/rajesh\", performedBy: 1 },\n      { assetId: \"BFC003\", employeeId: 2, backupDate: new Date(\"2024-01-31\"), backupSize: \"180GB\", backupType: \"selective\", backupLocation: \"Cloud Storage - AWS S3\", performedBy: 1 },\n      { assetId: \"BFC005\", employeeId: 3, backupDate: new Date(\"2024-02-14\"), backupSize: \"128GB\", backupType: \"full\", backupLocation: \"Local Server - /backups/mobile\", performedBy: 1 },\n    ];\n\n    backupRecords.forEach(record => {\n      const backup: Backup = {\n        id: this.nextBackupId++,\n        assetId: record.assetId,\n        employeeId: record.employeeId,\n        backupDate: record.backupDate,\n        backupSize: record.backupSize,\n        backupType: record.backupType,\n        backupLocation: record.backupLocation,\n        performedBy: record.performedBy,\n        createdAt: new Date(),\n      };\n      this.backups.push(backup);\n    });\n  }\n}\n\nimport { DatabaseStorage } from \"./database-storage\";\n\nexport const storage = new DatabaseStorage();\n","size_bytes":24718},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, decimal, date } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// 1. LOCATIONS - 32 BODYCRAFT outlets across India\nexport const locations = pgTable(\"locations\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  outletName: varchar(\"outlet_name\", { length: 255 }).notNull(),\n  city: varchar(\"city\", { length: 100 }).notNull(),\n  state: varchar(\"state\", { length: 100 }).notNull(),\n  address: text(\"address\"),\n  managerName: varchar(\"manager_name\", { length: 255 }),\n  contactDetails: varchar(\"contact_details\", { length: 255 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 2. EMPLOYEES - Staff members who can be assigned assets\nexport const employees = pgTable(\"employees\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  employeeCode: varchar(\"employee_code\", { length: 50 }).notNull().unique(), // BFC2024001, BFC2024002\n  firstName: varchar(\"first_name\", { length: 100 }).notNull(),\n  lastName: varchar(\"last_name\", { length: 100 }).notNull(),\n  department: varchar(\"department\", { length: 100 }).notNull(), // IT, Sales, Operations, Clinic\n  designation: varchar(\"designation\", { length: 100 }),\n  email: varchar(\"email\", { length: 255 }).unique(),\n  phone: varchar(\"phone\", { length: 20 }),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"active\"), // active, inactive, terminated\n  locationId: integer(\"location_id\").references(() => locations.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 3. ASSETS - Core entity for all IT assets\nexport const assets = pgTable(\"assets\", {\n  assetId: varchar(\"asset_id\", { length: 20 }).primaryKey(), // BFC001, BFC002, etc.\n  modelName: varchar(\"model_name\", { length: 255 }).notNull(),\n  brand: varchar(\"brand\", { length: 100 }).notNull(),\n  serviceTag: varchar(\"service_tag\", { length: 100 }).unique(),\n  assetType: varchar(\"asset_type\", { length: 50 }).notNull(), // Laptop, Desktop, Monitor, Mobile\n  purchaseDate: date(\"purchase_date\"),\n  warrantyExpiry: date(\"warranty_expiry\"),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"available\"), // available, assigned, maintenance, retired\n  condition: varchar(\"condition\", { length: 20 }).notNull().default(\"good\"), // excellent, good, fair, poor\n  locationId: integer(\"location_id\").references(() => locations.id),\n  currentUserId: integer(\"current_user_id\").references(() => employees.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// 4. ASSET ASSIGNMENT HISTORY - Critical for never losing assignment history\nexport const assetAssignmentHistory = pgTable(\"asset_assignment_history\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  assetId: varchar(\"asset_id\", { length: 20 }).notNull().references(() => assets.assetId),\n  employeeId: integer(\"employee_id\").notNull().references(() => employees.id),\n  assignedDate: date(\"assigned_date\").notNull(),\n  returnedDate: date(\"returned_date\"), // NULL for active assignments\n  assignmentReason: text(\"assignment_reason\"),\n  returnReason: text(\"return_reason\"),\n  conditionOnAssignment: varchar(\"condition_on_assignment\", { length: 20 }),\n  conditionOnReturn: varchar(\"condition_on_return\", { length: 20 }),\n  backupDetails: text(\"backup_details\"),\n  createdBy: integer(\"created_by\").references(() => employees.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 5. ASSET MAINTENANCE - Preventive and corrective maintenance\nexport const assetMaintenance = pgTable(\"asset_maintenance\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  assetId: varchar(\"asset_id\", { length: 20 }).notNull().references(() => assets.assetId),\n  maintenanceType: varchar(\"maintenance_type\", { length: 50 }), // preventive, corrective, upgrade\n  description: text(\"description\"),\n  scheduledDate: date(\"scheduled_date\"),\n  completedDate: date(\"completed_date\"),\n  cost: decimal(\"cost\", { precision: 10, scale: 2 }),\n  technicianName: varchar(\"technician_name\", { length: 255 }),\n  partsReplaced: text(\"parts_replaced\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 6. CCTV SYSTEMS - Integration with Hikvision devices\nexport const cctvSystems = pgTable(\"cctv_systems\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  deviceName: varchar(\"device_name\", { length: 255 }).notNull(),\n  ipAddress: varchar(\"ip_address\", { length: 45 }).notNull(), // Support IPv6 addresses\n  locationDetails: text(\"location_details\"),\n  username: varchar(\"username\", { length: 100 }),\n  passwordHash: varchar(\"password_hash\", { length: 255 }),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"online\"), // online, offline, error\n  lastOnline: timestamp(\"last_online\"),\n  locationId: integer(\"location_id\").references(() => locations.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 7. BIOMETRIC SYSTEMS - Employee synchronization and attendance\nexport const biometricSystems = pgTable(\"biometric_systems\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  deviceName: varchar(\"device_name\", { length: 255 }).notNull(),\n  deviceModel: varchar(\"device_model\", { length: 100 }),\n  ipAddress: varchar(\"ip_address\", { length: 45 }),\n  locationDetails: text(\"location_details\"),\n  employeeCount: integer(\"employee_count\").default(0),\n  lastSyncDate: timestamp(\"last_sync_date\"),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"online\"),\n  locationId: integer(\"location_id\").references(() => locations.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 8. BACKUPS - Data security and compliance tracking\nexport const backups = pgTable(\"backups\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  assetId: varchar(\"asset_id\", { length: 20 }).notNull().references(() => assets.assetId),\n  employeeId: integer(\"employee_id\").references(() => employees.id),\n  backupDate: timestamp(\"backup_date\").notNull(),\n  backupSize: varchar(\"backup_size\", { length: 50 }),\n  backupType: varchar(\"backup_type\", { length: 50 }), // full, incremental, selective\n  backupLocation: text(\"backup_location\"),\n  performedBy: integer(\"performed_by\").references(() => employees.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 9. REPORT EXECUTIONS - Track when reports are generated for real statistics\nexport const reportExecutions = pgTable(\"report_executions\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  templateId: varchar(\"template_id\", { length: 100 }).notNull(), // asset-inventory, maintenance-summary, etc.\n  reportName: varchar(\"report_name\", { length: 255 }).notNull(),\n  format: varchar(\"format\", { length: 20 }).notNull(), // excel, csv, pdf\n  filters: text(\"filters\"), // JSON string of applied filters\n  recordCount: integer(\"record_count\"), // Number of records in generated report\n  fileSize: varchar(\"file_size\", { length: 50 }), // Generated file size\n  executionTime: integer(\"execution_time_ms\"), // Time taken to generate in milliseconds\n  executedBy: integer(\"executed_by\").references(() => employees.id), // Who ran the report\n  locationId: integer(\"location_id\").references(() => locations.id), // Location context if applicable\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"completed\"), // completed, failed, cancelled\n  errorMessage: text(\"error_message\"), // If status is failed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert Schemas - Zod schemas for validation\nexport const insertLocationSchema = createInsertSchema(locations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAssetSchema = createInsertSchema(assets).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAssetAssignmentHistorySchema = createInsertSchema(assetAssignmentHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAssetMaintenanceSchema = createInsertSchema(assetMaintenance).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCctvSystemSchema = createInsertSchema(cctvSystems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBiometricSystemSchema = createInsertSchema(biometricSystems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBackupSchema = createInsertSchema(backups).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReportExecutionSchema = createInsertSchema(reportExecutions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// TypeScript Types\nexport type Location = typeof locations.$inferSelect;\nexport type InsertLocation = z.infer<typeof insertLocationSchema>;\n\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\n\nexport type Asset = typeof assets.$inferSelect;\nexport type InsertAsset = z.infer<typeof insertAssetSchema>;\n\nexport type AssetAssignmentHistory = typeof assetAssignmentHistory.$inferSelect;\nexport type InsertAssetAssignmentHistory = z.infer<typeof insertAssetAssignmentHistorySchema>;\n\nexport type AssetMaintenance = typeof assetMaintenance.$inferSelect;\nexport type InsertAssetMaintenance = z.infer<typeof insertAssetMaintenanceSchema>;\n\nexport type CctvSystem = typeof cctvSystems.$inferSelect;\nexport type InsertCctvSystem = z.infer<typeof insertCctvSystemSchema>;\n\nexport type BiometricSystem = typeof biometricSystems.$inferSelect;\nexport type InsertBiometricSystem = z.infer<typeof insertBiometricSystemSchema>;\n\nexport type Backup = typeof backups.$inferSelect;\nexport type InsertBackup = z.infer<typeof insertBackupSchema>;\n\nexport type ReportExecution = typeof reportExecutions.$inferSelect;\nexport type InsertReportExecution = z.infer<typeof insertReportExecutionSchema>;\n\n// USER AUTHENTICATION AND SETTINGS TABLES\n\n// 10. USERS - Authentication and system access (separate from employees)\nexport const users = pgTable(\"users\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  username: varchar(\"username\", { length: 100 }).notNull().unique(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  passwordHash: varchar(\"password_hash\", { length: 255 }).notNull(),\n  firstName: varchar(\"first_name\", { length: 100 }).notNull(),\n  lastName: varchar(\"last_name\", { length: 100 }).notNull(),\n  role: varchar(\"role\", { length: 50 }).notNull().default(\"user\"), // super_admin, admin, manager, user\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"active\"), // active, inactive, locked\n  lastLogin: timestamp(\"last_login\"),\n  employeeId: integer(\"employee_id\").references(() => employees.id), // Link to employee record if applicable\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// 11. USER SESSIONS - Track active user sessions\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: varchar(\"id\", { length: 255 }).primaryKey(), // Session ID\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 12. COMPANY SETTINGS - System configuration\nexport const companySettings = pgTable(\"company_settings\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  companyName: varchar(\"company_name\", { length: 255 }).notNull().default(\"BODYCRAFT\"),\n  logoUrl: varchar(\"logo_url\", { length: 500 }),\n  timezone: varchar(\"timezone\", { length: 100 }).notNull().default(\"Asia/Kolkata\"),\n  dateFormat: varchar(\"date_format\", { length: 20 }).notNull().default(\"DD/MM/YYYY\"),\n  language: varchar(\"language\", { length: 10 }).notNull().default(\"en\"),\n  sessionTimeout: integer(\"session_timeout\").notNull().default(480), // minutes\n  passwordMinLength: integer(\"password_min_length\").notNull().default(8),\n  emailNotificationsEnabled: boolean(\"email_notifications_enabled\").notNull().default(true),\n  maintenanceMode: boolean(\"maintenance_mode\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// 13. ASSET TYPES - Configurable asset categories\nexport const assetTypes = pgTable(\"asset_types\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  name: varchar(\"name\", { length: 100 }).notNull().unique(), // Laptop, Desktop, Monitor, etc.\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert Schemas for new tables\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSessionSchema = createInsertSchema(userSessions).omit({\n  createdAt: true,\n});\n\nexport const insertCompanySettingsSchema = createInsertSchema(companySettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAssetTypeSchema = createInsertSchema(assetTypes).omit({\n  id: true,\n  createdAt: true,\n});\n\n// TypeScript Types for new tables\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type UserSession = typeof userSessions.$inferSelect;\nexport type InsertUserSession = z.infer<typeof insertUserSessionSchema>;\n\nexport type CompanySettings = typeof companySettings.$inferSelect;\nexport type InsertCompanySettings = z.infer<typeof insertCompanySettingsSchema>;\n\nexport type AssetType = typeof assetTypes.$inferSelect;\nexport type InsertAssetType = z.infer<typeof insertAssetTypeSchema>;\n","size_bytes":13700},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Assets from \"@/pages/assets\";\nimport Employees from \"@/pages/employees\";\nimport Assignments from \"@/pages/assignments\";\nimport Locations from \"@/pages/locations\";\nimport Maintenance from \"@/pages/maintenance\";\nimport Compliance from \"@/pages/compliance\";\nimport CCTV from \"@/pages/cctv\";\nimport Biometric from \"@/pages/biometric\";\nimport Reports from \"@/pages/reports\";\nimport Settings from \"@/pages/settings\";\nimport Login from \"@/pages/login\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/assets\" component={Assets} />\n      <Route path=\"/employees\" component={Employees} />\n      <Route path=\"/assignments\" component={Assignments} />\n      <Route path=\"/locations\" component={Locations} />\n      <Route path=\"/maintenance\" component={Maintenance} />\n      <Route path=\"/compliance\" component={Compliance} />\n      <Route path=\"/cctv\" component={CCTV} />\n      <Route path=\"/biometric\" component={Biometric} />\n      <Route path=\"/reports\" component={Reports} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/login\" component={Login} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  // Custom sidebar width for MDM application\n  const style = {\n    \"--sidebar-width\": \"20rem\",       // 320px for better content\n    \"--sidebar-width-icon\": \"4rem\",   // default icon width\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"bodycraft-theme\">\n        <TooltipProvider>\n          <SidebarProvider style={style as React.CSSProperties}>\n            <div className=\"flex h-screen w-full\">\n              <AppSidebar />\n              <div className=\"flex flex-col flex-1\">\n                <header className=\"flex items-center justify-between p-2 border-b bg-background\">\n                  <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                  <div className=\"flex items-center gap-2\">\n                    <ThemeToggle />\n                  </div>\n                </header>\n                <main className=\"flex-1 overflow-auto bg-background\">\n                  <Router />\n                </main>\n              </div>\n            </div>\n          </SidebarProvider>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":3021},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 222 20% 15%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 222 20% 15%;\n\n  --card-border: 0 0% 94%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 222 20% 15%;\n\n  --sidebar-border: 0 0% 92%;\n\n  --sidebar-primary: 264 100% 50%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 0 0% 90%;\n\n  --sidebar-accent-foreground: 222 20% 15%;\n\n  --sidebar-ring: 264 100% 50%;\n\n  --popover: 0 0% 99%;\n\n  --popover-foreground: 222 20% 15%;\n\n  --popover-border: 0 0% 92%;\n\n  --primary: 264 100% 50%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 92%;\n\n  --secondary-foreground: 222 20% 15%;\n\n  --muted: 0 0% 94%;\n\n  --muted-foreground: 222 15% 40%;\n\n  --accent: 0 0% 93%;\n\n  --accent-foreground: 222 20% 15%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 80%;\n  --ring: 264 100% 50%;\n  --chart-1: 264 100% 50%;\n  --chart-2: 142 76% 45%;\n  --chart-3: 24 100% 50%;\n  --chart-4: 198 88% 48%;\n  --chart-5: 330 81% 60%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.02);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.03);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.03), 0px 1px 2px -1px hsl(0 0% 0% / 0.05);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.03), 0px 1px 2px -1px hsl(0 0% 0% / 0.05);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.04), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.04), 0px 4px 6px -1px hsl(0 0% 0% / 0.07);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.05), 0px 8px 10px -1px hsl(0 0% 0% / 0.08);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.06);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 20% 12%;\n\n  --foreground: 210 40% 85%;\n\n  --border: 220 15% 18%;\n\n  --card: 220 15% 16%;\n\n  --card-foreground: 210 40% 85%;\n\n  --card-border: 220 15% 22%;\n\n  --sidebar: 222 18% 14%;\n\n  --sidebar-foreground: 210 40% 85%;\n\n  --sidebar-border: 220 15% 20%;\n\n  --sidebar-primary: 264 100% 60%;\n\n  --sidebar-primary-foreground: 222 20% 12%;\n\n  --sidebar-accent: 220 15% 20%;\n\n  --sidebar-accent-foreground: 210 40% 85%;\n\n  --sidebar-ring: 264 100% 60%;\n\n  --popover: 220 15% 18%;\n\n  --popover-foreground: 210 40% 85%;\n\n  --popover-border: 220 15% 24%;\n\n  --primary: 264 100% 60%;\n\n  --primary-foreground: 222 20% 12%;\n\n  --secondary: 220 15% 22%;\n\n  --secondary-foreground: 210 40% 85%;\n\n  --muted: 220 15% 20%;\n\n  --muted-foreground: 210 30% 65%;\n\n  --accent: 220 15% 21%;\n\n  --accent-foreground: 210 40% 85%;\n\n  --destructive: 0 84% 55%;\n\n  --destructive-foreground: 222 20% 12%;\n\n  --input: 220 15% 25%;\n  --ring: 264 100% 60%;\n  --chart-1: 264 100% 65%;\n  --chart-2: 142 76% 55%;\n  --chart-3: 24 100% 60%;\n  --chart-4: 198 88% 58%;\n  --chart-5: 330 81% 70%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.15);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.20);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.25);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.25);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.25), 0px 2px 4px -1px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.25), 0px 4px 6px -1px hsl(0 0% 0% / 0.35);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.30), 0px 8px 10px -1px hsl(0 0% 0% / 0.40);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.35);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9734},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/app-sidebar.tsx":{"content":"import { Building2, Users, Laptop, MapPin, BarChart3, Cable, Fingerprint, Calendar, Settings, Wrench, Shield } from \"lucide-react\"\nimport { Link, useLocation } from \"wouter\"\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\"\n\n// Main navigation items for BODYCRAFT MDM System\nconst navigationItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: BarChart3,\n  },\n  {\n    title: \"Assets\",\n    url: \"/assets\",\n    icon: Laptop,\n  },\n  {\n    title: \"Employees\",\n    url: \"/employees\", \n    icon: Users,\n  },\n  {\n    title: \"Assignments\",\n    url: \"/assignments\",\n    icon: Calendar,\n  },\n  {\n    title: \"Locations\",\n    url: \"/locations\",\n    icon: MapPin,\n  },\n  {\n    title: \"Maintenance\",\n    url: \"/maintenance\",\n    icon: Wrench,\n  },\n  {\n    title: \"Backup & Compliance\",\n    url: \"/compliance\",\n    icon: Shield,\n  },\n]\n\n// Integration management items\nconst integrationItems = [\n  {\n    title: \"CCTV Systems\",\n    url: \"/cctv\",\n    icon: Cable,\n  },\n  {\n    title: \"Biometric Systems\", \n    url: \"/biometric\",\n    icon: Fingerprint,\n  },\n]\n\n// Reports and settings\nconst systemItems = [\n  {\n    title: \"Reports\",\n    url: \"/reports\",\n    icon: BarChart3,\n  },\n  {\n    title: \"Settings\",\n    url: \"/settings\",\n    icon: Settings,\n  },\n]\n\nexport function AppSidebar() {\n  const [location] = useLocation()\n\n  return (\n    <Sidebar data-testid=\"sidebar-main\">\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-lg font-semibold flex items-center gap-2\">\n            <Building2 className=\"h-5 w-5\" />\n            BODYCRAFT MDM\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {navigationItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild data={location === item.url ? { active: \"true\" } : {}}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Integrations</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {integrationItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild data={location === item.url ? { active: \"true\" } : {}}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>System</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {systemItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild data={location === item.url ? { active: \"true\" } : {}}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  )\n}","size_bytes":3973},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}","size_bytes":1577},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\"\nimport { useTheme } from \"./theme-provider\"\nimport { Button } from \"@/components/ui/button\"\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme()\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  )\n}","size_bytes":688},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/lib/excel.ts":{"content":"import * as XLSX from 'xlsx'\nimport { saveAs } from 'file-saver'\n\n// Excel export utility functions\nexport class ExcelExporter {\n  // Export any data array to Excel file\n  static exportToExcel(data: any[], filename: string, worksheetName: string = 'Sheet1') {\n    const worksheet = XLSX.utils.json_to_sheet(data)\n    const workbook = XLSX.utils.book_new()\n    XLSX.utils.book_append_sheet(workbook, worksheet, worksheetName)\n    \n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' })\n    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' })\n    \n    saveAs(blob, `${filename}_${new Date().toISOString().split('T')[0]}.xlsx`)\n  }\n\n  // Export assets data with proper formatting\n  static exportAssets(assets: any[], locations: any[]) {\n    const formattedData = assets.map(asset => {\n      const location = locations.find(l => l.id === asset.locationId)\n      return {\n        'Asset ID': asset.assetId,\n        'Brand': asset.brand,\n        'Model': asset.modelName,\n        'Type': asset.assetType,\n        'Serial Number': asset.serialNumber || 'N/A',\n        'Purchase Date': asset.purchaseDate ? new Date(asset.purchaseDate).toLocaleDateString() : 'N/A',\n        'Purchase Cost': asset.purchaseCost || 'N/A',\n        'Warranty Until': asset.warrantyUntil ? new Date(asset.warrantyUntil).toLocaleDateString() : 'N/A',\n        'Status': asset.status,\n        'Location': location ? `${location.outletName}, ${location.city}` : 'No Location',\n        'Condition': asset.condition || 'N/A',\n        'Created': new Date(asset.createdAt).toLocaleDateString(),\n        'Updated': new Date(asset.updatedAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Assets', 'Assets')\n  }\n\n  // Export employees data with proper formatting\n  static exportEmployees(employees: any[], locations: any[], assignments: any[], assets: any[]) {\n    const formattedData = employees.map(employee => {\n      const location = locations.find(l => l.id === employee.locationId)\n      const activeAssignment = assignments.find(a => a.employeeId === employee.id && !a.returnedDate)\n      const assignedAsset = activeAssignment ? assets.find(a => a.assetId === activeAssignment.assetId) : null\n      \n      return {\n        'Employee Code': employee.employeeCode,\n        'First Name': employee.firstName,\n        'Last Name': employee.lastName,\n        'Department': employee.department,\n        'Position': employee.position || 'N/A',\n        'Email': employee.email || 'N/A',\n        'Phone': employee.phone || 'N/A',\n        'Join Date': employee.joinDate ? new Date(employee.joinDate).toLocaleDateString() : 'N/A',\n        'Status': employee.status,\n        'Location': location ? `${location.outletName}, ${location.city}` : 'No Location',\n        'Assigned Asset': assignedAsset ? `${assignedAsset.assetId} - ${assignedAsset.brand} ${assignedAsset.modelName}` : 'No Asset',\n        'Created': new Date(employee.createdAt).toLocaleDateString(),\n        'Updated': new Date(employee.updatedAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Employees', 'Employees')\n  }\n\n  // Export assignments data with proper formatting\n  static exportAssignments(assignments: any[], employees: any[], assets: any[], locations: any[]) {\n    const formattedData = assignments.map(assignment => {\n      const employee = employees.find(e => e.id === assignment.employeeId)\n      const asset = assets.find(a => a.assetId === assignment.assetId)\n      const location = locations.find(l => l.id === asset?.locationId)\n      \n      return {\n        'Asset ID': assignment.assetId,\n        'Asset Details': asset ? `${asset.brand} ${asset.modelName}` : 'Unknown Asset',\n        'Employee Code': employee?.employeeCode || 'Unknown',\n        'Employee Name': employee ? `${employee.firstName} ${employee.lastName}` : 'Unknown Employee',\n        'Department': employee?.department || 'N/A',\n        'Location': location ? `${location.outletName}, ${location.city}` : 'No Location',\n        'Assigned Date': new Date(assignment.assignedDate).toLocaleDateString(),\n        'Returned Date': assignment.returnedDate ? new Date(assignment.returnedDate).toLocaleDateString() : 'Still Assigned',\n        'Assignment Condition': assignment.assignmentCondition || 'N/A',\n        'Return Condition': assignment.returnCondition || 'N/A',\n        'Assignment Reason': assignment.assignmentReason || 'N/A',\n        'Return Reason': assignment.returnReason || 'N/A',\n        'Backup Details': assignment.backupDetails || 'N/A',\n        'Status': assignment.returnedDate ? 'Returned' : 'Active',\n        'Created': new Date(assignment.createdAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Assignments', 'Assignments')\n  }\n\n  // Export locations data with analytics\n  static exportLocations(locations: any[], assets: any[], employees: any[], assignments: any[]) {\n    const formattedData = locations.map(location => {\n      const locationAssets = assets.filter(a => a.locationId === location.id)\n      const locationEmployees = employees.filter(e => e.locationId === location.id)\n      const activeAssignments = assignments.filter(a => {\n        const employee = employees.find(e => e.id === a.employeeId)\n        return employee?.locationId === location.id && !a.returnedDate\n      })\n      \n      return {\n        'Outlet Name': location.outletName,\n        'City': location.city,\n        'State': location.state,\n        'Address': location.address,\n        'Manager Name': location.managerName,\n        'Contact Details': location.contactDetails,\n        'Total Assets': locationAssets.length,\n        'Available Assets': locationAssets.filter(a => a.status === 'available').length,\n        'Assigned Assets': locationAssets.filter(a => a.status === 'assigned').length,\n        'Maintenance Assets': locationAssets.filter(a => a.status === 'maintenance').length,\n        'Total Employees': locationEmployees.length,\n        'Active Employees': locationEmployees.filter(e => e.status === 'active').length,\n        'Active Assignments': activeAssignments.length,\n        'Created': new Date(location.createdAt).toLocaleDateString(),\n        'Updated': new Date(location.updatedAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Locations', 'Locations')\n  }\n\n  // Export maintenance data with cost analysis\n  static exportMaintenance(maintenance: any[], assets: any[], locations: any[]) {\n    const formattedData = maintenance.map(record => {\n      const asset = assets.find(a => a.assetId === record.assetId)\n      const location = locations.find(l => l.id === asset?.locationId)\n      \n      return {\n        'Asset ID': record.assetId,\n        'Asset Details': asset ? `${asset.brand} ${asset.modelName}` : 'Unknown Asset',\n        'Location': location ? `${location.outletName}, ${location.city}` : 'No Location',\n        'Maintenance Type': record.maintenanceType.charAt(0).toUpperCase() + record.maintenanceType.slice(1),\n        'Description': record.description,\n        'Scheduled Date': new Date(record.scheduledDate).toLocaleDateString(),\n        'Completed Date': record.completedDate ? new Date(record.completedDate).toLocaleDateString() : 'Not Completed',\n        'Status': record.completedDate ? 'Completed' : 'Pending',\n        'Cost': record.cost ? `₹${record.cost.toFixed(2)}` : 'Not Specified',\n        'Technician': record.technicianName || 'Not Assigned',\n        'Parts Replaced': record.partsReplaced || 'None',\n        'Created': new Date(record.createdAt).toLocaleDateString(),\n        'Updated': new Date(record.updatedAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Maintenance', 'Maintenance')\n  }\n\n  // Export compliance data with audit trail\n  static exportCompliance(compliance: any[], assets: any[], locations: any[]) {\n    const formattedData = compliance.map(record => {\n      const asset = record.assetId ? assets.find(a => a.assetId === record.assetId) : null\n      const location = locations.find(l => l.id === record.locationId)\n      \n      return {\n        'Task Type': record.type.replace('_', ' ').charAt(0).toUpperCase() + record.type.replace('_', ' ').slice(1),\n        'Category': record.category.replace('_', ' ').charAt(0).toUpperCase() + record.category.replace('_', ' ').slice(1),\n        'Title': record.title,\n        'Description': record.description,\n        'Related Asset': asset ? `${asset.assetId} - ${asset.brand} ${asset.modelName}` : 'N/A',\n        'Location': location ? `${location.outletName}, ${location.city}` : 'All Locations',\n        'Due Date': new Date(record.dueDate).toLocaleDateString(),\n        'Completed Date': record.completedDate ? new Date(record.completedDate).toLocaleDateString() : 'Not Completed',\n        'Status': record.status.charAt(0).toUpperCase() + record.status.slice(1),\n        'Assigned To': record.assignedTo,\n        'Evidence': record.evidenceUrl ? 'Available' : 'Not Provided',\n        'Evidence URL': record.evidenceUrl || 'N/A',\n        'Compliance Notes': record.complianceNotes || 'None',\n        'Created': new Date(record.createdAt).toLocaleDateString(),\n        'Updated': new Date(record.updatedAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Compliance', 'Compliance')\n  }\n}\n\n// Excel import utility functions\nexport class ExcelImporter {\n  // Parse uploaded Excel file\n  static async parseExcelFile(file: File): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader()\n      \n      reader.onload = (e) => {\n        try {\n          const data = e.target?.result\n          const workbook = XLSX.read(data, { type: 'binary' })\n          const sheetName = workbook.SheetNames[0]\n          const worksheet = workbook.Sheets[sheetName]\n          const jsonData = XLSX.utils.sheet_to_json(worksheet)\n          \n          resolve(jsonData)\n        } catch (error) {\n          reject(error)\n        }\n      }\n      \n      reader.onerror = () => reject(new Error('Failed to read file'))\n      reader.readAsBinaryString(file)\n    })\n  }\n\n  // Validate and transform asset data\n  static validateAssetData(data: any[]): { valid: any[], errors: string[] } {\n    const valid: any[] = []\n    const errors: string[] = []\n\n    data.forEach((row, index) => {\n      const rowNumber = index + 2 // +2 because Excel rows start at 1 and we skip header\n\n      // Required fields validation\n      if (!row['Asset ID']) {\n        errors.push(`Row ${rowNumber}: Asset ID is required`)\n        return\n      }\n      if (!row['Brand']) {\n        errors.push(`Row ${rowNumber}: Brand is required`)\n        return\n      }\n      if (!row['Model']) {\n        errors.push(`Row ${rowNumber}: Model is required`)\n        return\n      }\n      if (!row['Type']) {\n        errors.push(`Row ${rowNumber}: Type is required`)\n        return\n      }\n\n      // Transform to API format\n      const transformedRow = {\n        assetId: row['Asset ID'],\n        brand: row['Brand'],\n        modelName: row['Model'],\n        assetType: row['Type'],\n        serialNumber: row['Serial Number'] || null,\n        purchaseDate: row['Purchase Date'] ? new Date(row['Purchase Date']).toISOString() : null,\n        purchaseCost: row['Purchase Cost'] ? parseFloat(row['Purchase Cost']) : null,\n        warrantyUntil: row['Warranty Until'] ? new Date(row['Warranty Until']).toISOString() : null,\n        status: row['Status'] || 'available',\n        condition: row['Condition'] || 'good',\n      }\n\n      valid.push(transformedRow)\n    })\n\n    return { valid, errors }\n  }\n\n  // Validate and transform employee data\n  static validateEmployeeData(data: any[]): { valid: any[], errors: string[] } {\n    const valid: any[] = []\n    const errors: string[] = []\n\n    data.forEach((row, index) => {\n      const rowNumber = index + 2\n\n      // Required fields validation\n      if (!row['Employee Code']) {\n        errors.push(`Row ${rowNumber}: Employee Code is required`)\n        return\n      }\n      if (!row['First Name']) {\n        errors.push(`Row ${rowNumber}: First Name is required`)\n        return\n      }\n      if (!row['Last Name']) {\n        errors.push(`Row ${rowNumber}: Last Name is required`)\n        return\n      }\n      if (!row['Department']) {\n        errors.push(`Row ${rowNumber}: Department is required`)\n        return\n      }\n\n      // Transform to API format\n      const transformedRow = {\n        employeeCode: row['Employee Code'],\n        firstName: row['First Name'],\n        lastName: row['Last Name'],\n        department: row['Department'],\n        position: row['Position'] || null,\n        email: row['Email'] || null,\n        phone: row['Phone'] || null,\n        joinDate: row['Join Date'] ? new Date(row['Join Date']).toISOString() : null,\n        status: row['Status'] || 'active',\n      }\n\n      valid.push(transformedRow)\n    })\n\n    return { valid, errors }\n  }\n\n  // Download template files\n  static downloadAssetTemplate() {\n    const templateData = [\n      {\n        'Asset ID': 'BFC001',\n        'Brand': 'Lenovo',\n        'Model': 'ThinkPad E15',\n        'Type': 'laptop',\n        'Serial Number': 'SN123456789',\n        'Purchase Date': '2024-01-15',\n        'Purchase Cost': '45000',\n        'Warranty Until': '2027-01-15',\n        'Status': 'available',\n        'Condition': 'excellent'\n      }\n    ]\n    this.exportToExcel(templateData, 'Asset_Import_Template', 'Assets')\n  }\n\n  static downloadEmployeeTemplate() {\n    const templateData = [\n      {\n        'Employee Code': 'BFC2024001',\n        'First Name': 'John',\n        'Last Name': 'Doe', \n        'Department': 'IT',\n        'Position': 'System Administrator',\n        'Email': 'john.doe@bodycraft.com',\n        'Phone': '+91 9876543210',\n        'Join Date': '2024-01-15',\n        'Status': 'active'\n      }\n    ]\n    this.exportToExcel(templateData, 'Employee_Import_Template', 'Employees')\n  }\n\n  private static exportToExcel(data: any[], filename: string, worksheetName: string) {\n    const worksheet = XLSX.utils.json_to_sheet(data)\n    const workbook = XLSX.utils.book_new()\n    XLSX.utils.book_append_sheet(workbook, worksheet, worksheetName)\n    \n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' })\n    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' })\n    \n    saveAs(blob, `${filename}.xlsx`)\n  }\n}","size_bytes":14589},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/pages/assets.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Laptop, \n  Monitor, \n  Smartphone, \n  Plus, \n  Search, \n  Filter, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Package,\n  MapPin,\n  User,\n  Calendar,\n  AlertCircle,\n  CheckCircle,\n  Clock,\n  XCircle,\n  Computer\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { ExcelExporter, ExcelImporter } from \"@/lib/excel\"\n\n// Asset type icons mapping\nconst assetTypeIcons: Record<string, any> = {\n  Laptop: Laptop,\n  Desktop: Computer,\n  Monitor: Monitor,\n  Mobile: Smartphone,\n  Tablet: Smartphone,\n  Router: Package,\n  Switch: Package,\n  Printer: Package,\n  UPS: Package,\n  default: Package\n}\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  available: \"bg-green-500\",\n  assigned: \"bg-blue-500\", \n  maintenance: \"bg-yellow-500\",\n  retired: \"bg-red-500\"\n}\n\n// Condition color mapping\nconst conditionColors: Record<string, string> = {\n  excellent: \"bg-green-500\",\n  good: \"bg-blue-500\",\n  fair: \"bg-yellow-500\", \n  poor: \"bg-red-500\"\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  serviceTag: string | null\n  assetType: string\n  purchaseDate: string | null\n  warrantyExpiry: string | null\n  status: \"available\" | \"assigned\" | \"maintenance\" | \"retired\"\n  condition: \"excellent\" | \"good\" | \"fair\" | \"poor\"\n  locationId: number | null\n  currentUserId: number | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\ninterface Employee {\n  id: number\n  employeeCode: string\n  firstName: string\n  lastName: string\n  department: string\n}\n\nexport default function AssetsPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedAsset, setSelectedAsset] = useState<Asset | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [isImportDialogOpen, setIsImportDialogOpen] = useState(false)\n  const [importFile, setImportFile] = useState<File | null>(null)\n  const [importErrors, setImportErrors] = useState<string[]>([])\n  const [isImporting, setIsImporting] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Fetch data\n  const { data: assets, isLoading: assetsLoading } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  const { data: employees } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  })\n\n  // Get unique asset types for filter\n  const assetTypes = [...new Set(assets?.map(asset => asset.assetType) || [])]\n\n  // Filter assets\n  const filteredAssets = assets?.filter(asset => {\n    const matchesSearch = \n      asset.assetId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.modelName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (asset.serviceTag?.toLowerCase().includes(searchTerm.toLowerCase()) || false)\n    \n    const matchesStatus = statusFilter === \"all\" || asset.status === statusFilter\n    const matchesType = typeFilter === \"all\" || asset.assetType === typeFilter\n    const matchesLocation = locationFilter === \"all\" || asset.locationId?.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesType && matchesLocation\n  }) || []\n\n  // Create asset mutation\n  const createAssetMutation = useMutation({\n    mutationFn: async (assetData: any) => {\n      const response = await fetch('/api/assets', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(assetData),\n      })\n      if (!response.ok) throw new Error('Failed to create asset')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset created successfully\" })\n      setIsCreateDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Update asset mutation  \n  const updateAssetMutation = useMutation({\n    mutationFn: async ({ assetId, data }: { assetId: string, data: any }) => {\n      const response = await fetch(`/api/assets/${assetId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      })\n      if (!response.ok) throw new Error('Failed to update asset')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset updated successfully\" })\n      setIsEditDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Delete asset mutation\n  const deleteAssetMutation = useMutation({\n    mutationFn: async (assetId: string) => {\n      const response = await fetch(`/api/assets/${assetId}`, {\n        method: 'DELETE',\n      })\n      if (!response.ok) throw new Error('Failed to delete asset')\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset deleted successfully\" })\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Helper functions\n  const getLocationName = (locationId: number | null) => {\n    if (!locationId) return \"No location\"\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown location\"\n  }\n\n  const getEmployeeName = (employeeId: number | null) => {\n    if (!employeeId) return \"Unassigned\"\n    const employee = employees?.find(emp => emp.id === employeeId)\n    return employee ? `${employee.firstName} ${employee.lastName}` : \"Unknown employee\"\n  }\n\n  const getAssetIcon = (assetType: string) => {\n    const IconComponent = assetTypeIcons[assetType] || assetTypeIcons.default\n    return <IconComponent className=\"h-4 w-4\" />\n  }\n\n  const handleCreateAsset = (event: React.FormEvent) => {\n    event.preventDefault()\n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const assetData = {\n      assetId: formData.get('assetId'),\n      modelName: formData.get('modelName'),\n      brand: formData.get('brand'),\n      serviceTag: formData.get('serviceTag') || null,\n      assetType: formData.get('assetType'),\n      purchaseDate: formData.get('purchaseDate') || null,\n      warrantyExpiry: formData.get('warrantyExpiry') || null,\n      status: formData.get('status'),\n      condition: formData.get('condition'),\n      locationId: formData.get('locationId') ? parseInt(formData.get('locationId') as string) : null,\n    }\n\n    createAssetMutation.mutate(assetData)\n  }\n\n  const handleUpdateAsset = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedAsset) return\n    \n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const assetData = {\n      modelName: formData.get('modelName'),\n      brand: formData.get('brand'),\n      serviceTag: formData.get('serviceTag') || null,\n      assetType: formData.get('assetType'),\n      purchaseDate: formData.get('purchaseDate') || null,\n      warrantyExpiry: formData.get('warrantyExpiry') || null,\n      status: formData.get('status'),\n      condition: formData.get('condition'),\n      locationId: formData.get('locationId') ? parseInt(formData.get('locationId') as string) : null,\n    }\n\n    updateAssetMutation.mutate({ assetId: selectedAsset.assetId, data: assetData })\n  }\n\n  // Excel Export Handler\n  const handleExportAssets = () => {\n    if (!filteredAssets || !locations) {\n      toast({ title: \"Error\", description: \"No data available to export\", variant: \"destructive\" })\n      return\n    }\n    \n    ExcelExporter.exportAssets(filteredAssets, locations)\n    toast({ title: \"Success\", description: `Exported ${filteredAssets.length} assets to Excel` })\n  }\n\n  // Excel Import Handler\n  const handleImportAssets = async () => {\n    if (!importFile) {\n      toast({ title: \"Error\", description: \"Please select a file to import\", variant: \"destructive\" })\n      return\n    }\n\n    setIsImporting(true)\n    setImportErrors([])\n\n    try {\n      // Parse Excel file\n      const data = await ExcelImporter.parseExcelFile(importFile)\n      \n      if (data.length === 0) {\n        toast({ title: \"Error\", description: \"The Excel file is empty\", variant: \"destructive\" })\n        setIsImporting(false)\n        return\n      }\n\n      // Validate data\n      const { valid, errors } = ExcelImporter.validateAssetData(data)\n      \n      if (errors.length > 0) {\n        setImportErrors(errors)\n        setIsImporting(false)\n        return\n      }\n\n      // Import valid assets\n      let successCount = 0\n      let errorCount = 0\n      \n      for (const assetData of valid) {\n        try {\n          const response = await fetch('/api/assets', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(assetData),\n          })\n          \n          if (response.ok) {\n            successCount++\n          } else {\n            errorCount++\n            const errorData = await response.json()\n            setImportErrors(prev => [...prev, `Asset ${assetData.assetId}: ${errorData.message || 'Import failed'}`])\n          }\n        } catch (error) {\n          errorCount++\n          setImportErrors(prev => [...prev, `Asset ${assetData.assetId}: Network error`])\n        }\n      }\n\n      // Refresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n\n      if (successCount > 0) {\n        toast({ \n          title: \"Import Complete\", \n          description: `Successfully imported ${successCount} assets${errorCount > 0 ? `, ${errorCount} failed` : ''}` \n        })\n        \n        if (errorCount === 0) {\n          setIsImportDialogOpen(false)\n          setImportFile(null)\n        }\n      } else {\n        toast({ title: \"Import Failed\", description: \"No assets were imported\", variant: \"destructive\" })\n      }\n\n    } catch (error) {\n      toast({ title: \"Error\", description: \"Failed to parse Excel file\", variant: \"destructive\" })\n      setImportErrors(['Failed to parse Excel file. Please ensure it\\'s a valid Excel file.'])\n    } finally {\n      setIsImporting(false)\n    }\n  }\n\n  if (assetsLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Assets</h1>\n          <p className=\"text-muted-foreground\">\n            Manage all BODYCRAFT IT assets across {locations?.length || 0} locations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={isImportDialogOpen} onOpenChange={setIsImportDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" className=\"gap-2\">\n                <Upload className=\"h-4 w-4\" />\n                Import Excel\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Import Assets from Excel</DialogTitle>\n                <DialogDescription>\n                  Upload an Excel file to import multiple assets. Download the template first if you need the correct format.\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"flex gap-2\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => ExcelImporter.downloadAssetTemplate()}\n                    className=\"gap-2\"\n                  >\n                    <Download className=\"h-4 w-4\" />\n                    Download Template\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"excel-file\">Excel File *</Label>\n                  <Input\n                    id=\"excel-file\"\n                    type=\"file\"\n                    accept=\".xlsx,.xls\"\n                    onChange={(e) => {\n                      const file = e.target.files?.[0]\n                      if (file) {\n                        setImportFile(file)\n                        setImportErrors([])\n                      }\n                    }}\n                  />\n                </div>\n                \n                {importErrors.length > 0 && (\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-red-600\">Import Errors:</Label>\n                    <div className=\"bg-red-50 p-3 rounded max-h-32 overflow-y-auto\">\n                      {importErrors.map((error, index) => (\n                        <div key={index} className=\"text-sm text-red-600\">• {error}</div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n              <DialogFooter>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsImportDialogOpen(false)\n                    setImportFile(null)\n                    setImportErrors([])\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleImportAssets}\n                  disabled={!importFile || isImporting}\n                >\n                  {isImporting ? \"Importing...\" : \"Import Assets\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n          <Button \n            variant=\"outline\" \n            className=\"gap-2\"\n            onClick={handleExportAssets}\n          >\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Asset\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Asset</DialogTitle>\n                <DialogDescription>\n                  Add a new IT asset to the BODYCRAFT inventory\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateAsset} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assetId\">Asset ID *</Label>\n                    <Input\n                      id=\"assetId\"\n                      name=\"assetId\"\n                      placeholder=\"BFC001\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assetType\">Asset Type *</Label>\n                    <Select name=\"assetType\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Laptop\">Laptop</SelectItem>\n                        <SelectItem value=\"Desktop\">Desktop</SelectItem>\n                        <SelectItem value=\"Monitor\">Monitor</SelectItem>\n                        <SelectItem value=\"Mobile\">Mobile</SelectItem>\n                        <SelectItem value=\"Tablet\">Tablet</SelectItem>\n                        <SelectItem value=\"Router\">Router</SelectItem>\n                        <SelectItem value=\"Switch\">Switch</SelectItem>\n                        <SelectItem value=\"Printer\">Printer</SelectItem>\n                        <SelectItem value=\"UPS\">UPS</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"brand\">Brand *</Label>\n                    <Input\n                      id=\"brand\"\n                      name=\"brand\"\n                      placeholder=\"Dell, HP, Lenovo...\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"modelName\">Model Name *</Label>\n                    <Input\n                      id=\"modelName\"\n                      name=\"modelName\"\n                      placeholder=\"ThinkPad E15, OptiPlex 3080...\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serviceTag\">Service Tag</Label>\n                    <Input\n                      id=\"serviceTag\"\n                      name=\"serviceTag\"\n                      placeholder=\"Manufacturer service tag\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"locationId\">Location</Label>\n                    <Select name=\"locationId\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select location\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {locations?.map(location => (\n                          <SelectItem key={location.id} value={location.id.toString()}>\n                            {location.outletName}, {location.city}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"purchaseDate\">Purchase Date</Label>\n                    <Input\n                      id=\"purchaseDate\"\n                      name=\"purchaseDate\"\n                      type=\"date\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"warrantyExpiry\">Warranty Expiry</Label>\n                    <Input\n                      id=\"warrantyExpiry\"\n                      name=\"warrantyExpiry\"\n                      type=\"date\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"status\">Status</Label>\n                    <Select name=\"status\" defaultValue=\"available\">\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"available\">Available</SelectItem>\n                        <SelectItem value=\"assigned\">Assigned</SelectItem>\n                        <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                        <SelectItem value=\"retired\">Retired</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"condition\">Condition</Label>\n                    <Select name=\"condition\" defaultValue=\"good\">\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"excellent\">Excellent</SelectItem>\n                        <SelectItem value=\"good\">Good</SelectItem>\n                        <SelectItem value=\"fair\">Fair</SelectItem>\n                        <SelectItem value=\"poor\">Poor</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createAssetMutation.isPending}>\n                    {createAssetMutation.isPending ? \"Creating...\" : \"Create Asset\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Assets</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{assets?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across {locations?.length || 0} locations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Available</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {assets?.filter(a => a.status === 'available').length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Ready for assignment\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Assigned</CardTitle>\n            <User className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {assets?.filter(a => a.status === 'assigned').length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently in use\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Maintenance</CardTitle>\n            <Clock className=\"h-4 w-4 text-yellow-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {assets?.filter(a => a.status === 'maintenance').length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Under service\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Assets</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by Asset ID, Model, Brand, or Service Tag...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"available\">Available</SelectItem>\n                  <SelectItem value=\"assigned\">Assigned</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"retired\">Retired</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  {assetTypes.map(type => (\n                    <SelectItem key={type} value={type}>{type}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredAssets.length} of {assets?.length || 0} assets\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Assets Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Asset</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Condition</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Assigned To</TableHead>\n                <TableHead>Service Tag</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredAssets.map((asset) => (\n                <TableRow key={asset.assetId}>\n                  <TableCell>\n                    <div className=\"flex items-center gap-3\">\n                      {getAssetIcon(asset.assetType)}\n                      <div>\n                        <div className=\"font-medium\">{asset.assetId}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {asset.brand} {asset.modelName}\n                        </div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\">{asset.assetType}</Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <div \n                        className={`w-2 h-2 rounded-full ${statusColors[asset.status]}`}\n                      />\n                      <span className=\"capitalize\">{asset.status}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <div \n                        className={`w-2 h-2 rounded-full ${conditionColors[asset.condition]}`}\n                      />\n                      <span className=\"capitalize\">{asset.condition}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-1\">\n                      <MapPin className=\"h-3 w-3 text-muted-foreground\" />\n                      {getLocationName(asset.locationId)}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-1\">\n                      <User className=\"h-3 w-3 text-muted-foreground\" />\n                      {getEmployeeName(asset.currentUserId)}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm font-mono\">\n                      {asset.serviceTag || \"—\"}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                        <DropdownMenuItem\n                          onClick={() => {\n                            setSelectedAsset(asset)\n                            setIsViewDialogOpen(true)\n                          }}\n                        >\n                          <Eye className=\"mr-2 h-4 w-4\" />\n                          View Details\n                        </DropdownMenuItem>\n                        <DropdownMenuItem\n                          onClick={() => {\n                            setSelectedAsset(asset)\n                            setIsEditDialogOpen(true)\n                          }}\n                        >\n                          <Edit className=\"mr-2 h-4 w-4\" />\n                          Edit Asset\n                        </DropdownMenuItem>\n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem\n                          onClick={() => deleteAssetMutation.mutate(asset.assetId)}\n                          className=\"text-red-600\"\n                        >\n                          <Trash2 className=\"mr-2 h-4 w-4\" />\n                          Delete Asset\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Asset Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Asset Details</DialogTitle>\n            <DialogDescription>\n              Complete information for {selectedAsset?.assetId}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedAsset && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Asset ID</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAsset.assetId}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Type</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded flex items-center gap-2\">\n                    {getAssetIcon(selectedAsset.assetType)}\n                    {selectedAsset.assetType}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Brand</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAsset.brand}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Model</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAsset.modelName}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded flex items-center gap-2\">\n                    <div className={`w-2 h-2 rounded-full ${statusColors[selectedAsset.status]}`} />\n                    <span className=\"capitalize\">{selectedAsset.status}</span>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Condition</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded flex items-center gap-2\">\n                    <div className={`w-2 h-2 rounded-full ${conditionColors[selectedAsset.condition]}`} />\n                    <span className=\"capitalize\">{selectedAsset.condition}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Location</Label>\n                <div className=\"text-sm p-2 bg-muted rounded\">\n                  {getLocationName(selectedAsset.locationId)}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Assigned To</Label>\n                <div className=\"text-sm p-2 bg-muted rounded\">\n                  {getEmployeeName(selectedAsset.currentUserId)}\n                </div>\n              </div>\n\n              {selectedAsset.serviceTag && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Service Tag</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded font-mono\">\n                    {selectedAsset.serviceTag}\n                  </div>\n                </div>\n              )}\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Purchase Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAsset.purchaseDate || \"Not specified\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Warranty Expiry</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAsset.warrantyExpiry || \"Not specified\"}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Asset Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Asset</DialogTitle>\n            <DialogDescription>\n              Update information for {selectedAsset?.assetId}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedAsset && (\n            <form onSubmit={handleUpdateAsset} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-assetType\">Asset Type *</Label>\n                  <Select name=\"assetType\" defaultValue={selectedAsset.assetType} required>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Laptop\">Laptop</SelectItem>\n                      <SelectItem value=\"Desktop\">Desktop</SelectItem>\n                      <SelectItem value=\"Monitor\">Monitor</SelectItem>\n                      <SelectItem value=\"Mobile\">Mobile</SelectItem>\n                      <SelectItem value=\"Tablet\">Tablet</SelectItem>\n                      <SelectItem value=\"Router\">Router</SelectItem>\n                      <SelectItem value=\"Switch\">Switch</SelectItem>\n                      <SelectItem value=\"Printer\">Printer</SelectItem>\n                      <SelectItem value=\"UPS\">UPS</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-brand\">Brand *</Label>\n                  <Input\n                    id=\"edit-brand\"\n                    name=\"brand\"\n                    defaultValue={selectedAsset.brand}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-modelName\">Model Name *</Label>\n                  <Input\n                    id=\"edit-modelName\"\n                    name=\"modelName\"\n                    defaultValue={selectedAsset.modelName}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-serviceTag\">Service Tag</Label>\n                  <Input\n                    id=\"edit-serviceTag\"\n                    name=\"serviceTag\"\n                    defaultValue={selectedAsset.serviceTag || \"\"}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-locationId\">Location</Label>\n                  <Select name=\"locationId\" defaultValue={selectedAsset.locationId?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select location\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {locations?.map(location => (\n                        <SelectItem key={location.id} value={location.id.toString()}>\n                          {location.outletName}, {location.city}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-purchaseDate\">Purchase Date</Label>\n                  <Input\n                    id=\"edit-purchaseDate\"\n                    name=\"purchaseDate\"\n                    type=\"date\"\n                    defaultValue={selectedAsset.purchaseDate || \"\"}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-warrantyExpiry\">Warranty Expiry</Label>\n                  <Input\n                    id=\"edit-warrantyExpiry\"\n                    name=\"warrantyExpiry\"\n                    type=\"date\"\n                    defaultValue={selectedAsset.warrantyExpiry || \"\"}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-status\">Status</Label>\n                  <Select name=\"status\" defaultValue={selectedAsset.status}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"available\">Available</SelectItem>\n                      <SelectItem value=\"assigned\">Assigned</SelectItem>\n                      <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                      <SelectItem value=\"retired\">Retired</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-condition\">Condition</Label>\n                <Select name=\"condition\" defaultValue={selectedAsset.condition}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"excellent\">Excellent</SelectItem>\n                    <SelectItem value=\"good\">Good</SelectItem>\n                    <SelectItem value=\"fair\">Fair</SelectItem>\n                    <SelectItem value=\"poor\">Poor</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <DialogFooter>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsEditDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateAssetMutation.isPending}>\n                  {updateAssetMutation.isPending ? \"Updating...\" : \"Update Asset\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":43472},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/pages/assignments.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Calendar,\n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  User,\n  Laptop,\n  ArrowRightLeft,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Undo,\n  Package,\n  MapPin,\n  AlertTriangle\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface Assignment {\n  assetId: string\n  employeeId: number\n  assignedDate: string\n  returnedDate: string | null\n  assignmentReason: string\n  returnReason: string | null\n  conditionOnAssignment: \"excellent\" | \"good\" | \"fair\" | \"poor\"\n  conditionOnReturn: \"excellent\" | \"good\" | \"fair\" | \"poor\" | null\n  backupDetails: string | null\n  createdBy: number\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  assetType: string\n  status: \"available\" | \"assigned\" | \"maintenance\" | \"retired\"\n  condition: \"excellent\" | \"good\" | \"fair\" | \"poor\"\n  locationId: number | null\n  currentUserId: number | null\n}\n\ninterface Employee {\n  id: number\n  employeeCode: string\n  firstName: string\n  lastName: string\n  department: string\n  designation: string\n  status: \"active\" | \"inactive\" | \"on_leave\"\n  locationId: number | null\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\nexport default function AssignmentsPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isAssignDialogOpen, setIsAssignDialogOpen] = useState(false)\n  const [isReturnDialogOpen, setIsReturnDialogOpen] = useState(false)\n  const [isTransferDialogOpen, setIsTransferDialogOpen] = useState(false)\n  const [selectedAssignment, setSelectedAssignment] = useState<Assignment | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Fetch data\n  const { data: assignments, isLoading: assignmentsLoading } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n  })\n\n  const { data: assets } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: employees } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  })\n\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Filter assignments\n  const filteredAssignments = assignments?.filter(assignment => {\n    const asset = assets?.find(a => a.assetId === assignment.assetId)\n    const employee = employees?.find(e => e.id === assignment.employeeId)\n    \n    const matchesSearch = \n      assignment.assetId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee?.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee?.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee?.employeeCode.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset?.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset?.modelName.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const isActive = !assignment.returnedDate\n    const isReturned = assignment.returnedDate !== null\n    \n    const matchesStatus = \n      statusFilter === \"all\" || \n      (statusFilter === \"active\" && isActive) ||\n      (statusFilter === \"returned\" && isReturned)\n      \n    const matchesLocation = locationFilter === \"all\" || employee?.locationId?.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesLocation\n  }) || []\n\n  // Available assets for assignment (not currently assigned)\n  const availableAssets = assets?.filter(asset => \n    asset.status === \"available\" && \n    !assignments?.some(assignment => \n      assignment.assetId === asset.assetId && !assignment.returnedDate\n    )\n  ) || []\n\n  // Active employees for assignment\n  const activeEmployees = employees?.filter(emp => emp.status === \"active\") || []\n\n  // Assign asset mutation\n  const assignAssetMutation = useMutation({\n    mutationFn: async (assignmentData: any) => {\n      const response = await fetch('/api/assignments', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(assignmentData),\n      })\n      if (!response.ok) throw new Error('Failed to assign asset')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assignments'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset assigned successfully\" })\n      setIsAssignDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to assign asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Return asset mutation\n  const returnAssetMutation = useMutation({\n    mutationFn: async (returnData: any) => {\n      const response = await fetch(`/api/assignments/${returnData.assetId}/${returnData.employeeId}/return`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(returnData),\n      })\n      if (!response.ok) throw new Error('Failed to return asset')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assignments'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset returned successfully\" })\n      setIsReturnDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to return asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Transfer asset mutation (return + new assignment in one operation)\n  const transferAssetMutation = useMutation({\n    mutationFn: async (transferData: any) => {\n      const response = await fetch(`/api/assignments/${transferData.assetId}/transfer`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(transferData),\n      })\n      if (!response.ok) throw new Error('Failed to transfer asset')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assignments'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset transferred successfully\" })\n      setIsTransferDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to transfer asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Helper functions\n  const getAssetInfo = (assetId: string) => {\n    return assets?.find(asset => asset.assetId === assetId)\n  }\n\n  const getEmployeeInfo = (employeeId: number) => {\n    return employees?.find(employee => employee.id === employeeId)\n  }\n\n  const getLocationName = (locationId: number | null) => {\n    if (!locationId) return \"No location\"\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown\"\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const handleAssignAsset = (event: React.FormEvent) => {\n    event.preventDefault()\n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const assignmentData = {\n      assetId: formData.get('assetId'),\n      employeeId: parseInt(formData.get('employeeId') as string),\n      assignmentReason: formData.get('assignmentReason'),\n      conditionOnAssignment: formData.get('conditionOnAssignment'),\n      backupDetails: formData.get('backupDetails') || null,\n      createdBy: 1, // TODO: Get from authentication context\n    }\n\n    assignAssetMutation.mutate(assignmentData)\n  }\n\n  const handleReturnAsset = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedAssignment) return\n    \n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const returnData = {\n      assetId: selectedAssignment.assetId,\n      employeeId: selectedAssignment.employeeId,\n      returnReason: formData.get('returnReason'),\n      conditionOnReturn: formData.get('conditionOnReturn'),\n    }\n\n    returnAssetMutation.mutate(returnData)\n  }\n\n  const handleTransferAsset = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedAssignment) return\n    \n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const transferData = {\n      assetId: selectedAssignment.assetId,\n      fromEmployeeId: selectedAssignment.employeeId,\n      toEmployeeId: parseInt(formData.get('toEmployeeId') as string),\n      returnReason: formData.get('returnReason'),\n      conditionOnReturn: formData.get('conditionOnReturn'),\n      newAssignmentReason: formData.get('newAssignmentReason'),\n      conditionOnNewAssignment: formData.get('conditionOnNewAssignment'),\n    }\n\n    transferAssetMutation.mutate(transferData)\n  }\n\n  if (assignmentsLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Assignments</h1>\n          <p className=\"text-muted-foreground\">\n            Manage asset assignments with complete history preservation\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Excel\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n          <Dialog open={isAssignDialogOpen} onOpenChange={setIsAssignDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Assign Asset\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Assign Asset to Employee</DialogTitle>\n                <DialogDescription>\n                  Create a new asset assignment with complete tracking\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleAssignAsset} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assetId\">Asset *</Label>\n                    <Select name=\"assetId\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select asset\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {availableAssets.map(asset => (\n                          <SelectItem key={asset.assetId} value={asset.assetId}>\n                            {asset.assetId} - {asset.brand} {asset.modelName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"employeeId\">Employee *</Label>\n                    <Select name=\"employeeId\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select employee\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {activeEmployees.map(employee => (\n                          <SelectItem key={employee.id} value={employee.id.toString()}>\n                            {employee.firstName} {employee.lastName} ({employee.employeeCode})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"assignmentReason\">Assignment Reason *</Label>\n                  <Select name=\"assignmentReason\" required>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select reason\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"New Employee\">New Employee</SelectItem>\n                      <SelectItem value=\"Replacement\">Replacement</SelectItem>\n                      <SelectItem value=\"Upgrade\">Upgrade</SelectItem>\n                      <SelectItem value=\"Temporary\">Temporary</SelectItem>\n                      <SelectItem value=\"Project Requirement\">Project Requirement</SelectItem>\n                      <SelectItem value=\"Department Transfer\">Department Transfer</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"conditionOnAssignment\">Condition on Assignment *</Label>\n                  <Select name=\"conditionOnAssignment\" required>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select condition\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"excellent\">Excellent</SelectItem>\n                      <SelectItem value=\"good\">Good</SelectItem>\n                      <SelectItem value=\"fair\">Fair</SelectItem>\n                      <SelectItem value=\"poor\">Poor</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"backupDetails\">Backup Details</Label>\n                  <Textarea\n                    id=\"backupDetails\"\n                    name=\"backupDetails\"\n                    placeholder=\"Previous user data backup information (if applicable)\"\n                    rows={3}\n                  />\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsAssignDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={assignAssetMutation.isPending}>\n                    {assignAssetMutation.isPending ? \"Assigning...\" : \"Assign Asset\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Assignments</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{assignments?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Complete history preserved\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Assignments</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {assignments?.filter(a => !a.returnedDate).length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently assigned\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Returned Assets</CardTitle>\n            <Undo className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {assignments?.filter(a => a.returnedDate).length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Successfully returned\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Available for Assignment</CardTitle>\n            <Package className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{availableAssets.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Ready to assign\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Assignments</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by Asset ID, Employee Name, Employee Code...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Assignments</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"returned\">Returned</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredAssignments.length} of {assignments?.length || 0} assignments\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Assignments Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Asset</TableHead>\n                <TableHead>Employee</TableHead>\n                <TableHead>Assigned Date</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Condition</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Reason</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredAssignments.map((assignment, index) => {\n                const asset = getAssetInfo(assignment.assetId)\n                const employee = getEmployeeInfo(assignment.employeeId)\n                const isActive = !assignment.returnedDate\n                \n                return (\n                  <TableRow key={`${assignment.assetId}-${assignment.employeeId}-${index}`}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <Laptop className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">{assignment.assetId}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {asset?.brand} {asset?.modelName}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <User className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">\n                            {employee?.firstName} {employee?.lastName}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground font-mono\">\n                            {employee?.employeeCode}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                        {formatDate(assignment.assignedDate)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        {isActive ? (\n                          <>\n                            <div className=\"w-2 h-2 rounded-full bg-green-500\" />\n                            <span>Active</span>\n                          </>\n                        ) : (\n                          <>\n                            <div className=\"w-2 h-2 rounded-full bg-blue-500\" />\n                            <span>Returned</span>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {formatDate(assignment.returnedDate!)}\n                            </div>\n                          </>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div className={`w-2 h-2 rounded-full ${\n                          assignment.conditionOnAssignment === 'excellent' ? 'bg-green-500' :\n                          assignment.conditionOnAssignment === 'good' ? 'bg-blue-500' :\n                          assignment.conditionOnAssignment === 'fair' ? 'bg-yellow-500' : 'bg-red-500'\n                        }`} />\n                        <span className=\"capitalize\">{assignment.conditionOnAssignment}</span>\n                        {assignment.conditionOnReturn && (\n                          <>\n                            <span className=\"text-muted-foreground\">→</span>\n                            <div className={`w-2 h-2 rounded-full ${\n                              assignment.conditionOnReturn === 'excellent' ? 'bg-green-500' :\n                              assignment.conditionOnReturn === 'good' ? 'bg-blue-500' :\n                              assignment.conditionOnReturn === 'fair' ? 'bg-yellow-500' : 'bg-red-500'\n                            }`} />\n                            <span className=\"capitalize text-sm\">{assignment.conditionOnReturn}</span>\n                          </>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"h-3 w-3 text-muted-foreground\" />\n                        {getLocationName(employee?.locationId)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {assignment.assignmentReason}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedAssignment(assignment)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          {isActive && (\n                            <>\n                              <DropdownMenuItem\n                                onClick={() => {\n                                  setSelectedAssignment(assignment)\n                                  setIsReturnDialogOpen(true)\n                                }}\n                              >\n                                <Undo className=\"mr-2 h-4 w-4\" />\n                                Return Asset\n                              </DropdownMenuItem>\n                              <DropdownMenuItem\n                                onClick={() => {\n                                  setSelectedAssignment(assignment)\n                                  setIsTransferDialogOpen(true)\n                                }}\n                              >\n                                <ArrowRightLeft className=\"mr-2 h-4 w-4\" />\n                                Transfer Asset\n                              </DropdownMenuItem>\n                            </>\n                          )}\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Assignment Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Assignment Details</DialogTitle>\n            <DialogDescription>\n              Complete assignment information with history\n            </DialogDescription>\n          </DialogHeader>\n          {selectedAssignment && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Asset</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAssignment.assetId}\n                    <div className=\"text-xs text-muted-foreground\">\n                      {getAssetInfo(selectedAssignment.assetId)?.brand} {getAssetInfo(selectedAssignment.assetId)?.modelName}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Employee</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getEmployeeInfo(selectedAssignment.employeeId)?.firstName} {getEmployeeInfo(selectedAssignment.employeeId)?.lastName}\n                    <div className=\"text-xs text-muted-foreground font-mono\">\n                      {getEmployeeInfo(selectedAssignment.employeeId)?.employeeCode}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Assigned Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDate(selectedAssignment.assignedDate)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Return Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAssignment.returnedDate ? formatDate(selectedAssignment.returnedDate) : \"Not returned\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Assignment Reason</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAssignment.assignmentReason}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Return Reason</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAssignment.returnReason || \"Not applicable\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Condition on Assignment</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded capitalize\">\n                    {selectedAssignment.conditionOnAssignment}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Condition on Return</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded capitalize\">\n                    {selectedAssignment.conditionOnReturn || \"Not applicable\"}\n                  </div>\n                </div>\n              </div>\n\n              {selectedAssignment.backupDetails && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Backup Details</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAssignment.backupDetails}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Return Asset Dialog */}\n      <Dialog open={isReturnDialogOpen} onOpenChange={setIsReturnDialogOpen}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Return Asset</DialogTitle>\n            <DialogDescription>\n              Record the return of {selectedAssignment?.assetId} from {getEmployeeInfo(selectedAssignment?.employeeId || 0)?.firstName} {getEmployeeInfo(selectedAssignment?.employeeId || 0)?.lastName}\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleReturnAsset} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"returnReason\">Return Reason *</Label>\n              <Select name=\"returnReason\" required>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select return reason\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Employee Left\">Employee Left</SelectItem>\n                  <SelectItem value=\"Upgrade\">Upgrade</SelectItem>\n                  <SelectItem value=\"Replacement\">Replacement</SelectItem>\n                  <SelectItem value=\"Maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"Department Transfer\">Department Transfer</SelectItem>\n                  <SelectItem value=\"Project Ended\">Project Ended</SelectItem>\n                  <SelectItem value=\"Retirement\">Retirement</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"conditionOnReturn\">Condition on Return *</Label>\n              <Select name=\"conditionOnReturn\" required>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select condition\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"excellent\">Excellent</SelectItem>\n                  <SelectItem value=\"good\">Good</SelectItem>\n                  <SelectItem value=\"fair\">Fair</SelectItem>\n                  <SelectItem value=\"poor\">Poor</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <DialogFooter>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setIsReturnDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={returnAssetMutation.isPending}>\n                {returnAssetMutation.isPending ? \"Processing...\" : \"Return Asset\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Transfer Asset Dialog */}\n      <Dialog open={isTransferDialogOpen} onOpenChange={setIsTransferDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Transfer Asset</DialogTitle>\n            <DialogDescription>\n              Transfer {selectedAssignment?.assetId} from {getEmployeeInfo(selectedAssignment?.employeeId || 0)?.firstName} {getEmployeeInfo(selectedAssignment?.employeeId || 0)?.lastName} to another employee\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleTransferAsset} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"toEmployeeId\">Transfer to Employee *</Label>\n              <Select name=\"toEmployeeId\" required>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select new assignee\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {activeEmployees.filter(emp => emp.id !== selectedAssignment?.employeeId).map(employee => (\n                    <SelectItem key={employee.id} value={employee.id.toString()}>\n                      {employee.firstName} {employee.lastName} ({employee.employeeCode})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"returnReason\">Return Reason *</Label>\n                <Select name=\"returnReason\" required>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select reason\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Transfer\">Transfer</SelectItem>\n                    <SelectItem value=\"Replacement\">Replacement</SelectItem>\n                    <SelectItem value=\"Department Change\">Department Change</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"conditionOnReturn\">Condition on Return *</Label>\n                <Select name=\"conditionOnReturn\" required>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Condition\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"excellent\">Excellent</SelectItem>\n                    <SelectItem value=\"good\">Good</SelectItem>\n                    <SelectItem value=\"fair\">Fair</SelectItem>\n                    <SelectItem value=\"poor\">Poor</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"newAssignmentReason\">New Assignment Reason *</Label>\n                <Select name=\"newAssignmentReason\" required>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select reason\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Transfer\">Transfer</SelectItem>\n                    <SelectItem value=\"Replacement\">Replacement</SelectItem>\n                    <SelectItem value=\"New Employee\">New Employee</SelectItem>\n                    <SelectItem value=\"Department Change\">Department Change</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"conditionOnNewAssignment\">Condition for New Assignment *</Label>\n                <Select name=\"conditionOnNewAssignment\" required>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Condition\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"excellent\">Excellent</SelectItem>\n                    <SelectItem value=\"good\">Good</SelectItem>\n                    <SelectItem value=\"fair\">Fair</SelectItem>\n                    <SelectItem value=\"poor\">Poor</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <DialogFooter>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setIsTransferDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={transferAssetMutation.isPending}>\n                {transferAssetMutation.isPending ? \"Processing...\" : \"Transfer Asset\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":39825},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/pages/biometric.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Fingerprint, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Monitor,\n  Scan,\n  Shield,\n  MapPin,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Settings,\n  Power,\n  User,\n  Users,\n  Key\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface BiometricSystem {\n  id: number\n  systemName: string\n  systemType: \"fingerprint_scanner\" | \"face_recognition\" | \"iris_scanner\" | \"palm_scanner\" | \"access_controller\"\n  brand: string\n  model: string\n  serialNumber: string | null\n  ipAddress: string | null\n  macAddress: string | null\n  locationId: number\n  installationDate: string\n  warrantyUntil: string | null\n  status: \"active\" | \"inactive\" | \"maintenance\" | \"fault\"\n  enrolledUsers: number | null\n  maxUsers: number | null\n  accessLevel: \"entry_only\" | \"full_access\" | \"restricted\"\n  integrationSystem: string | null\n  firmwareVersion: string | null\n  lastSyncDate: string | null\n  maintenanceContract: string | null\n  notes: string | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  active: \"bg-green-500\",\n  inactive: \"bg-gray-500\",\n  maintenance: \"bg-yellow-500\",\n  fault: \"bg-red-500\"\n}\n\n// System type icons\nconst systemTypeIcons: Record<string, any> = {\n  fingerprint_scanner: Fingerprint,\n  face_recognition: Scan,\n  iris_scanner: Eye,\n  palm_scanner: User,\n  access_controller: Key\n}\n\nexport default function BiometricPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedSystem, setSelectedSystem] = useState<BiometricSystem | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Mock biometric data - In real app, this would come from API\n  const mockBiometricData: BiometricSystem[] = [\n    {\n      id: 1,\n      systemName: \"Main Entrance Fingerprint Scanner\",\n      systemType: \"fingerprint_scanner\",\n      brand: \"ZKTeco\",\n      model: \"F18\",\n      serialNumber: \"ZK123456789\",\n      ipAddress: \"192.168.1.110\",\n      macAddress: \"00:11:22:33:44:99\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2027-01-15\",\n      status: \"active\",\n      enrolledUsers: 85,\n      maxUsers: 3000,\n      accessLevel: \"full_access\",\n      integrationSystem: \"HRMS Integration\",\n      firmwareVersion: \"6.60.5.9\",\n      lastSyncDate: \"2024-01-20T08:00:00Z\",\n      maintenanceContract: \"BiometricTech Solutions\",\n      notes: \"Primary attendance and access control for all employees\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-20T08:30:00Z\"\n    },\n    {\n      id: 2,\n      systemName: \"Manager Cabin Face Recognition\",\n      systemType: \"face_recognition\",\n      brand: \"Hikvision\",\n      model: \"DS-K1T341AMF\",\n      serialNumber: \"HV987654321\",\n      ipAddress: \"192.168.1.111\",\n      macAddress: \"00:11:22:33:44:AA\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2026-01-15\",\n      status: \"active\",\n      enrolledUsers: 12,\n      maxUsers: 500,\n      accessLevel: \"restricted\",\n      integrationSystem: \"Access Control System\",\n      firmwareVersion: \"2.2.25\",\n      lastSyncDate: \"2024-01-20T06:00:00Z\",\n      maintenanceContract: \"SecureTech Solutions\",\n      notes: \"Restricted access for management and senior staff only\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-20T06:15:00Z\"\n    },\n    {\n      id: 3,\n      systemName: \"Store Exit Fingerprint Reader\",\n      systemType: \"fingerprint_scanner\",\n      brand: \"eSSL\",\n      model: \"X990\",\n      serialNumber: \"ES555666777\",\n      ipAddress: \"192.168.1.112\",\n      macAddress: \"00:11:22:33:44:BB\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2025-01-15\",\n      status: \"maintenance\",\n      enrolledUsers: 85,\n      maxUsers: 2000,\n      accessLevel: \"entry_only\",\n      integrationSystem: \"Attendance System\",\n      firmwareVersion: \"3.4.1\",\n      lastSyncDate: \"2024-01-18T17:00:00Z\",\n      maintenanceContract: \"Local Tech Services\",\n      notes: \"Exit scanner for attendance tracking. Under maintenance for sensor cleaning\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-18T17:30:00Z\"\n    },\n    {\n      id: 4,\n      systemName: \"Koramangala Access Controller\",\n      systemType: \"access_controller\",\n      brand: \"ZKTeco\",\n      model: \"inBio160\",\n      serialNumber: \"ZK888999000\",\n      ipAddress: \"192.168.2.110\",\n      macAddress: \"00:11:22:33:44:CC\",\n      locationId: 2,\n      installationDate: \"2023-12-01\",\n      warrantyUntil: \"2025-12-01\",\n      status: \"active\",\n      enrolledUsers: 45,\n      maxUsers: 30000,\n      accessLevel: \"full_access\",\n      integrationSystem: \"Door Control + CCTV\",\n      firmwareVersion: \"4.4.8\",\n      lastSyncDate: \"2024-01-19T09:00:00Z\",\n      maintenanceContract: \"ZKTeco Service\",\n      notes: \"Central access control system managing multiple doors and entry points\",\n      createdAt: \"2023-12-01T00:00:00Z\",\n      updatedAt: \"2024-01-19T09:30:00Z\"\n    },\n    {\n      id: 5,\n      systemName: \"Staff Room Palm Scanner\",\n      systemType: \"palm_scanner\",\n      brand: \"Fujitsu\",\n      model: \"PalmSecure-F Pro\",\n      serialNumber: \"FJ111222333\",\n      ipAddress: \"192.168.1.113\",\n      macAddress: \"00:11:22:33:44:DD\",\n      locationId: 1,\n      installationDate: \"2024-02-01\",\n      warrantyUntil: \"2027-02-01\",\n      status: \"active\",\n      enrolledUsers: 25,\n      maxUsers: 1000,\n      accessLevel: \"restricted\",\n      integrationSystem: \"Staff Management System\",\n      firmwareVersion: \"1.2.3\",\n      lastSyncDate: \"2024-01-20T07:30:00Z\",\n      maintenanceContract: \"Fujitsu Support\",\n      notes: \"High-security palm scanner for staff room and sensitive areas access\",\n      createdAt: \"2024-02-01T00:00:00Z\",\n      updatedAt: \"2024-01-20T07:45:00Z\"\n    }\n  ]\n\n  // Fetch data\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Use mock data for biometric systems\n  const biometricSystems = mockBiometricData\n\n  // Filter biometric systems\n  const filteredSystems = biometricSystems?.filter(system => {\n    const location = locations?.find(l => l.id === system.locationId)\n    \n    const matchesSearch = \n      system.systemName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.model.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.serialNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.ipAddress?.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === \"all\" || system.status === statusFilter\n    const matchesType = typeFilter === \"all\" || system.systemType === typeFilter\n    const matchesLocation = locationFilter === \"all\" || system.locationId.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesType && matchesLocation\n  }) || []\n\n  // Helper functions\n  const getLocationName = (locationId: number) => {\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown\"\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const formatDateTime = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  }\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status) {\n      case \"active\": return \"bg-green-100 text-green-800\"\n      case \"inactive\": return \"bg-gray-100 text-gray-800\"\n      case \"maintenance\": return \"bg-yellow-100 text-yellow-800\"\n      case \"fault\": return \"bg-red-100 text-red-800\"\n      default: return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  const getAccessLevelBadgeColor = (level: string) => {\n    switch (level) {\n      case \"full_access\": return \"bg-blue-100 text-blue-800\"\n      case \"restricted\": return \"bg-orange-100 text-orange-800\"\n      case \"entry_only\": return \"bg-gray-100 text-gray-800\"\n      default: return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  const getSystemTypeIcon = (type: string) => {\n    return systemTypeIcons[type] || Settings\n  }\n\n  const getSystemTypeLabel = (type: string) => {\n    switch (type) {\n      case \"fingerprint_scanner\": return \"Fingerprint Scanner\"\n      case \"face_recognition\": return \"Face Recognition\"\n      case \"iris_scanner\": return \"Iris Scanner\"\n      case \"palm_scanner\": return \"Palm Scanner\"\n      case \"access_controller\": return \"Access Controller\"\n      default: return type.charAt(0).toUpperCase() + type.slice(1)\n    }\n  }\n\n  const getAccessLevelLabel = (level: string) => {\n    switch (level) {\n      case \"full_access\": return \"Full Access\"\n      case \"restricted\": return \"Restricted\"\n      case \"entry_only\": return \"Entry Only\"\n      default: return level.charAt(0).toUpperCase() + level.slice(1)\n    }\n  }\n\n  // Calculate system metrics\n  const totalSystems = biometricSystems.length\n  const activeSystems = biometricSystems.filter(s => s.status === \"active\").length\n  const totalEnrolledUsers = biometricSystems.reduce((sum, s) => sum + (s.enrolledUsers || 0), 0)\n  const totalCapacity = biometricSystems.reduce((sum, s) => sum + (s.maxUsers || 0), 0)\n  const utilizationRate = totalCapacity > 0 ? Math.round((totalEnrolledUsers / totalCapacity) * 100) : 0\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Biometric Systems</h1>\n          <p className=\"text-muted-foreground\">\n            Manage access control and attendance systems across all BODYCRAFT locations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Systems\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export Report\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Biometric System\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Add Biometric System</DialogTitle>\n                <DialogDescription>\n                  Register a new biometric access control or attendance system\n                </DialogDescription>\n              </DialogHeader>\n              <form className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"systemName\">System Name *</Label>\n                    <Input\n                      id=\"systemName\"\n                      name=\"systemName\"\n                      placeholder=\"Main Entrance Scanner\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"systemType\">System Type *</Label>\n                    <Select name=\"systemType\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"fingerprint_scanner\">Fingerprint Scanner</SelectItem>\n                        <SelectItem value=\"face_recognition\">Face Recognition</SelectItem>\n                        <SelectItem value=\"iris_scanner\">Iris Scanner</SelectItem>\n                        <SelectItem value=\"palm_scanner\">Palm Scanner</SelectItem>\n                        <SelectItem value=\"access_controller\">Access Controller</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"brand\">Brand *</Label>\n                    <Input\n                      id=\"brand\"\n                      name=\"brand\"\n                      placeholder=\"ZKTeco, Hikvision, eSSL\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"model\">Model *</Label>\n                    <Input\n                      id=\"model\"\n                      name=\"model\"\n                      placeholder=\"F18, X990, inBio160\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serialNumber\">Serial Number</Label>\n                    <Input\n                      id=\"serialNumber\"\n                      name=\"serialNumber\"\n                      placeholder=\"ZK123456789\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"locationId\">Location *</Label>\n                    <Select name=\"locationId\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select location\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {locations?.map(location => (\n                          <SelectItem key={location.id} value={location.id.toString()}>\n                            {location.outletName}, {location.city}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"ipAddress\">IP Address</Label>\n                    <Input\n                      id=\"ipAddress\"\n                      name=\"ipAddress\"\n                      placeholder=\"192.168.1.110\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"maxUsers\">Max Users Capacity</Label>\n                    <Input\n                      id=\"maxUsers\"\n                      name=\"maxUsers\"\n                      type=\"number\"\n                      placeholder=\"3000\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"accessLevel\">Access Level *</Label>\n                    <Select name=\"accessLevel\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select level\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"full_access\">Full Access</SelectItem>\n                        <SelectItem value=\"restricted\">Restricted</SelectItem>\n                        <SelectItem value=\"entry_only\">Entry Only</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"installationDate\">Installation Date *</Label>\n                    <Input\n                      id=\"installationDate\"\n                      name=\"installationDate\"\n                      type=\"date\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"integrationSystem\">Integration System</Label>\n                  <Input\n                    id=\"integrationSystem\"\n                    name=\"integrationSystem\"\n                    placeholder=\"HRMS, Access Control, Attendance System\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notes\">Notes</Label>\n                  <Textarea\n                    id=\"notes\"\n                    name=\"notes\"\n                    placeholder=\"Additional notes about the biometric system\"\n                    rows={3}\n                  />\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">\n                    Add Biometric System\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Systems</CardTitle>\n            <Fingerprint className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalSystems}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Biometric access systems\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Systems</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{activeSystems}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently operational\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Enrolled Users</CardTitle>\n            <Users className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalEnrolledUsers}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Total user registrations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Utilization</CardTitle>\n            <Shield className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{utilizationRate}%</div>\n            <div className=\"mt-2\">\n              <Progress value={utilizationRate} className=\"h-2\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Systems</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by System Name, Brand, Model, Serial Number, IP Address...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"fault\">Fault</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"fingerprint_scanner\">Fingerprint</SelectItem>\n                  <SelectItem value=\"face_recognition\">Face Recognition</SelectItem>\n                  <SelectItem value=\"iris_scanner\">Iris Scanner</SelectItem>\n                  <SelectItem value=\"palm_scanner\">Palm Scanner</SelectItem>\n                  <SelectItem value=\"access_controller\">Access Controller</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredSystems.length} of {biometricSystems?.length || 0} biometric systems\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Biometric Systems Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>System</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Brand/Model</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Users</TableHead>\n                <TableHead>Access Level</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredSystems.map((system) => {\n                const SystemIcon = getSystemTypeIcon(system.systemType)\n                const utilizationPercent = system.maxUsers && system.enrolledUsers \n                  ? Math.round((system.enrolledUsers / system.maxUsers) * 100)\n                  : 0\n                \n                return (\n                  <TableRow key={system.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <SystemIcon className=\"h-8 w-8 p-1.5 bg-muted rounded-full\" />\n                        <div>\n                          <div className=\"font-medium\">{system.systemName}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {system.serialNumber || \"No serial number\"}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {getSystemTypeLabel(system.systemType)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{system.brand}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {system.model}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"h-3 w-3 text-muted-foreground\" />\n                        {getLocationName(system.locationId)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {system.enrolledUsers && system.maxUsers ? (\n                          <div>\n                            <div className=\"font-medium\">{system.enrolledUsers} / {system.maxUsers}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {utilizationPercent}% used\n                            </div>\n                          </div>\n                        ) : (\n                          \"Not specified\"\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"secondary\" \n                        className={getAccessLevelBadgeColor(system.accessLevel)}\n                      >\n                        {getAccessLevelLabel(system.accessLevel)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"secondary\" \n                        className={getStatusBadgeColor(system.status)}\n                      >\n                        {system.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedSystem(system)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit System\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Users className=\"mr-2 h-4 w-4\" />\n                            Manage Users\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Settings className=\"mr-2 h-4 w-4\" />\n                            Configure\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem className=\"text-red-600\">\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Remove System\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View System Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Biometric System Details</DialogTitle>\n            <DialogDescription>\n              Complete information about this biometric access control system\n            </DialogDescription>\n          </DialogHeader>\n          {selectedSystem && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">System Name</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded font-medium\">\n                    {selectedSystem.systemName}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">System Type</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getSystemTypeLabel(selectedSystem.systemType)}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Brand</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.brand}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Model</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.model}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Serial Number</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.serialNumber || \"Not specified\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Location</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getLocationName(selectedSystem.locationId)}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">IP Address</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.ipAddress || \"Not configured\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Access Level</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    <Badge className={getAccessLevelBadgeColor(selectedSystem.accessLevel)}>\n                      {getAccessLevelLabel(selectedSystem.accessLevel)}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Enrolled Users</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.enrolledUsers || \"0\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Max Capacity</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.maxUsers || \"N/A\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Utilization</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.maxUsers && selectedSystem.enrolledUsers \n                      ? `${Math.round((selectedSystem.enrolledUsers / selectedSystem.maxUsers) * 100)}%`\n                      : \"N/A\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Installation Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDate(selectedSystem.installationDate)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Warranty Until</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.warrantyUntil ? formatDate(selectedSystem.warrantyUntil) : \"No warranty\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    <Badge className={getStatusBadgeColor(selectedSystem.status)}>\n                      {selectedSystem.status}\n                    </Badge>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Firmware Version</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.firmwareVersion || \"Not specified\"}\n                  </div>\n                </div>\n              </div>\n\n              {selectedSystem.integrationSystem && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Integration System</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.integrationSystem}\n                  </div>\n                </div>\n              )}\n\n              {selectedSystem.lastSyncDate && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Last Sync</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDateTime(selectedSystem.lastSyncDate)}\n                  </div>\n                </div>\n              )}\n\n              {selectedSystem.maintenanceContract && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Maintenance Contract</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.maintenanceContract}\n                  </div>\n                </div>\n              )}\n\n              {selectedSystem.notes && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Notes</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.notes}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":37392},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/pages/cctv.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Camera, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Monitor,\n  HardDrive,\n  Wifi,\n  MapPin,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Settings,\n  Power,\n  Shield,\n  Video\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface CCTVSystem {\n  id: number\n  systemName: string\n  systemType: \"nvr\" | \"dvr\" | \"ip_camera\" | \"analog_camera\" | \"monitoring_station\"\n  brand: string\n  model: string\n  serialNumber: string | null\n  ipAddress: string | null\n  macAddress: string | null\n  locationId: number\n  installationDate: string\n  warrantyUntil: string | null\n  status: \"active\" | \"inactive\" | \"maintenance\" | \"fault\"\n  cameraCount: number | null\n  storageCapacity: string | null\n  recordingQuality: string | null\n  remoteAccess: boolean\n  maintenanceContract: string | null\n  lastMaintenanceDate: string | null\n  notes: string | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  active: \"bg-green-500\",\n  inactive: \"bg-gray-500\",\n  maintenance: \"bg-yellow-500\",\n  fault: \"bg-red-500\"\n}\n\n// System type icons\nconst systemTypeIcons: Record<string, any> = {\n  nvr: HardDrive,\n  dvr: HardDrive,\n  ip_camera: Camera,\n  analog_camera: Video,\n  monitoring_station: Monitor\n}\n\nexport default function CCTVPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedSystem, setSelectedSystem] = useState<CCTVSystem | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Mock CCTV data - In real app, this would come from API\n  const mockCCTVData: CCTVSystem[] = [\n    {\n      id: 1,\n      systemName: \"JP Nagar Store Main NVR\",\n      systemType: \"nvr\",\n      brand: \"Hikvision\",\n      model: \"DS-7616NI-I2/16P\",\n      serialNumber: \"HV123456789\",\n      ipAddress: \"192.168.1.100\",\n      macAddress: \"00:11:22:33:44:55\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2027-01-15\",\n      status: \"active\",\n      cameraCount: 16,\n      storageCapacity: \"8TB\",\n      recordingQuality: \"4MP\",\n      remoteAccess: true,\n      maintenanceContract: \"SecureTech Solutions\",\n      lastMaintenanceDate: \"2024-01-10\",\n      notes: \"Main surveillance system for store entrance, cash counter, and storage areas\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-10T10:30:00Z\"\n    },\n    {\n      id: 2,\n      systemName: \"Entrance Camera Bank 1\",\n      systemType: \"ip_camera\",\n      brand: \"Dahua\",\n      model: \"IPC-HDBW4231E-AS\",\n      serialNumber: \"DH987654321\",\n      ipAddress: \"192.168.1.101\",\n      macAddress: \"00:11:22:33:44:66\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2026-01-15\",\n      status: \"active\",\n      cameraCount: 4,\n      storageCapacity: null,\n      recordingQuality: \"2MP\",\n      remoteAccess: true,\n      maintenanceContract: \"SecureTech Solutions\",\n      lastMaintenanceDate: \"2024-01-10\",\n      notes: \"Covers main entrance, customer parking, and loading dock\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-10T10:30:00Z\"\n    },\n    {\n      id: 3,\n      systemName: \"Koramangala DVR System\", \n      systemType: \"dvr\",\n      brand: \"CP Plus\",\n      model: \"CP-UVR-0801E1-CS\",\n      serialNumber: \"CP555666777\",\n      ipAddress: \"192.168.1.150\",\n      macAddress: \"00:11:22:33:44:77\",\n      locationId: 2,\n      installationDate: \"2023-12-01\",\n      warrantyUntil: \"2025-12-01\",\n      status: \"maintenance\",\n      cameraCount: 8,\n      storageCapacity: \"2TB\",\n      recordingQuality: \"1080p\",\n      remoteAccess: false,\n      maintenanceContract: \"Local Security Services\",\n      lastMaintenanceDate: \"2024-01-05\",\n      notes: \"Scheduled for upgrade to IP system. Current analog cameras need replacement\",\n      createdAt: \"2023-12-01T00:00:00Z\",\n      updatedAt: \"2024-01-05T14:20:00Z\"\n    },\n    {\n      id: 4,\n      systemName: \"Store Monitoring Station\",\n      systemType: \"monitoring_station\",\n      brand: \"Samsung\",\n      model: \"SRN-4000-2TB\",\n      serialNumber: \"SM111222333\",\n      ipAddress: \"192.168.1.200\",\n      macAddress: \"00:11:22:33:44:88\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2027-01-15\",\n      status: \"active\",\n      cameraCount: null,\n      storageCapacity: \"2TB\",\n      recordingQuality: null,\n      remoteAccess: true,\n      maintenanceContract: \"Samsung Care\",\n      lastMaintenanceDate: null,\n      notes: \"Central monitoring workstation for security personnel\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-01T00:00:00Z\"\n    }\n  ]\n\n  // Fetch data\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Use mock data for CCTV systems\n  const cctvSystems = mockCCTVData\n\n  // Filter CCTV systems\n  const filteredSystems = cctvSystems?.filter(system => {\n    const location = locations?.find(l => l.id === system.locationId)\n    \n    const matchesSearch = \n      system.systemName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.model.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.serialNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.ipAddress?.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === \"all\" || system.status === statusFilter\n    const matchesType = typeFilter === \"all\" || system.systemType === typeFilter\n    const matchesLocation = locationFilter === \"all\" || system.locationId.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesType && matchesLocation\n  }) || []\n\n  // Helper functions\n  const getLocationName = (locationId: number) => {\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown\"\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status) {\n      case \"active\": return \"bg-green-100 text-green-800\"\n      case \"inactive\": return \"bg-gray-100 text-gray-800\"\n      case \"maintenance\": return \"bg-yellow-100 text-yellow-800\"\n      case \"fault\": return \"bg-red-100 text-red-800\"\n      default: return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  const getSystemTypeIcon = (type: string) => {\n    return systemTypeIcons[type] || Settings\n  }\n\n  const getSystemTypeLabel = (type: string) => {\n    switch (type) {\n      case \"nvr\": return \"Network Video Recorder\"\n      case \"dvr\": return \"Digital Video Recorder\"\n      case \"ip_camera\": return \"IP Camera\"\n      case \"analog_camera\": return \"Analog Camera\"\n      case \"monitoring_station\": return \"Monitoring Station\"\n      default: return type.charAt(0).toUpperCase() + type.slice(1)\n    }\n  }\n\n  // Calculate system metrics\n  const totalSystems = cctvSystems.length\n  const activeSystems = cctvSystems.filter(s => s.status === \"active\").length\n  const faultySystems = cctvSystems.filter(s => s.status === \"fault\").length\n  const totalCameras = cctvSystems.reduce((sum, s) => sum + (s.cameraCount || 0), 0)\n  const systemHealth = totalSystems > 0 ? Math.round((activeSystems / totalSystems) * 100) : 0\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">CCTV Systems</h1>\n          <p className=\"text-muted-foreground\">\n            Monitor and manage surveillance systems across all BODYCRAFT locations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Systems\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export Report\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add CCTV System\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Add CCTV System</DialogTitle>\n                <DialogDescription>\n                  Register a new surveillance system or component\n                </DialogDescription>\n              </DialogHeader>\n              <form className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"systemName\">System Name *</Label>\n                    <Input\n                      id=\"systemName\"\n                      name=\"systemName\"\n                      placeholder=\"Main Store NVR\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"systemType\">System Type *</Label>\n                    <Select name=\"systemType\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"nvr\">Network Video Recorder</SelectItem>\n                        <SelectItem value=\"dvr\">Digital Video Recorder</SelectItem>\n                        <SelectItem value=\"ip_camera\">IP Camera</SelectItem>\n                        <SelectItem value=\"analog_camera\">Analog Camera</SelectItem>\n                        <SelectItem value=\"monitoring_station\">Monitoring Station</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"brand\">Brand *</Label>\n                    <Input\n                      id=\"brand\"\n                      name=\"brand\"\n                      placeholder=\"Hikvision, Dahua, CP Plus\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"model\">Model *</Label>\n                    <Input\n                      id=\"model\"\n                      name=\"model\"\n                      placeholder=\"DS-7616NI-I2/16P\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serialNumber\">Serial Number</Label>\n                    <Input\n                      id=\"serialNumber\"\n                      name=\"serialNumber\"\n                      placeholder=\"HV123456789\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"locationId\">Location *</Label>\n                    <Select name=\"locationId\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select location\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {locations?.map(location => (\n                          <SelectItem key={location.id} value={location.id.toString()}>\n                            {location.outletName}, {location.city}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"ipAddress\">IP Address</Label>\n                    <Input\n                      id=\"ipAddress\"\n                      name=\"ipAddress\"\n                      placeholder=\"192.168.1.100\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"macAddress\">MAC Address</Label>\n                    <Input\n                      id=\"macAddress\"\n                      name=\"macAddress\"\n                      placeholder=\"00:11:22:33:44:55\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"installationDate\">Installation Date *</Label>\n                    <Input\n                      id=\"installationDate\"\n                      name=\"installationDate\"\n                      type=\"date\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"warrantyUntil\">Warranty Until</Label>\n                    <Input\n                      id=\"warrantyUntil\"\n                      name=\"warrantyUntil\"\n                      type=\"date\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"cameraCount\">Camera Count</Label>\n                    <Input\n                      id=\"cameraCount\"\n                      name=\"cameraCount\"\n                      type=\"number\"\n                      placeholder=\"16\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"storageCapacity\">Storage Capacity</Label>\n                    <Input\n                      id=\"storageCapacity\"\n                      name=\"storageCapacity\"\n                      placeholder=\"8TB\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notes\">Notes</Label>\n                  <Textarea\n                    id=\"notes\"\n                    name=\"notes\"\n                    placeholder=\"Additional notes about the system configuration\"\n                    rows={3}\n                  />\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">\n                    Add CCTV System\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Systems</CardTitle>\n            <Camera className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalSystems}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              All surveillance systems\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Systems</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{activeSystems}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Operational systems\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Cameras</CardTitle>\n            <Video className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalCameras}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across all systems\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">System Health</CardTitle>\n            <Shield className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{systemHealth}%</div>\n            <div className=\"mt-2\">\n              <Progress value={systemHealth} className=\"h-2\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Systems</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by System Name, Brand, Model, Serial Number, IP Address...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"fault\">Fault</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"nvr\">NVR Systems</SelectItem>\n                  <SelectItem value=\"dvr\">DVR Systems</SelectItem>\n                  <SelectItem value=\"ip_camera\">IP Cameras</SelectItem>\n                  <SelectItem value=\"analog_camera\">Analog Cameras</SelectItem>\n                  <SelectItem value=\"monitoring_station\">Monitoring Stations</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredSystems.length} of {cctvSystems?.length || 0} CCTV systems\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* CCTV Systems Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>System</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Brand/Model</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Network</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Cameras</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredSystems.map((system) => {\n                const SystemIcon = getSystemTypeIcon(system.systemType)\n                \n                return (\n                  <TableRow key={system.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <SystemIcon className=\"h-8 w-8 p-1.5 bg-muted rounded-full\" />\n                        <div>\n                          <div className=\"font-medium\">{system.systemName}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {system.serialNumber || \"No serial number\"}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {getSystemTypeLabel(system.systemType)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{system.brand}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {system.model}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"h-3 w-3 text-muted-foreground\" />\n                        {getLocationName(system.locationId)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {system.ipAddress ? (\n                          <div>\n                            <div>{system.ipAddress}</div>\n                            {system.remoteAccess && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                <Wifi className=\"h-2 w-2 mr-1\" />\n                                Remote\n                              </Badge>\n                            )}\n                          </div>\n                        ) : (\n                          \"No IP configured\"\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"secondary\" \n                        className={getStatusBadgeColor(system.status)}\n                      >\n                        {system.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-center\">\n                        {system.cameraCount ? (\n                          <div className=\"flex items-center gap-1\">\n                            <Camera className=\"h-3 w-3\" />\n                            {system.cameraCount}\n                          </div>\n                        ) : (\n                          \"N/A\"\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedSystem(system)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit System\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Settings className=\"mr-2 h-4 w-4\" />\n                            Configure\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem className=\"text-red-600\">\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Remove System\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View System Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>CCTV System Details</DialogTitle>\n            <DialogDescription>\n              Complete information about this surveillance system\n            </DialogDescription>\n          </DialogHeader>\n          {selectedSystem && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">System Name</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded font-medium\">\n                    {selectedSystem.systemName}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">System Type</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getSystemTypeLabel(selectedSystem.systemType)}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Brand</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.brand}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Model</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.model}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Serial Number</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.serialNumber || \"Not specified\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Location</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getLocationName(selectedSystem.locationId)}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">IP Address</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.ipAddress || \"Not configured\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">MAC Address</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.macAddress || \"Not specified\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Camera Count</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.cameraCount || \"N/A\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Storage</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.storageCapacity || \"N/A\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Recording Quality</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.recordingQuality || \"N/A\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Installation Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDate(selectedSystem.installationDate)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Warranty Until</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.warrantyUntil ? formatDate(selectedSystem.warrantyUntil) : \"No warranty\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    <Badge className={getStatusBadgeColor(selectedSystem.status)}>\n                      {selectedSystem.status}\n                    </Badge>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Remote Access</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.remoteAccess ? (\n                      <Badge variant=\"outline\" className=\"text-green-600\">\n                        <Wifi className=\"h-3 w-3 mr-1\" />\n                        Enabled\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"outline\" className=\"text-gray-600\">\n                        Disabled\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {selectedSystem.maintenanceContract && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Maintenance Contract</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.maintenanceContract}\n                    {selectedSystem.lastMaintenanceDate && (\n                      <div className=\"text-xs text-muted-foreground mt-1\">\n                        Last maintenance: {formatDate(selectedSystem.lastMaintenanceDate)}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {selectedSystem.notes && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Notes</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.notes}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":34567},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/pages/compliance.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Shield, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Calendar,\n  FileText,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Building2,\n  HardDrive,\n  Key,\n  Monitor,\n  Camera,\n  Fingerprint,\n  Settings,\n  Archive\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface ComplianceRecord {\n  id: number\n  type: \"backup\" | \"security_audit\" | \"policy_review\" | \"system_update\" | \"data_retention\" | \"access_review\"\n  category: \"data_backup\" | \"security\" | \"compliance\" | \"maintenance\" | \"governance\"\n  title: string\n  description: string\n  assetId: string | null\n  locationId: number | null\n  dueDate: string\n  completedDate: string | null\n  status: \"pending\" | \"completed\" | \"overdue\" | \"exempted\"\n  assignedTo: string\n  evidenceUrl: string | null\n  complianceNotes: string | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  assetType: string\n  status: \"available\" | \"assigned\" | \"maintenance\" | \"retired\"\n  locationId: number | null\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  pending: \"bg-yellow-500\",\n  completed: \"bg-green-500\",\n  overdue: \"bg-red-500\",\n  exempted: \"bg-gray-500\"\n}\n\n// Type color mapping\nconst typeColors: Record<string, string> = {\n  backup: \"bg-blue-500\",\n  security_audit: \"bg-red-500\",\n  policy_review: \"bg-purple-500\",\n  system_update: \"bg-orange-500\",\n  data_retention: \"bg-cyan-500\",\n  access_review: \"bg-pink-500\"\n}\n\n// Category icons\nconst categoryIcons: Record<string, any> = {\n  data_backup: HardDrive,\n  security: Shield,\n  compliance: FileText,\n  maintenance: Settings,\n  governance: Building2\n}\n\nexport default function CompliancePage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\")\n  const [categoryFilter, setCategoryFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedRecord, setSelectedRecord] = useState<ComplianceRecord | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [isCompleteDialogOpen, setIsCompleteDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Mock compliance data - In real app, this would come from API\n  const mockComplianceData: ComplianceRecord[] = [\n    {\n      id: 1,\n      type: \"backup\",\n      category: \"data_backup\",\n      title: \"Weekly System Backup Verification\",\n      description: \"Verify that all critical systems have been backed up and backups are recoverable\",\n      assetId: \"BFC001\",\n      locationId: 1,\n      dueDate: \"2024-01-15\",\n      completedDate: \"2024-01-14\",\n      status: \"completed\",\n      assignedTo: \"Rajesh Kumar\",\n      evidenceUrl: \"backup_verification_20240114.pdf\",\n      complianceNotes: \"All backups verified successfully. Test restore completed for critical files.\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-14T10:30:00Z\"\n    },\n    {\n      id: 2,\n      type: \"security_audit\",\n      category: \"security\",\n      title: \"Quarterly Access Review\",\n      description: \"Review and validate user access permissions across all systems\",\n      assetId: null,\n      locationId: 1,\n      dueDate: \"2024-01-20\",\n      completedDate: null,\n      status: \"pending\",\n      assignedTo: \"Priya Singh\",\n      evidenceUrl: null,\n      complianceNotes: null,\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-01T00:00:00Z\"\n    },\n    {\n      id: 3,\n      type: \"policy_review\",\n      category: \"governance\",\n      title: \"IT Security Policy Annual Review\",\n      description: \"Annual review and update of IT security policies and procedures\",\n      assetId: null,\n      locationId: 2,\n      dueDate: \"2024-01-10\",\n      completedDate: null,\n      status: \"overdue\",\n      assignedTo: \"Admin Team\",\n      evidenceUrl: null,\n      complianceNotes: \"Policy review delayed due to management changes\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-01T00:00:00Z\"\n    },\n    {\n      id: 4,\n      type: \"system_update\",\n      category: \"maintenance\",\n      title: \"Critical Security Patches\",\n      description: \"Install latest security patches on all Windows systems\",\n      assetId: \"BFC003\",\n      locationId: 2,\n      dueDate: \"2024-01-18\",\n      completedDate: \"2024-01-17\",\n      status: \"completed\",\n      assignedTo: \"IT Support\",\n      evidenceUrl: \"patch_report_20240117.xlsx\",\n      complianceNotes: \"Security patches applied to 15 systems. Reboot completed successfully.\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-17T16:45:00Z\"\n    },\n    {\n      id: 5,\n      type: \"data_retention\",\n      category: \"compliance\",\n      title: \"Data Retention Policy Compliance\",\n      description: \"Ensure old backup data is archived according to retention policy\",\n      assetId: \"BFC006\",\n      locationId: 1,\n      dueDate: \"2024-01-25\",\n      completedDate: null,\n      status: \"pending\",\n      assignedTo: \"Data Manager\",\n      evidenceUrl: null,\n      complianceNotes: null,\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-01T00:00:00Z\"\n    }\n  ]\n\n  // Fetch data\n  const { data: assets } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Use mock data for compliance records\n  const compliance = mockComplianceData\n\n  // Helper function to get compliance status\n  const getComplianceStatus = (record: ComplianceRecord) => {\n    if (record.status === \"exempted\") return \"exempted\"\n    if (record.completedDate) return \"completed\"\n    \n    const dueDate = new Date(record.dueDate)\n    const today = new Date()\n    today.setHours(0, 0, 0, 0)\n    \n    if (dueDate < today) return \"overdue\"\n    return \"pending\"\n  }\n\n  // Filter compliance records\n  const filteredCompliance = compliance?.filter(record => {\n    const asset = assets?.find(a => a.assetId === record.assetId)\n    const location = locations?.find(l => l.id === record.locationId)\n    const status = getComplianceStatus(record)\n    \n    const matchesSearch = \n      record.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      record.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      record.assignedTo.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      record.assetId?.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === \"all\" || status === statusFilter\n    const matchesType = typeFilter === \"all\" || record.type === typeFilter\n    const matchesCategory = categoryFilter === \"all\" || record.category === categoryFilter\n    const matchesLocation = locationFilter === \"all\" || record.locationId?.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesType && matchesCategory && matchesLocation\n  }) || []\n\n  // Helper functions\n  const getAssetInfo = (assetId: string | null) => {\n    if (!assetId) return null\n    return assets?.find(asset => asset.assetId === assetId)\n  }\n\n  const getLocationName = (locationId: number | null) => {\n    if (!locationId) return \"All Locations\"\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown\"\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"bg-green-100 text-green-800\"\n      case \"pending\": return \"bg-yellow-100 text-yellow-800\" \n      case \"overdue\": return \"bg-red-100 text-red-800\"\n      case \"exempted\": return \"bg-gray-100 text-gray-800\"\n      default: return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"backup\": return HardDrive\n      case \"security_audit\": return Shield\n      case \"policy_review\": return FileText\n      case \"system_update\": return Monitor\n      case \"data_retention\": return Archive\n      case \"access_review\": return Key\n      default: return Settings\n    }\n  }\n\n  // Calculate compliance metrics\n  const totalRecords = compliance.length\n  const completedRecords = compliance.filter(r => r.completedDate).length\n  const pendingRecords = compliance.filter(r => !r.completedDate && getComplianceStatus(r) === \"pending\").length\n  const overdueRecords = compliance.filter(r => getComplianceStatus(r) === \"overdue\").length\n  const complianceRate = totalRecords > 0 ? Math.round((completedRecords / totalRecords) * 100) : 0\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Backup & Compliance</h1>\n          <p className=\"text-muted-foreground\">\n            Monitor compliance activities and backup verification across all locations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Tasks\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export Report\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Compliance Task\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create Compliance Task</DialogTitle>\n                <DialogDescription>\n                  Add a new compliance monitoring task or backup verification\n                </DialogDescription>\n              </DialogHeader>\n              <form className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"type\">Task Type *</Label>\n                    <Select name=\"type\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select task type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"backup\">Backup Verification</SelectItem>\n                        <SelectItem value=\"security_audit\">Security Audit</SelectItem>\n                        <SelectItem value=\"policy_review\">Policy Review</SelectItem>\n                        <SelectItem value=\"system_update\">System Update</SelectItem>\n                        <SelectItem value=\"data_retention\">Data Retention</SelectItem>\n                        <SelectItem value=\"access_review\">Access Review</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"category\">Category *</Label>\n                    <Select name=\"category\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select category\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"data_backup\">Data Backup</SelectItem>\n                        <SelectItem value=\"security\">Security</SelectItem>\n                        <SelectItem value=\"compliance\">Compliance</SelectItem>\n                        <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                        <SelectItem value=\"governance\">Governance</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Task Title *</Label>\n                  <Input\n                    id=\"title\"\n                    name=\"title\"\n                    placeholder=\"Weekly backup verification\"\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Description *</Label>\n                  <Textarea\n                    id=\"description\"\n                    name=\"description\"\n                    placeholder=\"Detailed description of the compliance task\"\n                    rows={3}\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assetId\">Related Asset (Optional)</Label>\n                    <Select name=\"assetId\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select asset\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"\">No specific asset</SelectItem>\n                        {assets?.map(asset => (\n                          <SelectItem key={asset.assetId} value={asset.assetId}>\n                            {asset.assetId} - {asset.brand} {asset.modelName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"locationId\">Location *</Label>\n                    <Select name=\"locationId\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select location\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {locations?.map(location => (\n                          <SelectItem key={location.id} value={location.id.toString()}>\n                            {location.outletName}, {location.city}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"dueDate\">Due Date *</Label>\n                    <Input\n                      id=\"dueDate\"\n                      name=\"dueDate\"\n                      type=\"date\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assignedTo\">Assigned To *</Label>\n                    <Input\n                      id=\"assignedTo\"\n                      name=\"assignedTo\"\n                      placeholder=\"John Doe / IT Team\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">\n                    Create Compliance Task\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Tasks</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalRecords}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              All compliance tasks\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Completed</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{completedRecords}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Tasks completed\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Overdue</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{overdueRecords}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Past due date\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Compliance Rate</CardTitle>\n            <Shield className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{complianceRate}%</div>\n            <div className=\"mt-2\">\n              <Progress value={complianceRate} className=\"h-2\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Compliance</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by Title, Description, Asset ID, Assigned Person...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"overdue\">Overdue</SelectItem>\n                  <SelectItem value=\"exempted\">Exempted</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"backup\">Backup</SelectItem>\n                  <SelectItem value=\"security_audit\">Security Audit</SelectItem>\n                  <SelectItem value=\"policy_review\">Policy Review</SelectItem>\n                  <SelectItem value=\"system_update\">System Update</SelectItem>\n                  <SelectItem value=\"data_retention\">Data Retention</SelectItem>\n                  <SelectItem value=\"access_review\">Access Review</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"data_backup\">Data Backup</SelectItem>\n                  <SelectItem value=\"security\">Security</SelectItem>\n                  <SelectItem value=\"compliance\">Compliance</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"governance\">Governance</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredCompliance.length} of {compliance?.length || 0} compliance records\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Compliance Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Task</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Asset/Location</TableHead>\n                <TableHead>Due Date</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Assigned To</TableHead>\n                <TableHead>Evidence</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredCompliance.map((record) => {\n                const asset = getAssetInfo(record.assetId)\n                const status = getComplianceStatus(record)\n                const TypeIcon = getTypeIcon(record.type)\n                \n                return (\n                  <TableRow key={record.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <TypeIcon className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">{record.title}</div>\n                          <div className=\"text-sm text-muted-foreground truncate max-w-xs\">\n                            {record.description}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className={`w-2 h-2 rounded-full ${typeColors[record.type]}`}\n                        />\n                        <span className=\"capitalize\">{record.type.replace('_', ' ')}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        {asset ? (\n                          <>\n                            <div className=\"font-medium\">{record.assetId}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {asset.brand} {asset.modelName}\n                            </div>\n                          </>\n                        ) : (\n                          <div className=\"text-sm text-muted-foreground\">\n                            {getLocationName(record.locationId)}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                        {formatDate(record.dueDate)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"secondary\" \n                        className={getStatusBadgeColor(status)}\n                      >\n                        {status}\n                      </Badge>\n                      {record.completedDate && (\n                        <div className=\"text-xs text-muted-foreground mt-1\">\n                          Completed: {formatDate(record.completedDate)}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {record.assignedTo}\n                    </TableCell>\n                    <TableCell>\n                      {record.evidenceUrl ? (\n                        <div className=\"flex items-center gap-1 text-green-600\">\n                          <CheckCircle className=\"h-3 w-3\" />\n                          <span className=\"text-xs\">Evidence</span>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center gap-1 text-gray-400\">\n                          <XCircle className=\"h-3 w-3\" />\n                          <span className=\"text-xs\">No evidence</span>\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedRecord(record)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit Task\n                          </DropdownMenuItem>\n                          {!record.completedDate && (\n                            <DropdownMenuItem>\n                              <CheckCircle className=\"mr-2 h-4 w-4\" />\n                              Mark Complete\n                            </DropdownMenuItem>\n                          )}\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem className=\"text-red-600\">\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete Task\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Record Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Compliance Task Details</DialogTitle>\n            <DialogDescription>\n              Complete information about this compliance task\n            </DialogDescription>\n          </DialogHeader>\n          {selectedRecord && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Task Type</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded capitalize\">\n                    {selectedRecord.type.replace('_', ' ')}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Category</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded capitalize\">\n                    {selectedRecord.category.replace('_', ' ')}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Title</Label>\n                <div className=\"text-sm p-2 bg-muted rounded font-medium\">\n                  {selectedRecord.title}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Description</Label>\n                <div className=\"text-sm p-2 bg-muted rounded\">\n                  {selectedRecord.description}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Due Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDate(selectedRecord.dueDate)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    <Badge className={getStatusBadgeColor(getComplianceStatus(selectedRecord))}>\n                      {getComplianceStatus(selectedRecord)}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Assigned To</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedRecord.assignedTo}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Evidence</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedRecord.evidenceUrl ? (\n                      <div className=\"flex items-center gap-2 text-green-600\">\n                        <CheckCircle className=\"h-4 w-4\" />\n                        {selectedRecord.evidenceUrl}\n                      </div>\n                    ) : (\n                      <div className=\"text-gray-500\">No evidence uploaded</div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {selectedRecord.complianceNotes && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Compliance Notes</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedRecord.complianceNotes}\n                  </div>\n                </div>\n              )}\n\n              {selectedRecord.assetId && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Related Asset</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedRecord.assetId}\n                    {getAssetInfo(selectedRecord.assetId) && (\n                      <div className=\"text-xs text-muted-foreground\">\n                        {getAssetInfo(selectedRecord.assetId)?.brand} {getAssetInfo(selectedRecord.assetId)?.modelName}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":33903},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { \n  Laptop, \n  Users, \n  MapPin, \n  Wrench, \n  Clock, \n  CheckCircle, \n  AlertTriangle,\n  TrendingUp,\n  TrendingDown,\n  Camera,\n  Fingerprint,\n  Shield,\n  DollarSign,\n  Calendar,\n  Activity,\n  Server,\n  Wifi,\n  Database,\n  AlertCircle,\n  Eye\n} from \"lucide-react\"\n\n// TypeScript interfaces\ninterface Asset {\n  assetId: string\n  assetType: string\n  brand: string\n  modelName: string\n  serialNumber: string\n  purchaseDate: string\n  purchaseCost: number\n  warrantyUntil: string | null\n  status: \"assigned\" | \"available\" | \"maintenance\" | \"retired\"\n  condition: \"excellent\" | \"good\" | \"fair\" | \"poor\"\n  locationId: number | null\n}\n\ninterface Employee {\n  id: number\n  employeeCode: string\n  firstName: string\n  lastName: string\n  email: string\n  department: string\n  position: string\n  locationId: number | null\n}\n\ninterface Assignment {\n  id: number\n  assetId: string\n  employeeId: number\n  assignedDate: string\n  returnedDate: string | null\n  notes: string | null\n}\n\ninterface Maintenance {\n  id: number\n  assetId: string\n  maintenanceType: \"preventive\" | \"corrective\" | \"warranty\"\n  description: string\n  scheduledDate: string\n  completedDate: string | null\n  cost: number | null\n  vendor: string | null\n  status: \"scheduled\" | \"in_progress\" | \"completed\" | \"cancelled\"\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n  manager: string | null\n  contactEmail: string | null\n  contactPhone: string | null\n}\n\nexport default function Dashboard() {\n  // Fetch all data for dashboard statistics\n  const { data: assets = [], isLoading: assetsLoading } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: employees = [], isLoading: employeesLoading } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  })\n\n  const { data: assignments = [], isLoading: assignmentsLoading } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n  })\n\n  const { data: maintenance = [], isLoading: maintenanceLoading } = useQuery<Maintenance[]>({\n    queryKey: [\"/api/maintenance\"],\n  })\n\n  const { data: locations = [], isLoading: locationsLoading } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Mock data for CCTV and Biometric systems (would come from API in real app)\n  const cctvSystems = 4 // Total CCTV systems\n  const cctvActive = 3 // Active systems\n  const biometricSystems = 5 // Total biometric systems\n  const biometricActive = 4 // Active systems\n  const totalCameras = 28 // Total cameras across all systems\n  const enrolledUsers = 252 // Total enrolled users in biometric systems\n\n  // Calculate comprehensive statistics\n  const totalAssets = assets.length\n  const totalEmployees = employees.length\n  const totalLocations = locations.length\n  \n  // Assignment statistics\n  const activeAssignments = assignments.filter(a => !a.returnedDate).length\n  const availableAssets = totalAssets - activeAssignments\n  const assignmentRate = totalAssets > 0 ? Math.round((activeAssignments / totalAssets) * 100) : 0\n  \n  // Maintenance statistics  \n  const maintenanceDue = maintenance.filter(m => !m.completedDate && m.status !== \"cancelled\").length\n  const maintenanceCompleted = maintenance.filter(m => m.completedDate).length\n  const maintenanceInProgress = maintenance.filter(m => !m.completedDate && m.status === \"in_progress\").length\n  \n  // Asset condition analysis\n  const assetConditions = assets.reduce((acc, asset) => {\n    acc[asset.condition] = (acc[asset.condition] || 0) + 1\n    return acc\n  }, {} as Record<string, number>)\n\n  // Asset distribution by type\n  const assetTypeDistribution = assets.reduce((acc, asset) => {\n    acc[asset.assetType] = (acc[asset.assetType] || 0) + 1\n    return acc\n  }, {} as Record<string, number>)\n\n  // Asset distribution by status\n  const assetStatusDistribution = assets.reduce((acc, asset) => {\n    acc[asset.status] = (acc[asset.status] || 0) + 1\n    return acc\n  }, {} as Record<string, number>)\n\n  // Cost analysis\n  const totalAssetValue = assets.reduce((sum, asset) => sum + (asset.purchaseCost || 0), 0)\n  const avgAssetCost = totalAssets > 0 ? totalAssetValue / totalAssets : 0\n  const maintenanceCosts = maintenance.reduce((sum, m) => sum + (m.cost || 0), 0)\n\n  // Location distribution\n  const locationDistribution = assets.reduce((acc, asset) => {\n    if (asset.locationId) {\n      const location = locations.find(l => l.id === asset.locationId)\n      if (location) {\n        const locationName = `${location.outletName}, ${location.city}`\n        acc[locationName] = (acc[locationName] || 0) + 1\n      }\n    }\n    return acc\n  }, {} as Record<string, number>)\n\n  // Recent activities (recent assignments with details)\n  const recentAssignments = assignments\n    .slice(-8)\n    .reverse()\n    .map(assignment => {\n      const asset = assets.find(a => a.assetId === assignment.assetId)\n      const employee = employees.find(e => e.id === assignment.employeeId)\n      return {\n        ...assignment,\n        asset,\n        employee\n      }\n    })\n    .filter(item => item.asset && item.employee)\n\n  // Warranty analysis\n  const currentDate = new Date()\n  const expiringSoon = assets.filter(asset => {\n    if (!asset.warrantyUntil) return false\n    const warrantyDate = new Date(asset.warrantyUntil)\n    const daysUntilExpiry = (warrantyDate.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24)\n    return daysUntilExpiry <= 90 && daysUntilExpiry > 0\n  }).length\n\n  // System health scores\n  const assetHealthScore = totalAssets > 0 ? Math.round(((totalAssets - maintenanceDue) / totalAssets) * 100) : 100\n  const cctvHealthScore = cctvSystems > 0 ? Math.round((cctvActive / cctvSystems) * 100) : 100\n  const biometricHealthScore = biometricSystems > 0 ? Math.round((biometricActive / biometricSystems) * 100) : 100\n  const overallSystemHealth = Math.round((assetHealthScore + cctvHealthScore + biometricHealthScore) / 3)\n\n  const isLoading = assetsLoading || employeesLoading || assignmentsLoading || maintenanceLoading || locationsLoading\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            {[...Array(8)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\" data-testid=\"dashboard-page\">\n      {/* Header with System Health */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"title-dashboard\">Dashboard</h1>\n          <p className=\"text-muted-foreground\">\n            Comprehensive overview of BODYCRAFT IT asset management system across {totalLocations} locations\n          </p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"text-right\">\n            <div className=\"text-sm text-muted-foreground\">System Health</div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"text-2xl font-bold\">{overallSystemHealth}%</div>\n              {overallSystemHealth >= 90 ? (\n                <CheckCircle className=\"h-6 w-6 text-green-500\" />\n              ) : overallSystemHealth >= 70 ? (\n                <AlertTriangle className=\"h-6 w-6 text-yellow-500\" />\n              ) : (\n                <AlertCircle className=\"h-6 w-6 text-red-500\" />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Enhanced Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card data-testid=\"card-total-assets\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Assets</CardTitle>\n            <Laptop className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-assets\">{totalAssets}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Worth ₹{(totalAssetValue / 100000).toFixed(1)}L • {totalLocations} locations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-assigned-assets\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Asset Utilization</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-assigned-assets\">{assignmentRate}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {activeAssignments} assigned • {availableAssets} available\n            </p>\n            <Progress value={assignmentRate} className=\"mt-2\" />\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-maintenance-status\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Maintenance</CardTitle>\n            <Wrench className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">{maintenanceDue}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Due • {maintenanceInProgress} in progress • {maintenanceCompleted} completed\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-system-health\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">System Health</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{assetHealthScore}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Asset reliability • {expiringSoon} warranties expiring\n            </p>\n            <Progress value={assetHealthScore} className=\"mt-2\" />\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Integration Systems Overview */}\n      <div className=\"grid gap-4 md:grid-cols-3 lg:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">CCTV Systems</CardTitle>\n            <Camera className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold\">{cctvActive}/{cctvSystems}</div>\n                <p className=\"text-xs text-muted-foreground\">{totalCameras} cameras active</p>\n              </div>\n              <Badge variant={cctvHealthScore >= 90 ? \"default\" : \"destructive\"}>\n                {cctvHealthScore}% uptime\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Biometric Systems</CardTitle>\n            <Fingerprint className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold\">{biometricActive}/{biometricSystems}</div>\n                <p className=\"text-xs text-muted-foreground\">{enrolledUsers} users enrolled</p>\n              </div>\n              <Badge variant={biometricHealthScore >= 90 ? \"default\" : \"destructive\"}>\n                {biometricHealthScore}% uptime\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Financial Overview</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div>\n                <div className=\"text-2xl font-bold\">₹{(maintenanceCosts / 100000).toFixed(1)}L</div>\n                <p className=\"text-xs text-muted-foreground\">Total maintenance spend</p>\n              </div>\n              <div className=\"text-xs\">\n                Avg asset cost: ₹{avgAssetCost.toLocaleString('en-IN')}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Enhanced Analytics Charts */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {/* Asset Distribution by Type */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Asset Distribution by Type</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {Object.entries(assetTypeDistribution)\n              .sort(([,a], [,b]) => (b as number) - (a as number))\n              .map(([type, count]) => (\n                <div key={type} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-purple-500 rounded\"></div>\n                    <span className=\"text-sm capitalize\">{type}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-24 bg-muted rounded-full h-2\">\n                      <div \n                        className=\"bg-purple-500 h-2 rounded-full\" \n                        style={{width: `${totalAssets > 0 ? ((count as number) / totalAssets) * 100 : 0}%`}}\n                      ></div>\n                    </div>\n                    <span className=\"text-sm font-medium w-8 text-right\">{count as number}</span>\n                  </div>\n                </div>\n              ))}\n          </CardContent>\n        </Card>\n\n        {/* Asset Status Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Asset Status Overview</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {Object.entries(assetStatusDistribution).map(([status, count]) => {\n              const percentage = totalAssets > 0 ? ((count as number) / totalAssets) * 100 : 0\n              const statusColors = {\n                assigned: \"bg-blue-500\",\n                available: \"bg-green-500\", \n                maintenance: \"bg-yellow-500\",\n                retired: \"bg-red-500\"\n              }\n              const statusColor = statusColors[status as keyof typeof statusColors] || \"bg-gray-500\"\n              \n              return (\n                <div key={status} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"outline\" className={`${statusColor.replace('bg-', 'border-')} text-xs`}>\n                      {count as number}\n                    </Badge>\n                    <span className=\"text-sm capitalize\">{status}</span>\n                  </div>\n                  <span className=\"text-sm text-muted-foreground\">\n                    {percentage.toFixed(1)}%\n                  </span>\n                </div>\n              )\n            })}\n          </CardContent>\n        </Card>\n\n        {/* Location Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Assets by Location</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {Object.entries(locationDistribution)\n              .sort(([,a], [,b]) => (b as number) - (a as number))\n              .slice(0, 5) // Show top 5 locations\n              .map(([location, count]) => (\n                <div key={location} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"h-3 w-3 text-muted-foreground\" />\n                    <span className=\"text-sm\">{location}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-16 bg-muted rounded-full h-2\">\n                      <div \n                        className=\"bg-blue-500 h-2 rounded-full\" \n                        style={{width: `${totalAssets > 0 ? ((count as number) / totalAssets) * 100 : 0}%`}}\n                      ></div>\n                    </div>\n                    <span className=\"text-sm font-medium w-6 text-right\">{count as number}</span>\n                  </div>\n                </div>\n              ))}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activities and Quick Actions */}\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        {/* Recent Activities */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Clock className=\"h-5 w-5\" />\n              Recent Activities\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {recentAssignments.length > 0 ? (\n              recentAssignments.slice(0, 6).map((item) => (\n                <div key={item.id} className=\"flex items-start gap-3 p-3 rounded-lg bg-muted/50\">\n                  <div className=\"mt-0.5\">\n                    <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  </div>\n                  <div className=\"flex-1 space-y-1\">\n                    <p className=\"text-sm font-medium\">\n                      {item.asset?.assetId} assigned to {item.employee?.firstName} {item.employee?.lastName}\n                    </p>\n                    <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                      <span>{item.asset?.brand} {item.asset?.modelName}</span>\n                      <span>•</span>\n                      <span>{new Date(item.assignedDate).toLocaleDateString('en-IN')}</span>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-sm text-muted-foreground\">No recent activities</div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Asset Condition Analysis */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Shield className=\"h-5 w-5\" />\n              Asset Condition Analysis\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {Object.entries(assetConditions)\n              .sort(([,a], [,b]) => (b as number) - (a as number))\n              .map(([condition, count]) => {\n                const percentage = totalAssets > 0 ? ((count as number) / totalAssets) * 100 : 0\n                const conditionColors = {\n                  excellent: \"bg-green-500\",\n                  good: \"bg-blue-500\",\n                  fair: \"bg-yellow-500\", \n                  poor: \"bg-red-500\"\n                }\n                const conditionColor = conditionColors[condition as keyof typeof conditionColors] || \"bg-gray-500\"\n                \n                return (\n                  <div key={condition} className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm capitalize font-medium\">{condition}</span>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {count as number} assets ({percentage.toFixed(1)}%)\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div \n                        className={`${conditionColor} h-2 rounded-full`} \n                        style={{width: `${percentage}%`}}\n                      ></div>\n                    </div>\n                  </div>\n                )\n              })}\n            \n            {expiringSoon > 0 && (\n              <div className=\"mt-4 p-3 rounded-lg bg-yellow-50 border border-yellow-200\">\n                <div className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n                  <span className=\"text-sm font-medium text-yellow-800\">\n                    {expiringSoon} asset{expiringSoon > 1 ? 's' : ''} warranty expiring within 90 days\n                  </span>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">Common tasks and management actions</p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-3 md:grid-cols-2 lg:grid-cols-4\">\n            <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center gap-2\">\n              <Laptop className=\"h-5 w-5\" />\n              <div className=\"text-center\">\n                <div className=\"font-medium\">Add Asset</div>\n                <div className=\"text-xs text-muted-foreground\">Register new equipment</div>\n              </div>\n            </Button>\n            \n            <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              <div className=\"text-center\">\n                <div className=\"font-medium\">Assign Asset</div>\n                <div className=\"text-xs text-muted-foreground\">Assign to employee</div>\n              </div>\n            </Button>\n            \n            <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center gap-2\">\n              <Wrench className=\"h-5 w-5\" />\n              <div className=\"text-center\">\n                <div className=\"font-medium\">Schedule Maintenance</div>\n                <div className=\"text-xs text-muted-foreground\">Preventive service</div>\n              </div>\n            </Button>\n            \n            <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center gap-2\">\n              <Eye className=\"h-5 w-5\" />\n              <div className=\"text-center\">\n                <div className=\"font-medium\">View Reports</div>\n                <div className=\"text-xs text-muted-foreground\">Analytics & insights</div>\n              </div>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":23150},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/pages/employees.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Users, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  User,\n  MapPin,\n  Briefcase,\n  Phone,\n  Mail,\n  Calendar,\n  Badge as BadgeIcon,\n  Building2,\n  Laptop\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { useToast } from \"@/hooks/use-toast\"\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  active: \"bg-green-500\",\n  inactive: \"bg-red-500\",\n  on_leave: \"bg-yellow-500\",\n}\n\ninterface Employee {\n  id: number\n  employeeCode: string\n  firstName: string\n  lastName: string\n  department: string\n  designation: string\n  email: string\n  phone: string\n  status: \"active\" | \"inactive\" | \"on_leave\"\n  locationId: number | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  assetType: string\n  currentUserId: number | null\n}\n\ninterface Assignment {\n  assetId: string\n  employeeId: number\n  assignedDate: string\n  returnedDate: string | null\n}\n\nexport default function EmployeesPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [departmentFilter, setDepartmentFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Fetch data\n  const { data: employees, isLoading: employeesLoading } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  })\n\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  const { data: assets } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: assignments } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n  })\n\n  // Get unique departments for filter\n  const departments = [...new Set(employees?.map(emp => emp.department) || [])]\n\n  // Filter employees\n  const filteredEmployees = employees?.filter(employee => {\n    const matchesSearch = \n      employee.employeeCode.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.department.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.designation.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === \"all\" || employee.status === statusFilter\n    const matchesDepartment = departmentFilter === \"all\" || employee.department === departmentFilter\n    const matchesLocation = locationFilter === \"all\" || employee.locationId?.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesDepartment && matchesLocation\n  }) || []\n\n  // Create employee mutation\n  const createEmployeeMutation = useMutation({\n    mutationFn: async (employeeData: any) => {\n      const response = await fetch('/api/employees', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(employeeData),\n      })\n      if (!response.ok) throw new Error('Failed to create employee')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] })\n      toast({ title: \"Success\", description: \"Employee created successfully\" })\n      setIsCreateDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create employee\", variant: \"destructive\" })\n    }\n  })\n\n  // Update employee mutation  \n  const updateEmployeeMutation = useMutation({\n    mutationFn: async ({ employeeId, data }: { employeeId: number, data: any }) => {\n      const response = await fetch(`/api/employees/${employeeId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      })\n      if (!response.ok) throw new Error('Failed to update employee')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] })\n      toast({ title: \"Success\", description: \"Employee updated successfully\" })\n      setIsEditDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update employee\", variant: \"destructive\" })\n    }\n  })\n\n  // Delete employee mutation\n  const deleteEmployeeMutation = useMutation({\n    mutationFn: async (employeeId: number) => {\n      const response = await fetch(`/api/employees/${employeeId}`, {\n        method: 'DELETE',\n      })\n      if (!response.ok) throw new Error('Failed to delete employee')\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] })\n      toast({ title: \"Success\", description: \"Employee deleted successfully\" })\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete employee\", variant: \"destructive\" })\n    }\n  })\n\n  // Helper functions\n  const getLocationName = (locationId: number | null) => {\n    if (!locationId) return \"No location assigned\"\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown location\"\n  }\n\n  const getEmployeeAssets = (employeeId: number) => {\n    const activeAssignments = assignments?.filter(\n      assignment => assignment.employeeId === employeeId && !assignment.returnedDate\n    ) || []\n    \n    return activeAssignments.map(assignment => {\n      const asset = assets?.find(a => a.assetId === assignment.assetId)\n      return asset\n    }).filter(Boolean)\n  }\n\n  const handleCreateEmployee = (event: React.FormEvent) => {\n    event.preventDefault()\n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const employeeData = {\n      employeeCode: formData.get('employeeCode'),\n      firstName: formData.get('firstName'),\n      lastName: formData.get('lastName'),\n      department: formData.get('department'),\n      designation: formData.get('designation'),\n      email: formData.get('email'),\n      phone: formData.get('phone'),\n      status: formData.get('status'),\n      locationId: formData.get('locationId') ? parseInt(formData.get('locationId') as string) : null,\n    }\n\n    createEmployeeMutation.mutate(employeeData)\n  }\n\n  const handleUpdateEmployee = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedEmployee) return\n    \n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const employeeData = {\n      firstName: formData.get('firstName'),\n      lastName: formData.get('lastName'),\n      department: formData.get('department'),\n      designation: formData.get('designation'),\n      email: formData.get('email'),\n      phone: formData.get('phone'),\n      status: formData.get('status'),\n      locationId: formData.get('locationId') ? parseInt(formData.get('locationId') as string) : null,\n    }\n\n    updateEmployeeMutation.mutate({ employeeId: selectedEmployee.id, data: employeeData })\n  }\n\n  if (employeesLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Employees</h1>\n          <p className=\"text-muted-foreground\">\n            Manage BODYCRAFT staff across {locations?.length || 0} locations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Excel\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Employee\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Employee</DialogTitle>\n                <DialogDescription>\n                  Add a new employee to the BODYCRAFT workforce\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateEmployee} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"employeeCode\">Employee Code *</Label>\n                  <Input\n                    id=\"employeeCode\"\n                    name=\"employeeCode\"\n                    placeholder=\"BFC2024001\"\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\">First Name *</Label>\n                    <Input\n                      id=\"firstName\"\n                      name=\"firstName\"\n                      placeholder=\"John\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastName\">Last Name *</Label>\n                    <Input\n                      id=\"lastName\"\n                      name=\"lastName\"\n                      placeholder=\"Doe\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"department\">Department *</Label>\n                    <Select name=\"department\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select department\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"IT\">IT</SelectItem>\n                        <SelectItem value=\"Sales\">Sales</SelectItem>\n                        <SelectItem value=\"Marketing\">Marketing</SelectItem>\n                        <SelectItem value=\"Operations\">Operations</SelectItem>\n                        <SelectItem value=\"Finance\">Finance</SelectItem>\n                        <SelectItem value=\"HR\">HR</SelectItem>\n                        <SelectItem value=\"Management\">Management</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"designation\">Designation *</Label>\n                    <Input\n                      id=\"designation\"\n                      name=\"designation\"\n                      placeholder=\"Software Engineer, Sales Manager...\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address *</Label>\n                    <Input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      placeholder=\"john.doe@bodycraft.com\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone Number *</Label>\n                    <Input\n                      id=\"phone\"\n                      name=\"phone\"\n                      placeholder=\"+91 9876543210\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"locationId\">Location</Label>\n                    <Select name=\"locationId\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select location\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {locations?.map(location => (\n                          <SelectItem key={location.id} value={location.id.toString()}>\n                            {location.outletName}, {location.city}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"status\">Status</Label>\n                    <Select name=\"status\" defaultValue=\"active\">\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"inactive\">Inactive</SelectItem>\n                        <SelectItem value=\"on_leave\">On Leave</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createEmployeeMutation.isPending}>\n                    {createEmployeeMutation.isPending ? \"Creating...\" : \"Create Employee\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Employees</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{employees?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across {departments.length} departments\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active</CardTitle>\n            <BadgeIcon className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {employees?.filter(emp => emp.status === 'active').length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently working\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">With Assets</CardTitle>\n            <Laptop className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {employees?.filter(emp => \n                assignments?.some(assignment => \n                  assignment.employeeId === emp.id && !assignment.returnedDate\n                )\n              ).length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Have assigned assets\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Departments</CardTitle>\n            <Building2 className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{departments.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Active departments\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Employees</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by Name, Employee Code, Email, Department...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  <SelectItem value=\"on_leave\">On Leave</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Department\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Departments</SelectItem>\n                  {departments.map(dept => (\n                    <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredEmployees.length} of {employees?.length || 0} employees\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Employees Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Employee</TableHead>\n                <TableHead>Department</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Contact</TableHead>\n                <TableHead>Assigned Assets</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredEmployees.map((employee) => {\n                const employeeAssets = getEmployeeAssets(employee.id)\n                return (\n                  <TableRow key={employee.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <User className=\"h-8 w-8 p-1.5 bg-muted rounded-full\" />\n                        <div>\n                          <div className=\"font-medium\">\n                            {employee.firstName} {employee.lastName}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground font-mono\">\n                            {employee.employeeCode}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <Badge variant=\"outline\">{employee.department}</Badge>\n                        <div className=\"text-sm text-muted-foreground mt-1\">\n                          {employee.designation}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className={`w-2 h-2 rounded-full ${statusColors[employee.status]}`}\n                        />\n                        <span className=\"capitalize\">{employee.status.replace('_', ' ')}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"h-3 w-3 text-muted-foreground\" />\n                        {getLocationName(employee.locationId)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center gap-1 text-sm\">\n                          <Mail className=\"h-3 w-3 text-muted-foreground\" />\n                          {employee.email}\n                        </div>\n                        <div className=\"flex items-center gap-1 text-sm\">\n                          <Phone className=\"h-3 w-3 text-muted-foreground\" />\n                          {employee.phone}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        {employeeAssets?.length > 0 ? (\n                          employeeAssets.map((asset, index) => (\n                            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                              {asset.assetId}\n                            </Badge>\n                          ))\n                        ) : (\n                          <span className=\"text-sm text-muted-foreground\">No assets</span>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedEmployee(employee)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedEmployee(employee)\n                              setIsEditDialogOpen(true)\n                            }}\n                          >\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit Employee\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem\n                            onClick={() => deleteEmployeeMutation.mutate(employee.id)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete Employee\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Employee Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Employee Details</DialogTitle>\n            <DialogDescription>\n              Complete information for {selectedEmployee?.firstName} {selectedEmployee?.lastName}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedEmployee && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Employee Code</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded font-mono\">\n                    {selectedEmployee.employeeCode}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Full Name</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedEmployee.firstName} {selectedEmployee.lastName}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Department</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedEmployee.department}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Designation</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedEmployee.designation}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Email</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedEmployee.email}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Phone</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedEmployee.phone}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded flex items-center gap-2\">\n                    <div className={`w-2 h-2 rounded-full ${statusColors[selectedEmployee.status]}`} />\n                    <span className=\"capitalize\">{selectedEmployee.status.replace('_', ' ')}</span>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Location</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getLocationName(selectedEmployee.locationId)}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Assigned Assets</Label>\n                <div className=\"p-2 bg-muted rounded\">\n                  {getEmployeeAssets(selectedEmployee.id)?.length > 0 ? (\n                    <div className=\"flex flex-wrap gap-2\">\n                      {getEmployeeAssets(selectedEmployee.id).map((asset, index) => (\n                        <Badge key={index} variant=\"secondary\">\n                          {asset.assetId} ({asset.brand} {asset.modelName})\n                        </Badge>\n                      ))}\n                    </div>\n                  ) : (\n                    <span className=\"text-sm text-muted-foreground\">No assets assigned</span>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Employee Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Employee</DialogTitle>\n            <DialogDescription>\n              Update information for {selectedEmployee?.firstName} {selectedEmployee?.lastName}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedEmployee && (\n            <form onSubmit={handleUpdateEmployee} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-firstName\">First Name *</Label>\n                  <Input\n                    id=\"edit-firstName\"\n                    name=\"firstName\"\n                    defaultValue={selectedEmployee.firstName}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-lastName\">Last Name *</Label>\n                  <Input\n                    id=\"edit-lastName\"\n                    name=\"lastName\"\n                    defaultValue={selectedEmployee.lastName}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-department\">Department *</Label>\n                  <Select name=\"department\" defaultValue={selectedEmployee.department} required>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"IT\">IT</SelectItem>\n                      <SelectItem value=\"Sales\">Sales</SelectItem>\n                      <SelectItem value=\"Marketing\">Marketing</SelectItem>\n                      <SelectItem value=\"Operations\">Operations</SelectItem>\n                      <SelectItem value=\"Finance\">Finance</SelectItem>\n                      <SelectItem value=\"HR\">HR</SelectItem>\n                      <SelectItem value=\"Management\">Management</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-designation\">Designation *</Label>\n                  <Input\n                    id=\"edit-designation\"\n                    name=\"designation\"\n                    defaultValue={selectedEmployee.designation}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-email\">Email Address *</Label>\n                  <Input\n                    id=\"edit-email\"\n                    name=\"email\"\n                    type=\"email\"\n                    defaultValue={selectedEmployee.email}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-phone\">Phone Number *</Label>\n                  <Input\n                    id=\"edit-phone\"\n                    name=\"phone\"\n                    defaultValue={selectedEmployee.phone}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-locationId\">Location</Label>\n                  <Select name=\"locationId\" defaultValue={selectedEmployee.locationId?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select location\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {locations?.map(location => (\n                        <SelectItem key={location.id} value={location.id.toString()}>\n                          {location.outletName}, {location.city}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-status\">Status</Label>\n                  <Select name=\"status\" defaultValue={selectedEmployee.status}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"inactive\">Inactive</SelectItem>\n                      <SelectItem value=\"on_leave\">On Leave</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsEditDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateEmployeeMutation.isPending}>\n                  {updateEmployeeMutation.isPending ? \"Updating...\" : \"Update Employee\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":36261},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/pages/locations.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  MapPin, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Building2,\n  Users,\n  Laptop,\n  Phone,\n  Mail,\n  User,\n  Package,\n  BarChart3,\n  Clock\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n  address: string\n  managerName: string\n  contactDetails: string\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  assetType: string\n  status: \"available\" | \"assigned\" | \"maintenance\" | \"retired\"\n  locationId: number | null\n}\n\ninterface Employee {\n  id: number\n  employeeCode: string\n  firstName: string\n  lastName: string\n  department: string\n  locationId: number | null\n  status: \"active\" | \"inactive\" | \"on_leave\"\n}\n\ninterface Assignment {\n  assetId: string\n  employeeId: number\n  assignedDate: string\n  returnedDate: string | null\n}\n\nexport default function LocationsPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [stateFilter, setStateFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedLocation, setSelectedLocation] = useState<Location | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Fetch data\n  const { data: locations, isLoading: locationsLoading } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  const { data: assets } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: employees } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  })\n\n  const { data: assignments } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n  })\n\n  // Get unique states for filter\n  const states = [...new Set(locations?.map(loc => loc.state) || [])]\n\n  // Filter locations\n  const filteredLocations = locations?.filter(location => {\n    const matchesSearch = \n      location.outletName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      location.city.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      location.managerName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      location.address.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesState = stateFilter === \"all\" || location.state === stateFilter\n    \n    return matchesSearch && matchesState\n  }) || []\n\n  // Create location mutation\n  const createLocationMutation = useMutation({\n    mutationFn: async (locationData: any) => {\n      const response = await fetch('/api/locations', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(locationData),\n      })\n      if (!response.ok) throw new Error('Failed to create location')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/locations'] })\n      toast({ title: \"Success\", description: \"Location created successfully\" })\n      setIsCreateDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create location\", variant: \"destructive\" })\n    }\n  })\n\n  // Update location mutation  \n  const updateLocationMutation = useMutation({\n    mutationFn: async ({ locationId, data }: { locationId: number, data: any }) => {\n      const response = await fetch(`/api/locations/${locationId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      })\n      if (!response.ok) throw new Error('Failed to update location')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/locations'] })\n      toast({ title: \"Success\", description: \"Location updated successfully\" })\n      setIsEditDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update location\", variant: \"destructive\" })\n    }\n  })\n\n  // Delete location mutation\n  const deleteLocationMutation = useMutation({\n    mutationFn: async (locationId: number) => {\n      const response = await fetch(`/api/locations/${locationId}`, {\n        method: 'DELETE',\n      })\n      if (!response.ok) throw new Error('Failed to delete location')\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/locations'] })\n      toast({ title: \"Success\", description: \"Location deleted successfully\" })\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete location\", variant: \"destructive\" })\n    }\n  })\n\n  // Helper functions\n  const getLocationAssets = (locationId: number) => {\n    return assets?.filter(asset => asset.locationId === locationId) || []\n  }\n\n  const getLocationEmployees = (locationId: number) => {\n    return employees?.filter(employee => employee.locationId === locationId) || []\n  }\n\n  const getActiveAssignments = (locationId: number) => {\n    const locationEmployees = getLocationEmployees(locationId)\n    const employeeIds = locationEmployees.map(emp => emp.id)\n    return assignments?.filter(assignment => \n      employeeIds.includes(assignment.employeeId) && !assignment.returnedDate\n    ) || []\n  }\n\n  const getAssetTypeDistribution = (locationId: number) => {\n    const locationAssets = getLocationAssets(locationId)\n    const distribution: Record<string, number> = {}\n    locationAssets.forEach(asset => {\n      distribution[asset.assetType] = (distribution[asset.assetType] || 0) + 1\n    })\n    return distribution\n  }\n\n  const handleCreateLocation = (event: React.FormEvent) => {\n    event.preventDefault()\n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const locationData = {\n      outletName: formData.get('outletName'),\n      city: formData.get('city'),\n      state: formData.get('state'),\n      address: formData.get('address'),\n      managerName: formData.get('managerName'),\n      contactDetails: formData.get('contactDetails'),\n    }\n\n    createLocationMutation.mutate(locationData)\n  }\n\n  const handleUpdateLocation = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedLocation) return\n    \n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const locationData = {\n      outletName: formData.get('outletName'),\n      city: formData.get('city'),\n      state: formData.get('state'),\n      address: formData.get('address'),\n      managerName: formData.get('managerName'),\n      contactDetails: formData.get('contactDetails'),\n    }\n\n    updateLocationMutation.mutate({ locationId: selectedLocation.id, data: locationData })\n  }\n\n  if (locationsLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Locations</h1>\n          <p className=\"text-muted-foreground\">\n            Manage BODYCRAFT outlets across India with location-specific analytics\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Excel\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Location\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Location</DialogTitle>\n                <DialogDescription>\n                  Add a new BODYCRAFT outlet location\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateLocation} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"outletName\">Outlet Name *</Label>\n                    <Input\n                      id=\"outletName\"\n                      name=\"outletName\"\n                      placeholder=\"JP Nagar Outlet\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"city\">City *</Label>\n                    <Input\n                      id=\"city\"\n                      name=\"city\"\n                      placeholder=\"Bangalore\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"state\">State *</Label>\n                  <Select name=\"state\" required>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select state\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Karnataka\">Karnataka</SelectItem>\n                      <SelectItem value=\"Tamil Nadu\">Tamil Nadu</SelectItem>\n                      <SelectItem value=\"Andhra Pradesh\">Andhra Pradesh</SelectItem>\n                      <SelectItem value=\"Telangana\">Telangana</SelectItem>\n                      <SelectItem value=\"Kerala\">Kerala</SelectItem>\n                      <SelectItem value=\"Maharashtra\">Maharashtra</SelectItem>\n                      <SelectItem value=\"Gujarat\">Gujarat</SelectItem>\n                      <SelectItem value=\"Delhi\">Delhi</SelectItem>\n                      <SelectItem value=\"Punjab\">Punjab</SelectItem>\n                      <SelectItem value=\"Haryana\">Haryana</SelectItem>\n                      <SelectItem value=\"Uttar Pradesh\">Uttar Pradesh</SelectItem>\n                      <SelectItem value=\"Rajasthan\">Rajasthan</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Complete Address *</Label>\n                  <Input\n                    id=\"address\"\n                    name=\"address\"\n                    placeholder=\"123 Main Street, JP Nagar, Bangalore\"\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"managerName\">Manager Name *</Label>\n                    <Input\n                      id=\"managerName\"\n                      name=\"managerName\"\n                      placeholder=\"John Doe\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"contactDetails\">Contact Details *</Label>\n                    <Input\n                      id=\"contactDetails\"\n                      name=\"contactDetails\"\n                      placeholder=\"+91 9876543210, manager@bodycraft.com\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createLocationMutation.isPending}>\n                    {createLocationMutation.isPending ? \"Creating...\" : \"Create Location\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Outlets</CardTitle>\n            <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{locations?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across {states.length} states\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Assets</CardTitle>\n            <Package className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{assets?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Distributed across locations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Employees</CardTitle>\n            <Users className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{employees?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Working across locations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Assignments</CardTitle>\n            <Laptop className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {assignments?.filter(a => !a.returnedDate).length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently active\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Locations</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by Outlet Name, City, Manager Name...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={stateFilter} onValueChange={setStateFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"State\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All States</SelectItem>\n                  {states.map(state => (\n                    <SelectItem key={state} value={state}>{state}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredLocations.length} of {locations?.length || 0} locations\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Locations Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Location</TableHead>\n                <TableHead>Manager</TableHead>\n                <TableHead>Assets</TableHead>\n                <TableHead>Employees</TableHead>\n                <TableHead>Active Assignments</TableHead>\n                <TableHead>Contact</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredLocations.map((location) => {\n                const locationAssets = getLocationAssets(location.id)\n                const locationEmployees = getLocationEmployees(location.id)\n                const activeAssignments = getActiveAssignments(location.id)\n                \n                return (\n                  <TableRow key={location.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <Building2 className=\"h-8 w-8 p-1.5 bg-muted rounded-full\" />\n                        <div>\n                          <div className=\"font-medium\">{location.outletName}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {location.city}, {location.state}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <User className=\"h-3 w-3 text-muted-foreground\" />\n                        {location.managerName}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-col gap-1\">\n                        <Badge variant=\"outline\" className=\"w-fit\">\n                          {locationAssets.length} Total\n                        </Badge>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {locationAssets.filter(a => a.status === 'available').length} Available\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-col gap-1\">\n                        <Badge variant=\"outline\" className=\"w-fit\">\n                          {locationEmployees.length} Total\n                        </Badge>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {locationEmployees.filter(e => e.status === 'active').length} Active\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-2 h-2 rounded-full bg-green-500\" />\n                        <span>{activeAssignments.length}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {location.contactDetails}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedLocation(location)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedLocation(location)\n                              setIsEditDialogOpen(true)\n                            }}\n                          >\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit Location\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <BarChart3 className=\"mr-2 h-4 w-4\" />\n                            View Analytics\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem\n                            onClick={() => deleteLocationMutation.mutate(location.id)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete Location\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Location Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle>Location Analytics - {selectedLocation?.outletName}</DialogTitle>\n            <DialogDescription>\n              Comprehensive overview of assets, employees, and activities\n            </DialogDescription>\n          </DialogHeader>\n          {selectedLocation && (\n            <div className=\"space-y-6\">\n              {/* Basic Info */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Location Details</Label>\n                  <div className=\"text-sm p-3 bg-muted rounded\">\n                    <div className=\"font-medium\">{selectedLocation.outletName}</div>\n                    <div>{selectedLocation.city}, {selectedLocation.state}</div>\n                    <div className=\"text-xs text-muted-foreground mt-1\">\n                      {selectedLocation.address}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Management</Label>\n                  <div className=\"text-sm p-3 bg-muted rounded\">\n                    <div className=\"font-medium\">{selectedLocation.managerName}</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {selectedLocation.contactDetails}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Statistics Cards */}\n              <div className=\"grid grid-cols-4 gap-4\">\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <Package className=\"h-4 w-4 text-blue-500\" />\n                      <div>\n                        <div className=\"text-lg font-bold\">\n                          {getLocationAssets(selectedLocation.id).length}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Assets</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <Users className=\"h-4 w-4 text-green-500\" />\n                      <div>\n                        <div className=\"text-lg font-bold\">\n                          {getLocationEmployees(selectedLocation.id).length}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Employees</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <Laptop className=\"h-4 w-4 text-purple-500\" />\n                      <div>\n                        <div className=\"text-lg font-bold\">\n                          {getActiveAssignments(selectedLocation.id).length}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Active</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className=\"h-4 w-4 text-yellow-500\" />\n                      <div>\n                        <div className=\"text-lg font-bold\">\n                          {getLocationAssets(selectedLocation.id).filter(a => a.status === 'available').length}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Available</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Asset Type Distribution */}\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Asset Distribution by Type</Label>\n                <div className=\"space-y-2\">\n                  {Object.entries(getAssetTypeDistribution(selectedLocation.id)).map(([type, count]) => {\n                    const total = getLocationAssets(selectedLocation.id).length\n                    const percentage = total > 0 ? (count / total) * 100 : 0\n                    return (\n                      <div key={type} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"text-sm\">{type}</div>\n                          <Badge variant=\"secondary\">{count}</Badge>\n                        </div>\n                        <div className=\"flex items-center gap-2 w-32\">\n                          <Progress value={percentage} className=\"h-2\" />\n                          <div className=\"text-xs text-muted-foreground w-10\">\n                            {percentage.toFixed(0)}%\n                          </div>\n                        </div>\n                      </div>\n                    )\n                  })}\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Location Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Location</DialogTitle>\n            <DialogDescription>\n              Update information for {selectedLocation?.outletName}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedLocation && (\n            <form onSubmit={handleUpdateLocation} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-outletName\">Outlet Name *</Label>\n                  <Input\n                    id=\"edit-outletName\"\n                    name=\"outletName\"\n                    defaultValue={selectedLocation.outletName}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-city\">City *</Label>\n                  <Input\n                    id=\"edit-city\"\n                    name=\"city\"\n                    defaultValue={selectedLocation.city}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-state\">State *</Label>\n                <Select name=\"state\" defaultValue={selectedLocation.state} required>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Karnataka\">Karnataka</SelectItem>\n                    <SelectItem value=\"Tamil Nadu\">Tamil Nadu</SelectItem>\n                    <SelectItem value=\"Andhra Pradesh\">Andhra Pradesh</SelectItem>\n                    <SelectItem value=\"Telangana\">Telangana</SelectItem>\n                    <SelectItem value=\"Kerala\">Kerala</SelectItem>\n                    <SelectItem value=\"Maharashtra\">Maharashtra</SelectItem>\n                    <SelectItem value=\"Gujarat\">Gujarat</SelectItem>\n                    <SelectItem value=\"Delhi\">Delhi</SelectItem>\n                    <SelectItem value=\"Punjab\">Punjab</SelectItem>\n                    <SelectItem value=\"Haryana\">Haryana</SelectItem>\n                    <SelectItem value=\"Uttar Pradesh\">Uttar Pradesh</SelectItem>\n                    <SelectItem value=\"Rajasthan\">Rajasthan</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-address\">Complete Address *</Label>\n                <Input\n                  id=\"edit-address\"\n                  name=\"address\"\n                  defaultValue={selectedLocation.address}\n                  required\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-managerName\">Manager Name *</Label>\n                  <Input\n                    id=\"edit-managerName\"\n                    name=\"managerName\"\n                    defaultValue={selectedLocation.managerName}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-contactDetails\">Contact Details *</Label>\n                  <Input\n                    id=\"edit-contactDetails\"\n                    name=\"contactDetails\"\n                    defaultValue={selectedLocation.contactDetails}\n                    required\n                  />\n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsEditDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateLocationMutation.isPending}>\n                  {updateLocationMutation.isPending ? \"Updating...\" : \"Update Location\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":32640},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/pages/maintenance.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Wrench, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Calendar,\n  DollarSign,\n  User,\n  Package,\n  Clock,\n  CheckCircle,\n  AlertTriangle,\n  XCircle,\n  Laptop,\n  MapPin,\n  FileText,\n  Settings\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface Maintenance {\n  id: number\n  assetId: string\n  maintenanceType: \"preventive\" | \"corrective\"\n  description: string\n  scheduledDate: string\n  completedDate: string | null\n  cost: number | null\n  technicianName: string | null\n  partsReplaced: string | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  assetType: string\n  status: \"available\" | \"assigned\" | \"maintenance\" | \"retired\"\n  locationId: number | null\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  scheduled: \"bg-blue-500\",\n  in_progress: \"bg-yellow-500\", \n  completed: \"bg-green-500\",\n  overdue: \"bg-red-500\"\n}\n\n// Maintenance type color mapping\nconst typeColors: Record<string, string> = {\n  preventive: \"bg-blue-500\",\n  corrective: \"bg-orange-500\"\n}\n\nexport default function MaintenancePage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedMaintenance, setSelectedMaintenance] = useState<Maintenance | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [isCompleteDialogOpen, setIsCompleteDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Fetch data\n  const { data: maintenance, isLoading: maintenanceLoading } = useQuery<Maintenance[]>({\n    queryKey: [\"/api/maintenance\"],\n  })\n\n  const { data: assets } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Helper function to get maintenance status\n  const getMaintenanceStatus = (maintenance: Maintenance) => {\n    if (maintenance.completedDate) return \"completed\"\n    \n    const scheduledDate = new Date(maintenance.scheduledDate)\n    const today = new Date()\n    today.setHours(0, 0, 0, 0)\n    \n    if (scheduledDate < today) return \"overdue\"\n    if (scheduledDate.toDateString() === today.toDateString()) return \"in_progress\"\n    return \"scheduled\"\n  }\n\n  // Filter maintenance records\n  const filteredMaintenance = maintenance?.filter(record => {\n    const asset = assets?.find(a => a.assetId === record.assetId)\n    const location = locations?.find(l => l.id === asset?.locationId)\n    const status = getMaintenanceStatus(record)\n    \n    const matchesSearch = \n      record.assetId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset?.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset?.modelName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      record.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      record.technicianName?.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === \"all\" || status === statusFilter\n    const matchesType = typeFilter === \"all\" || record.maintenanceType === typeFilter\n    const matchesLocation = locationFilter === \"all\" || asset?.locationId?.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesType && matchesLocation\n  }) || []\n\n  // Create maintenance mutation\n  const createMaintenanceMutation = useMutation({\n    mutationFn: async (maintenanceData: any) => {\n      const response = await fetch('/api/maintenance', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(maintenanceData),\n      })\n      if (!response.ok) throw new Error('Failed to create maintenance record')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/maintenance'] })\n      toast({ title: \"Success\", description: \"Maintenance scheduled successfully\" })\n      setIsCreateDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to schedule maintenance\", variant: \"destructive\" })\n    }\n  })\n\n  // Update maintenance mutation  \n  const updateMaintenanceMutation = useMutation({\n    mutationFn: async ({ maintenanceId, data }: { maintenanceId: number, data: any }) => {\n      const response = await fetch(`/api/maintenance/${maintenanceId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      })\n      if (!response.ok) throw new Error('Failed to update maintenance record')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/maintenance'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Maintenance updated successfully\" })\n      setIsEditDialogOpen(false)\n      setIsCompleteDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update maintenance\", variant: \"destructive\" })\n    }\n  })\n\n  // Delete maintenance mutation\n  const deleteMaintenanceMutation = useMutation({\n    mutationFn: async (maintenanceId: number) => {\n      const response = await fetch(`/api/maintenance/${maintenanceId}`, {\n        method: 'DELETE',\n      })\n      if (!response.ok) throw new Error('Failed to delete maintenance record')\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/maintenance'] })\n      toast({ title: \"Success\", description: \"Maintenance record deleted successfully\" })\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete maintenance record\", variant: \"destructive\" })\n    }\n  })\n\n  // Helper functions\n  const getAssetInfo = (assetId: string) => {\n    return assets?.find(asset => asset.assetId === assetId)\n  }\n\n  const getLocationName = (locationId: number | null) => {\n    if (!locationId) return \"No location\"\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown\"\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const formatCurrency = (amount: number | null) => {\n    if (amount === null) return \"Not specified\"\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR'\n    }).format(amount)\n  }\n\n  const handleCreateMaintenance = (event: React.FormEvent) => {\n    event.preventDefault()\n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const maintenanceData = {\n      assetId: formData.get('assetId'),\n      maintenanceType: formData.get('maintenanceType'),\n      description: formData.get('description'),\n      scheduledDate: formData.get('scheduledDate'),\n      cost: formData.get('cost') ? parseFloat(formData.get('cost') as string) : null,\n      technicianName: formData.get('technicianName') || null,\n      partsReplaced: formData.get('partsReplaced') || null,\n    }\n\n    createMaintenanceMutation.mutate(maintenanceData)\n  }\n\n  const handleUpdateMaintenance = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedMaintenance) return\n    \n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const maintenanceData = {\n      description: formData.get('description'),\n      scheduledDate: formData.get('scheduledDate'),\n      cost: formData.get('cost') ? parseFloat(formData.get('cost') as string) : null,\n      technicianName: formData.get('technicianName') || null,\n      partsReplaced: formData.get('partsReplaced') || null,\n    }\n\n    updateMaintenanceMutation.mutate({ maintenanceId: selectedMaintenance.id, data: maintenanceData })\n  }\n\n  const handleCompleteMaintenance = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedMaintenance) return\n    \n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const maintenanceData = {\n      completedDate: new Date().toISOString(),\n      cost: formData.get('cost') ? parseFloat(formData.get('cost') as string) : selectedMaintenance.cost,\n      technicianName: formData.get('technicianName') || selectedMaintenance.technicianName,\n      partsReplaced: formData.get('partsReplaced') || selectedMaintenance.partsReplaced,\n    }\n\n    updateMaintenanceMutation.mutate({ maintenanceId: selectedMaintenance.id, data: maintenanceData })\n  }\n\n  if (maintenanceLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const totalCost = maintenance?.reduce((sum, record) => sum + (record.cost || 0), 0) || 0\n  const pendingMaintenance = maintenance?.filter(record => !record.completedDate).length || 0\n  const overdueMaintenance = maintenance?.filter(record => getMaintenanceStatus(record) === \"overdue\").length || 0\n  const completedMaintenance = maintenance?.filter(record => record.completedDate).length || 0\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Maintenance</h1>\n          <p className=\"text-muted-foreground\">\n            Schedule and track asset maintenance across all locations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Excel\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Schedule Maintenance\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Schedule Maintenance</DialogTitle>\n                <DialogDescription>\n                  Create a new maintenance record for an asset\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateMaintenance} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assetId\">Asset *</Label>\n                    <Select name=\"assetId\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select asset\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {assets?.map(asset => (\n                          <SelectItem key={asset.assetId} value={asset.assetId}>\n                            {asset.assetId} - {asset.brand} {asset.modelName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"maintenanceType\">Type *</Label>\n                    <Select name=\"maintenanceType\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"preventive\">Preventive</SelectItem>\n                        <SelectItem value=\"corrective\">Corrective</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Description *</Label>\n                  <Textarea\n                    id=\"description\"\n                    name=\"description\"\n                    placeholder=\"Describe the maintenance work to be performed\"\n                    rows={3}\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"scheduledDate\">Scheduled Date *</Label>\n                    <Input\n                      id=\"scheduledDate\"\n                      name=\"scheduledDate\"\n                      type=\"date\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"cost\">Estimated Cost</Label>\n                    <Input\n                      id=\"cost\"\n                      name=\"cost\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"0.00\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"technicianName\">Technician Name</Label>\n                    <Input\n                      id=\"technicianName\"\n                      name=\"technicianName\"\n                      placeholder=\"John Doe, ABC Services\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"partsReplaced\">Expected Parts</Label>\n                    <Input\n                      id=\"partsReplaced\"\n                      name=\"partsReplaced\"\n                      placeholder=\"Hard drive, RAM, etc.\"\n                    />\n                  </div>\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createMaintenanceMutation.isPending}>\n                    {createMaintenanceMutation.isPending ? \"Scheduling...\" : \"Schedule Maintenance\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Maintenance</CardTitle>\n            <Wrench className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{maintenance?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              All maintenance records\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n            <Clock className=\"h-4 w-4 text-yellow-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{pendingMaintenance}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Not yet completed\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Overdue</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{overdueMaintenance}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Past due date\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Cost</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatCurrency(totalCost)}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              All maintenance costs\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Maintenance</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by Asset ID, Brand, Description, Technician...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                  <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"overdue\">Overdue</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"preventive\">Preventive</SelectItem>\n                  <SelectItem value=\"corrective\">Corrective</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredMaintenance.length} of {maintenance?.length || 0} maintenance records\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Maintenance Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Asset</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Description</TableHead>\n                <TableHead>Scheduled Date</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Cost</TableHead>\n                <TableHead>Technician</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredMaintenance.map((record) => {\n                const asset = getAssetInfo(record.assetId)\n                const status = getMaintenanceStatus(record)\n                \n                return (\n                  <TableRow key={record.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <Laptop className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">{record.assetId}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {asset?.brand} {asset?.modelName}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className={`w-2 h-2 rounded-full ${typeColors[record.maintenanceType]}`}\n                        />\n                        <span className=\"capitalize\">{record.maintenanceType}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"max-w-xs\">\n                        <div className=\"text-sm truncate\">{record.description}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {getLocationName(asset?.locationId)}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                        {formatDate(record.scheduledDate)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className={`w-2 h-2 rounded-full ${statusColors[status]}`}\n                        />\n                        <span className=\"capitalize\">{status.replace('_', ' ')}</span>\n                        {record.completedDate && (\n                          <div className=\"text-xs text-muted-foreground\">\n                            {formatDate(record.completedDate)}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {formatCurrency(record.cost)}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <User className=\"h-3 w-3 text-muted-foreground\" />\n                        {record.technicianName || \"Not assigned\"}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedMaintenance(record)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedMaintenance(record)\n                              setIsEditDialogOpen(true)\n                            }}\n                          >\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit Maintenance\n                          </DropdownMenuItem>\n                          {!record.completedDate && (\n                            <DropdownMenuItem\n                              onClick={() => {\n                                setSelectedMaintenance(record)\n                                setIsCompleteDialogOpen(true)\n                              }}\n                            >\n                              <CheckCircle className=\"mr-2 h-4 w-4\" />\n                              Mark Complete\n                            </DropdownMenuItem>\n                          )}\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem\n                            onClick={() => deleteMaintenanceMutation.mutate(record.id)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete Record\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Maintenance Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Maintenance Details</DialogTitle>\n            <DialogDescription>\n              Complete maintenance record information\n            </DialogDescription>\n          </DialogHeader>\n          {selectedMaintenance && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Asset</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedMaintenance.assetId}\n                    <div className=\"text-xs text-muted-foreground\">\n                      {getAssetInfo(selectedMaintenance.assetId)?.brand} {getAssetInfo(selectedMaintenance.assetId)?.modelName}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Type</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded capitalize\">\n                    {selectedMaintenance.maintenanceType}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Description</Label>\n                <div className=\"text-sm p-2 bg-muted rounded\">\n                  {selectedMaintenance.description}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Scheduled Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDate(selectedMaintenance.scheduledDate)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Completed Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedMaintenance.completedDate ? formatDate(selectedMaintenance.completedDate) : \"Not completed\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Cost</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatCurrency(selectedMaintenance.cost)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Technician</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedMaintenance.technicianName || \"Not assigned\"}\n                  </div>\n                </div>\n              </div>\n\n              {selectedMaintenance.partsReplaced && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Parts Replaced</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedMaintenance.partsReplaced}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Maintenance Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Maintenance</DialogTitle>\n            <DialogDescription>\n              Update maintenance information for {selectedMaintenance?.assetId}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedMaintenance && (\n            <form onSubmit={handleUpdateMaintenance} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-description\">Description *</Label>\n                <Textarea\n                  id=\"edit-description\"\n                  name=\"description\"\n                  defaultValue={selectedMaintenance.description}\n                  rows={3}\n                  required\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-scheduledDate\">Scheduled Date *</Label>\n                  <Input\n                    id=\"edit-scheduledDate\"\n                    name=\"scheduledDate\"\n                    type=\"date\"\n                    defaultValue={selectedMaintenance.scheduledDate}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-cost\">Cost</Label>\n                  <Input\n                    id=\"edit-cost\"\n                    name=\"cost\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    defaultValue={selectedMaintenance.cost?.toString() || \"\"}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-technicianName\">Technician Name</Label>\n                  <Input\n                    id=\"edit-technicianName\"\n                    name=\"technicianName\"\n                    defaultValue={selectedMaintenance.technicianName || \"\"}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-partsReplaced\">Parts Replaced</Label>\n                  <Input\n                    id=\"edit-partsReplaced\"\n                    name=\"partsReplaced\"\n                    defaultValue={selectedMaintenance.partsReplaced || \"\"}\n                  />\n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsEditDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateMaintenanceMutation.isPending}>\n                  {updateMaintenanceMutation.isPending ? \"Updating...\" : \"Update Maintenance\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Complete Maintenance Dialog */}\n      <Dialog open={isCompleteDialogOpen} onOpenChange={setIsCompleteDialogOpen}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Complete Maintenance</DialogTitle>\n            <DialogDescription>\n              Mark maintenance as completed for {selectedMaintenance?.assetId}\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleCompleteMaintenance} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"complete-cost\">Final Cost</Label>\n                <Input\n                  id=\"complete-cost\"\n                  name=\"cost\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  defaultValue={selectedMaintenance?.cost?.toString() || \"\"}\n                  placeholder=\"Final maintenance cost\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"complete-technicianName\">Technician Name</Label>\n                <Input\n                  id=\"complete-technicianName\"\n                  name=\"technicianName\"\n                  defaultValue={selectedMaintenance?.technicianName || \"\"}\n                  placeholder=\"Who performed the work\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"complete-partsReplaced\">Parts Replaced</Label>\n              <Textarea\n                id=\"complete-partsReplaced\"\n                name=\"partsReplaced\"\n                defaultValue={selectedMaintenance?.partsReplaced || \"\"}\n                placeholder=\"List all parts that were replaced\"\n                rows={3}\n              />\n            </div>\n\n            <DialogFooter>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setIsCompleteDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={updateMaintenanceMutation.isPending}>\n                {updateMaintenanceMutation.isPending ? \"Completing...\" : \"Mark Complete\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":36371},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/pages/reports.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  FileText, \n  Plus, \n  Search, \n  Download,\n  Calendar,\n  Filter,\n  BarChart3,\n  PieChart,\n  LineChart,\n  TrendingUp,\n  Clock,\n  Users,\n  Laptop,\n  MapPin,\n  Wrench,\n  Building,\n  Eye,\n  Edit,\n  Trash2,\n  Play,\n  Settings,\n  Save\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { useToast } from \"@/hooks/use-toast\"\n\n// TypeScript interfaces\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\ninterface ReportTemplate {\n  id: string\n  name: string\n  description: string\n  category: \"assets\" | \"maintenance\" | \"assignments\" | \"locations\" | \"compliance\"\n  icon: any\n  color: string\n  fields: string[]\n  filters: string[]\n  lastRun?: string\n  totalRuns: number\n}\n\ninterface CustomReport {\n  id: string\n  name: string\n  description: string\n  entity: \"assets\" | \"employees\" | \"assignments\" | \"maintenance\" | \"locations\"\n  fields: string[]\n  filters: Record<string, any>\n  createdDate: string\n  createdBy: string\n  lastRun?: string\n  totalRuns: number\n}\n\nexport default function ReportsPage() {\n  const [activeTab, setActiveTab] = useState(\"templates\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedTemplate, setSelectedTemplate] = useState<ReportTemplate | null>(null)\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  \n  // Custom report builder state\n  const [reportName, setReportName] = useState(\"\")\n  const [reportDescription, setReportDescription] = useState(\"\")\n  const [selectedEntity, setSelectedEntity] = useState(\"\")\n  const [selectedFields, setSelectedFields] = useState<string[]>([])\n  const [reportFilters, setReportFilters] = useState<Record<string, any>>({})\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Fetch locations for filtering\n  const { data: locations = [] } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Fetch report templates from API\n  const { data: reportTemplates = [], isLoading: templatesLoading } = useQuery<ReportTemplate[]>({\n    queryKey: [\"/api/reports/templates\"],\n  })\n\n  // Fetch custom reports from API\n  const { data: customReports = [], isLoading: customReportsLoading } = useQuery<CustomReport[]>({\n    queryKey: [\"/api/reports/custom\"],\n  })\n\n  // Helper functions (moved above usage)\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case \"assets\": return Laptop\n      case \"maintenance\": return Wrench\n      case \"assignments\": return Users\n      case \"locations\": return MapPin\n      case \"compliance\": return Building\n      default: return FileText\n    }\n  }\n\n  const getCategoryColorClass = (category: string) => {\n    switch (category) {\n      case \"assets\": return \"bg-blue-500\"\n      case \"maintenance\": return \"bg-orange-500\"\n      case \"assignments\": return \"bg-green-500\"\n      case \"locations\": return \"bg-purple-500\"\n      case \"compliance\": return \"bg-red-500\"\n      default: return \"bg-gray-500\"\n    }\n  }\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case \"assets\": return \"text-blue-600 bg-blue-50\"\n      case \"maintenance\": return \"text-orange-600 bg-orange-50\"\n      case \"assignments\": return \"text-green-600 bg-green-50\"\n      case \"locations\": return \"text-purple-600 bg-purple-50\"\n      case \"compliance\": return \"text-red-600 bg-red-50\"\n      default: return \"text-gray-600 bg-gray-50\"\n    }\n  }\n\n  // Debug logging\n  console.log('Report Templates from API:', reportTemplates)\n  console.log('Custom Reports from API:', customReports)\n  \n  // Log the first template to see structure\n  if (reportTemplates.length > 0) {\n    console.log('First template structure:', reportTemplates[0])\n    console.log('First template totalRuns:', reportTemplates[0].totalRuns)\n    console.log('First template lastRun:', reportTemplates[0].lastRun)\n  }\n\n  // Add icons and colors to templates (using real data from API)\n  const enrichedTemplates = reportTemplates.map(template => ({\n    ...template,\n    icon: getCategoryIcon(template.category),\n    color: getCategoryColorClass(template.category)\n    // lastRun and totalRuns now come directly from API\n  }))\n\n  console.log('Enriched Templates:', enrichedTemplates)\n  if (enrichedTemplates.length > 0) {\n    console.log('First enriched template:', enrichedTemplates[0])\n    console.log('First enriched totalRuns:', enrichedTemplates[0].totalRuns)\n  }\n\n  // Entity field mappings for custom report builder\n  const entityFields = {\n    assets: [\n      { id: \"assetId\", label: \"Asset ID\", type: \"text\" },\n      { id: \"assetType\", label: \"Asset Type\", type: \"text\" }, \n      { id: \"brand\", label: \"Brand\", type: \"text\" },\n      { id: \"model\", label: \"Model\", type: \"text\" },\n      { id: \"serialNumber\", label: \"Serial Number\", type: \"text\" },\n      { id: \"purchaseDate\", label: \"Purchase Date\", type: \"date\" },\n      { id: \"purchaseCost\", label: \"Purchase Cost\", type: \"number\" },\n      { id: \"warrantyUntil\", label: \"Warranty Until\", type: \"date\" },\n      { id: \"status\", label: \"Status\", type: \"select\" },\n      { id: \"condition\", label: \"Condition\", type: \"select\" },\n      { id: \"location\", label: \"Location\", type: \"select\" }\n    ],\n    employees: [\n      { id: \"employeeCode\", label: \"Employee Code\", type: \"text\" },\n      { id: \"firstName\", label: \"First Name\", type: \"text\" },\n      { id: \"lastName\", label: \"Last Name\", type: \"text\" },\n      { id: \"email\", label: \"Email\", type: \"text\" },\n      { id: \"department\", label: \"Department\", type: \"select\" },\n      { id: \"position\", label: \"Position\", type: \"text\" },\n      { id: \"location\", label: \"Location\", type: \"select\" }\n    ],\n    assignments: [\n      { id: \"assetId\", label: \"Asset ID\", type: \"text\" },\n      { id: \"employeeCode\", label: \"Employee Code\", type: \"text\" },\n      { id: \"employeeName\", label: \"Employee Name\", type: \"text\" },\n      { id: \"assignedDate\", label: \"Assigned Date\", type: \"date\" },\n      { id: \"returnedDate\", label: \"Returned Date\", type: \"date\" },\n      { id: \"duration\", label: \"Duration (Days)\", type: \"number\" },\n      { id: \"notes\", label: \"Notes\", type: \"text\" }\n    ],\n    maintenance: [\n      { id: \"assetId\", label: \"Asset ID\", type: \"text\" },\n      { id: \"maintenanceType\", label: \"Maintenance Type\", type: \"select\" },\n      { id: \"description\", label: \"Description\", type: \"text\" },\n      { id: \"scheduledDate\", label: \"Scheduled Date\", type: \"date\" },\n      { id: \"completedDate\", label: \"Completed Date\", type: \"date\" },\n      { id: \"cost\", label: \"Cost\", type: \"number\" },\n      { id: \"vendor\", label: \"Vendor\", type: \"text\" },\n      { id: \"status\", label: \"Status\", type: \"select\" }\n    ],\n    locations: [\n      { id: \"outletName\", label: \"Outlet Name\", type: \"text\" },\n      { id: \"city\", label: \"City\", type: \"text\" },\n      { id: \"state\", label: \"State\", type: \"text\" },\n      { id: \"manager\", label: \"Manager\", type: \"text\" },\n      { id: \"contactEmail\", label: \"Contact Email\", type: \"text\" },\n      { id: \"contactPhone\", label: \"Contact Phone\", type: \"text\" }\n    ]\n  }\n\n  // Handle template report generation\n  const handleRunTemplate = async (template: ReportTemplate, format: string = 'excel') => {\n    try {\n      toast({\n        title: \"Generating Report\",\n        description: `Generating ${template.name}...`\n      })\n\n      const response = await fetch('/api/reports/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          templateId: template.id,\n          filters: {},\n          format: format\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to generate report: ${response.statusText}`)\n      }\n\n      if (format === 'excel' || format === 'csv') {\n        // Handle file download\n        const blob = await response.blob()\n        const url = window.URL.createObjectURL(blob)\n        const contentDisposition = response.headers.get('Content-Disposition')\n        const filename = contentDisposition \n          ? contentDisposition.split('filename=')[1]?.replace(/\"/g, '')\n          : `${template.name.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.${format}`\n        \n        const a = document.createElement('a')\n        a.href = url\n        a.download = filename\n        document.body.appendChild(a)\n        a.click()\n        window.URL.revokeObjectURL(url)\n        document.body.removeChild(a)\n\n        toast({\n          title: \"Report Downloaded\",\n          description: `${template.name} has been downloaded successfully`\n        })\n      } else {\n        // Handle JSON response\n        const data = await response.json()\n        toast({\n          title: \"Report Generated\",\n          description: `Generated ${data.rowCount} records for ${template.name}`\n        })\n      }\n    } catch (error) {\n      console.error('Error generating report:', error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate report. Please try again.\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  // Handle custom report creation\n  const handleCreateCustomReport = async () => {\n    if (!reportName || !selectedEntity) {\n      toast({\n        title: \"Error\", \n        description: \"Please fill in required fields\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    try {\n      const response = await fetch('/api/reports/custom', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: reportName,\n          description: reportDescription,\n          entity: selectedEntity,\n          fields: selectedFields,\n          filters: reportFilters\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to create custom report: ${response.statusText}`)\n      }\n\n      const newReport = await response.json()\n\n      toast({\n        title: \"Success\",\n        description: `Custom report \"${reportName}\" has been created`\n      })\n\n      // Reset form\n      setReportName(\"\")\n      setReportDescription(\"\")\n      setSelectedEntity(\"\")\n      setSelectedFields([])\n      setReportFilters({})\n      setIsCreateDialogOpen(false)\n\n      // Refetch custom reports to update the list\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports/custom\"] })\n\n    } catch (error) {\n      console.error('Error creating custom report:', error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to create custom report. Please try again.\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  // Handle custom report generation\n  const handleRunCustomReport = async (report: CustomReport, format: string = 'excel') => {\n    try {\n      toast({\n        title: \"Generating Report\",\n        description: `Generating ${report.name}...`\n      })\n\n      const response = await fetch(`/api/reports/custom/${report.id}/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          format: format\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to generate custom report: ${response.statusText}`)\n      }\n\n      if (format === 'excel') {\n        // Handle file download\n        const blob = await response.blob()\n        const url = window.URL.createObjectURL(blob)\n        const filename = `${report.name.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.xlsx`\n        \n        const a = document.createElement('a')\n        a.href = url\n        a.download = filename\n        document.body.appendChild(a)\n        a.click()\n        window.URL.revokeObjectURL(url)\n        document.body.removeChild(a)\n\n        toast({\n          title: \"Report Downloaded\", \n          description: `${report.name} has been downloaded successfully`\n        })\n      }\n    } catch (error) {\n      console.error('Error generating custom report:', error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate custom report. Please try again.\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  // Filter enriched templates based on search\n  const filteredTemplates = enrichedTemplates.filter(template => \n    template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    template.description.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  // Filter custom reports based on search\n  const filteredCustomReports = customReports.filter(report => \n    report.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    report.description.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Reports</h1>\n          <p className=\"text-muted-foreground\">\n            Generate comprehensive reports and analytics for BODYCRAFT asset management\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Clock className=\"h-4 w-4\" />\n            Scheduled Reports\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Create Custom Report\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Create Custom Report</DialogTitle>\n                <DialogDescription>\n                  Build a custom report with specific fields and filters\n                </DialogDescription>\n              </DialogHeader>\n              \n              <div className=\"space-y-6\">\n                {/* Report Basic Info */}\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"reportName\">Report Name *</Label>\n                    <Input\n                      id=\"reportName\"\n                      value={reportName}\n                      onChange={(e) => setReportName(e.target.value)}\n                      placeholder=\"Enter report name\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"reportDescription\">Description</Label>\n                    <Textarea\n                      id=\"reportDescription\"\n                      value={reportDescription}\n                      onChange={(e) => setReportDescription(e.target.value)}\n                      placeholder=\"Describe what this report will show\"\n                      rows={3}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"entity\">Data Source *</Label>\n                    <Select value={selectedEntity} onValueChange={setSelectedEntity}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select data source\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"assets\">Assets</SelectItem>\n                        <SelectItem value=\"employees\">Employees</SelectItem>\n                        <SelectItem value=\"assignments\">Assignments</SelectItem>\n                        <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                        <SelectItem value=\"locations\">Locations</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                {/* Field Selection */}\n                {selectedEntity && (\n                  <div className=\"space-y-4\">\n                    <Separator />\n                    <div>\n                      <Label className=\"text-base font-medium\">Report Fields</Label>\n                      <p className=\"text-sm text-muted-foreground\">Select which fields to include in your report</p>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-2 max-h-40 overflow-y-auto p-2 border rounded\">\n                      {entityFields[selectedEntity as keyof typeof entityFields]?.map((field) => (\n                        <label key={field.id} className=\"flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedFields.includes(field.id)}\n                            onChange={(e) => {\n                              if (e.target.checked) {\n                                setSelectedFields([...selectedFields, field.id])\n                              } else {\n                                setSelectedFields(selectedFields.filter(f => f !== field.id))\n                              }\n                            }}\n                            className=\"rounded border-gray-300\"\n                          />\n                          <span className=\"text-sm\">{field.label}</span>\n                        </label>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Filters */}\n                {selectedEntity && (\n                  <div className=\"space-y-4\">\n                    <Separator />\n                    <div>\n                      <Label className=\"text-base font-medium\">Filters</Label>\n                      <p className=\"text-sm text-muted-foreground\">Add filters to refine your report data</p>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label>Location</Label>\n                        <Select \n                          value={reportFilters.location || \"\"} \n                          onValueChange={(value) => setReportFilters({...reportFilters, location: value})}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"All locations\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"\">All Locations</SelectItem>\n                            {locations.map(location => (\n                              <SelectItem key={location.id} value={location.id.toString()}>\n                                {location.outletName}, {location.city}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label>Date Range</Label>\n                        <Select \n                          value={reportFilters.dateRange || \"\"} \n                          onValueChange={(value) => setReportFilters({...reportFilters, dateRange: value})}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"All time\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"\">All Time</SelectItem>\n                            <SelectItem value=\"last7days\">Last 7 Days</SelectItem>\n                            <SelectItem value=\"last30days\">Last 30 Days</SelectItem>\n                            <SelectItem value=\"last3months\">Last 3 Months</SelectItem>\n                            <SelectItem value=\"last6months\">Last 6 Months</SelectItem>\n                            <SelectItem value=\"lastyear\">Last Year</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <DialogFooter>\n                <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={handleCreateCustomReport}>\n                  Create Report\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Report Templates</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{enrichedTemplates.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Pre-built reports available</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Custom Reports</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{customReports.length}</div>\n            <p className=\"text-xs text-muted-foreground\">User-created reports</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Reports Run</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {enrichedTemplates.reduce((sum, r) => sum + (r.totalRuns || 0), 0) + \n               customReports.reduce((sum, r) => sum + (r.totalRuns || 0), 0)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">This month</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Export Formats</CardTitle>\n            <Download className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">3</div>\n            <p className=\"text-xs text-muted-foreground\">Excel, CSV, PDF</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search reports by name or description...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-8\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Report Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"templates\">Report Templates</TabsTrigger>\n          <TabsTrigger value=\"custom\">Custom Reports</TabsTrigger>\n        </TabsList>\n\n        {/* Report Templates Tab */}\n        <TabsContent value=\"templates\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {filteredTemplates.map((template) => {\n              const IconComponent = template.icon\n              return (\n                <Card key={template.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`p-2 rounded-lg ${template.color}`}>\n                          <IconComponent className=\"h-5 w-5 text-white\" />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg\">{template.name}</CardTitle>\n                          <Badge variant=\"outline\" className={getCategoryColor(template.category)}>\n                            {template.category}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      {template.description}\n                    </p>\n                    \n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span>Fields: {template.fields.length}</span>\n                      <span>Runs: {template.totalRuns}</span>\n                      {template.lastRun && (\n                        <span>Last: {new Date(template.lastRun).toLocaleDateString()}</span>\n                      )}\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                      <Button \n                        size=\"sm\" \n                        className=\"flex-1\"\n                        onClick={() => handleRunTemplate(template)}\n                      >\n                        <Play className=\"h-4 w-4 mr-2\" />\n                        Run Report\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => setSelectedTemplate(template)}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              )\n            })}\n          </div>\n        </TabsContent>\n\n        {/* Custom Reports Tab */}\n        <TabsContent value=\"custom\" className=\"space-y-4\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Report Name</TableHead>\n                <TableHead>Entity</TableHead>\n                <TableHead>Created</TableHead>\n                <TableHead>Last Run</TableHead>\n                <TableHead>Total Runs</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredCustomReports.map((report) => (\n                <TableRow key={report.id}>\n                  <TableCell>\n                    <div>\n                      <div className=\"font-medium\">{report.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {report.description}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\" className=\"capitalize\">\n                      {report.entity}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      {new Date(report.createdDate).toLocaleDateString()}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      by {report.createdBy}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {report.lastRun ? (\n                      <div className=\"text-sm\">\n                        {new Date(report.lastRun).toLocaleDateString()}\n                      </div>\n                    ) : (\n                      <span className=\"text-muted-foreground\">Never</span>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"secondary\">\n                      {report.totalRuns}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex gap-2\">\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Play className=\"h-4 w-4\" />\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TabsContent>\n      </Tabs>\n\n      {/* Template Details Dialog */}\n      <Dialog open={!!selectedTemplate} onOpenChange={() => setSelectedTemplate(null)}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Report Template Details</DialogTitle>\n            <DialogDescription>\n              {selectedTemplate?.description}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedTemplate && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Category</Label>\n                  <Badge variant=\"outline\" className={getCategoryColor(selectedTemplate.category)}>\n                    {selectedTemplate.category}\n                  </Badge>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Total Runs</Label>\n                  <div className=\"text-sm\">{selectedTemplate.totalRuns}</div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Included Fields</Label>\n                <div className=\"flex flex-wrap gap-1\">\n                  {selectedTemplate.fields.map(field => (\n                    <Badge key={field} variant=\"secondary\" className=\"text-xs\">\n                      {field}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Available Filters</Label>\n                <div className=\"flex flex-wrap gap-1\">\n                  {selectedTemplate.filters.map(filter => (\n                    <Badge key={filter} variant=\"outline\" className=\"text-xs\">\n                      {filter}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setSelectedTemplate(null)}>\n              Close\n            </Button>\n            <Button onClick={() => selectedTemplate && handleRunTemplate(selectedTemplate)}>\n              Run Report\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":32124},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# BODYCRAFT Master Data Management (MDM) System\n\n## Overview\n\nThe BODYCRAFT Master Data Management (MDM) System is a web application for managing IT assets across 32 retail outlets in India. It centralizes asset management, employee tracking, and location-based operations, replacing manual tracking with a system that includes complete audit trails, asset assignment management, and integration with CCTV and biometric systems. The system aims to be a single source of truth, ensuring data integrity through historical preservation and comprehensive logging.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend\n- **React 18** with TypeScript\n- **Vite** for building\n- **Wouter** for routing\n- **TanStack Query** for server state\n- **Shadcn/ui** (built on Radix UI) for components\n- **Tailwind CSS** for styling\n\n### Backend\n- **Node.js** with Express.js for RESTful APIs\n- **TypeScript** for type safety\n- **Zod** for runtime schema validation\n- **Modular storage interface**\n- **Session-based architecture** with PostgreSQL session store\n\n### Data Storage\n- **PostgreSQL** (Neon serverless hosting)\n- **Drizzle ORM** for type-safe queries\n- **Historical data preservation** and **comprehensive audit trails**\n- **Multi-tenant data isolation** for 32 locations\n\n### Authentication and Authorization\n- **Session-based authentication** using `connect-pg-simple`\n- **Role-based access control (RBAC)** with location-based isolation\n- **Three-tier permission model**: Super Admin, Admin, Location User\n- **Location-based data filtering** for complete isolation\n- **Pre-update authorization** to prevent unauthorized cross-location changes\n\n### Design System\n- Modern design inspired by Canva and Figma\n- **Dual theme support** (light/dark) with purple branding\n- **Responsive design** for all devices\n- **Accessibility-first** component library\n\n### Database Schema\nRelational model with core entities:\n- **Locations**: 32 BODYCRAFT outlets\n- **Employees**: Staff with department/designation\n- **Assets**: IT equipment with lifecycle management\n- **Assignment History**: Immutable records\n- **Maintenance Records**: Service and warranty tracking\n- **Integration Tables**: CCTV, biometric devices, backups\n\n### API Architecture\n- **RESTful endpoints**\n- **Consistent error handling**\n- **Input validation** using Zod\n- **Structured logging**\n\n### RBAC Roles\n- **Super Admin (Global)**: Full access to all locations and operations.\n- **Admin (Global)**: Full access to all locations and most operations, similar to Super Admin for daily tasks.\n- **Location User (Location-Restricted)**: Access only to their assigned location; can manage local assets/employees, but cannot transfer assets/employees cross-location or modify CCTV/biometric systems.\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting.\n- **Drizzle Kit**: Database migration and schema management.\n\n### UI Framework\n- **Radix UI**: Headless components.\n- **Lucide React**: Icon library.\n- **Embla Carousel**: Touch-friendly carousel.\n- **Class Variance Authority**: Type-safe component variants.\n\n### Development Tools\n- **Vite Plugins**: Development enhancements.\n- **PostCSS with Autoprefixer**: CSS processing.\n- **TypeScript**: Static type checking.\n\n### Google Fonts\n- **Inter**: Primary interface font.\n- **Plus Jakarta Sans**: Display font.\n\n### Form Management\n- **React Hook Form**: Performance-optimized form handling.\n- **Hookform Resolvers**: Zod integration for validation.\n\n### Utilities\n- **Date-fns**: Date manipulation.\n- **clsx and tailwind-merge**: Conditional CSS class management.\n- **nanoid**: Unique ID generation.","size_bytes":3710},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/server/database-storage.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { eq, desc, and, or, like, isNull } from \"drizzle-orm\";\nimport { \n  type Asset, type InsertAsset,\n  type Employee, type InsertEmployee, \n  type Location, type InsertLocation,\n  type AssetAssignmentHistory, type InsertAssetAssignmentHistory,\n  type AssetMaintenance, type InsertAssetMaintenance,\n  type CctvSystem, type InsertCctvSystem,\n  type BiometricSystem, type InsertBiometricSystem,\n  type Backup, type InsertBackup,\n  type User, type InsertUser,\n  type CompanySettings, type InsertCompanySettings,\n  type AssetType, type InsertAssetType,\n  assets, employees, locations, assetAssignmentHistory, assetMaintenance,\n  cctvSystems, biometricSystems, backups, users, companySettings, assetTypes\n} from \"@shared/schema\";\nimport { IStorage } from \"./storage\";\n\nconst sql = neon(process.env.DATABASE_URL!);\nconst db = drizzle(sql);\n\nexport class DatabaseStorage implements IStorage {\n  // Assets\n  async getAsset(assetId: string): Promise<Asset | undefined> {\n    const result = await db.select().from(assets).where(eq(assets.assetId, assetId));\n    return result[0];\n  }\n\n  async getAllAssets(): Promise<Asset[]> {\n    return await db.select().from(assets).orderBy(desc(assets.createdAt));\n  }\n\n  async createAsset(asset: InsertAsset): Promise<Asset> {\n    const result = await db.insert(assets).values({\n      ...asset,\n      status: asset.status || \"available\",\n      condition: asset.condition || \"good\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateAsset(assetId: string, asset: Partial<InsertAsset>): Promise<Asset | undefined> {\n    const result = await db.update(assets)\n      .set({ \n        ...asset, \n        updatedAt: new Date() \n      })\n      .where(eq(assets.assetId, assetId))\n      .returning();\n    return result[0];\n  }\n\n  async deleteAsset(assetId: string): Promise<boolean> {\n    const result = await db.delete(assets).where(eq(assets.assetId, assetId));\n    return result.rowCount > 0;\n  }\n\n  // Employees\n  async getEmployee(id: number): Promise<Employee | undefined> {\n    const result = await db.select().from(employees).where(eq(employees.id, id));\n    return result[0];\n  }\n\n  async getAllEmployees(): Promise<Employee[]> {\n    return await db.select().from(employees).orderBy(desc(employees.createdAt));\n  }\n\n  async createEmployee(employee: InsertEmployee): Promise<Employee> {\n    const result = await db.insert(employees).values({\n      ...employee,\n      status: employee.status || \"active\",\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateEmployee(id: number, employee: Partial<InsertEmployee>): Promise<Employee | undefined> {\n    const result = await db.update(employees)\n      .set(employee)\n      .where(eq(employees.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteEmployee(id: number): Promise<boolean> {\n    const result = await db.delete(employees).where(eq(employees.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Locations\n  async getLocation(id: number): Promise<Location | undefined> {\n    const result = await db.select().from(locations).where(eq(locations.id, id));\n    return result[0];\n  }\n\n  async getAllLocations(): Promise<Location[]> {\n    return await db.select().from(locations).orderBy(desc(locations.createdAt));\n  }\n\n  async createLocation(location: InsertLocation): Promise<Location> {\n    const result = await db.insert(locations).values({\n      ...location,\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateLocation(id: number, location: Partial<InsertLocation>): Promise<Location | undefined> {\n    const result = await db.update(locations)\n      .set(location)\n      .where(eq(locations.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteLocation(id: number): Promise<boolean> {\n    const result = await db.delete(locations).where(eq(locations.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Assignment History\n  async getAssignmentHistory(assetId?: string, employeeId?: number): Promise<AssetAssignmentHistory[]> {\n    let query = db.select().from(assetAssignmentHistory);\n    \n    if (assetId && employeeId) {\n      query = query.where(and(\n        eq(assetAssignmentHistory.assetId, assetId),\n        eq(assetAssignmentHistory.employeeId, employeeId)\n      ));\n    } else if (assetId) {\n      query = query.where(eq(assetAssignmentHistory.assetId, assetId));\n    } else if (employeeId) {\n      query = query.where(eq(assetAssignmentHistory.employeeId, employeeId));\n    }\n    \n    return await query.orderBy(desc(assetAssignmentHistory.createdAt));\n  }\n\n  async createAssignment(assignment: InsertAssetAssignmentHistory): Promise<AssetAssignmentHistory> {\n    const result = await db.insert(assetAssignmentHistory).values({\n      ...assignment,\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  // Maintenance\n  async getMaintenanceRecords(assetId?: string): Promise<AssetMaintenance[]> {\n    let query = db.select().from(assetMaintenance);\n    \n    if (assetId) {\n      query = query.where(eq(assetMaintenance.assetId, assetId));\n    }\n    \n    return await query.orderBy(desc(assetMaintenance.createdAt));\n  }\n\n  async createMaintenanceRecord(maintenance: InsertAssetMaintenance): Promise<AssetMaintenance> {\n    const result = await db.insert(assetMaintenance).values({\n      ...maintenance,\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateMaintenanceRecord(id: number, maintenance: Partial<InsertAssetMaintenance>): Promise<AssetMaintenance | undefined> {\n    const result = await db.update(assetMaintenance)\n      .set(maintenance)\n      .where(eq(assetMaintenance.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteMaintenanceRecord(id: number): Promise<boolean> {\n    const result = await db.delete(assetMaintenance).where(eq(assetMaintenance.id, id));\n    return result.rowCount > 0;\n  }\n\n  // CCTV Systems\n  async getAllCctvSystems(): Promise<CctvSystem[]> {\n    return await db.select().from(cctvSystems).orderBy(desc(cctvSystems.createdAt));\n  }\n\n  async createCctvSystem(system: InsertCctvSystem): Promise<CctvSystem> {\n    const result = await db.insert(cctvSystems).values({\n      ...system,\n      status: system.status || \"online\",\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateCctvSystem(id: number, system: Partial<InsertCctvSystem>): Promise<CctvSystem | undefined> {\n    const result = await db.update(cctvSystems)\n      .set(system)\n      .where(eq(cctvSystems.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteCctvSystem(id: number): Promise<boolean> {\n    const result = await db.delete(cctvSystems).where(eq(cctvSystems.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Biometric Systems\n  async getAllBiometricSystems(): Promise<BiometricSystem[]> {\n    return await db.select().from(biometricSystems).orderBy(desc(biometricSystems.createdAt));\n  }\n\n  async createBiometricSystem(system: InsertBiometricSystem): Promise<BiometricSystem> {\n    const result = await db.insert(biometricSystems).values({\n      ...system,\n      status: system.status || \"online\",\n      employeeCount: system.employeeCount || 0,\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateBiometricSystem(id: number, system: Partial<InsertBiometricSystem>): Promise<BiometricSystem | undefined> {\n    const result = await db.update(biometricSystems)\n      .set(system)\n      .where(eq(biometricSystems.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteBiometricSystem(id: number): Promise<boolean> {\n    const result = await db.delete(biometricSystems).where(eq(biometricSystems.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Backups\n  async getBackups(assetId?: string): Promise<Backup[]> {\n    let query = db.select().from(backups);\n    \n    if (assetId) {\n      query = query.where(eq(backups.assetId, assetId));\n    }\n    \n    return await query.orderBy(desc(backups.createdAt));\n  }\n\n  async createBackup(backup: InsertBackup): Promise<Backup> {\n    const result = await db.insert(backups).values({\n      ...backup,\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateBackup(id: number, backup: Partial<InsertBackup>): Promise<Backup | undefined> {\n    const result = await db.update(backups)\n      .set(backup)\n      .where(eq(backups.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteBackup(id: number): Promise<boolean> {\n    const result = await db.delete(backups).where(eq(backups.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Additional methods for user management and settings\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values({\n      ...user,\n      status: user.status || \"active\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username));\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email));\n    return result[0];\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async updateUser(id: number, user: Partial<InsertUser>): Promise<User | undefined> {\n    const result = await db.update(users)\n      .set({ \n        ...user, \n        updatedAt: new Date() \n      })\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getCompanySettings(): Promise<CompanySettings | undefined> {\n    const result = await db.select().from(companySettings).limit(1);\n    return result[0];\n  }\n\n  async updateCompanySettings(settings: Partial<InsertCompanySettings>): Promise<CompanySettings> {\n    const existing = await this.getCompanySettings();\n    \n    if (existing) {\n      const result = await db.update(companySettings)\n        .set({ \n          ...settings, \n          updatedAt: new Date() \n        })\n        .where(eq(companySettings.id, existing.id))\n        .returning();\n      return result[0];\n    } else {\n      const result = await db.insert(companySettings).values({\n        ...settings,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }).returning();\n      return result[0];\n    }\n  }\n\n  async getAllAssetTypes(): Promise<AssetType[]> {\n    return await db.select().from(assetTypes)\n      .where(eq(assetTypes.isActive, true))\n      .orderBy(assetTypes.name);\n  }\n\n  async createAssetType(assetType: InsertAssetType): Promise<AssetType> {\n    const result = await db.insert(assetTypes).values({\n      ...assetType,\n      isActive: assetType.isActive ?? true,\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  // Dashboard statistics methods\n  async getDashboardStats() {\n    const [totalAssets, assignedAssets, availableAssets, maintenanceAssets] = await Promise.all([\n      db.select().from(assets),\n      db.select().from(assets).where(eq(assets.status, 'assigned')),\n      db.select().from(assets).where(eq(assets.status, 'available')),\n      db.select().from(assets).where(eq(assets.status, 'maintenance'))\n    ]);\n\n    const [totalEmployees, totalLocations, activeCctvSystems, activeBiometricSystems] = await Promise.all([\n      db.select().from(employees).where(eq(employees.status, 'active')),\n      db.select().from(locations),\n      db.select().from(cctvSystems).where(eq(cctvSystems.status, 'online')),\n      db.select().from(biometricSystems).where(eq(biometricSystems.status, 'online'))\n    ]);\n\n    return {\n      totalAssets: totalAssets.length,\n      assignedAssets: assignedAssets.length,\n      availableAssets: availableAssets.length,\n      maintenanceAssets: maintenanceAssets.length,\n      utilizationRate: totalAssets.length > 0 ? Math.round((assignedAssets.length / totalAssets.length) * 100) : 0,\n      totalEmployees: totalEmployees.length,\n      totalLocations: totalLocations.length,\n      activeCctvSystems: activeCctvSystems.length,\n      activeBiometricSystems: activeBiometricSystems.length,\n      systemHealth: 100 // Calculate based on your criteria\n    };\n  }\n\n  // Search functionality\n  async searchAssets(searchTerm: string): Promise<Asset[]> {\n    return await db.select().from(assets)\n      .where(or(\n        like(assets.assetId, `%${searchTerm}%`),\n        like(assets.modelName, `%${searchTerm}%`),\n        like(assets.brand, `%${searchTerm}%`),\n        like(assets.serviceTag, `%${searchTerm}%`)\n      ))\n      .orderBy(desc(assets.createdAt));\n  }\n\n  async searchEmployees(searchTerm: string): Promise<Employee[]> {\n    return await db.select().from(employees)\n      .where(or(\n        like(employees.employeeCode, `%${searchTerm}%`),\n        like(employees.firstName, `%${searchTerm}%`),\n        like(employees.lastName, `%${searchTerm}%`),\n        like(employees.email, `%${searchTerm}%`)\n      ))\n      .orderBy(desc(employees.createdAt));\n  }\n\n  // Get recent activities for dashboard\n  async getRecentActivities(limit: number = 10) {\n    return await db.select({\n      id: assetAssignmentHistory.id,\n      type: 'assignment',\n      assetId: assetAssignmentHistory.assetId,\n      employeeId: assetAssignmentHistory.employeeId,\n      date: assetAssignmentHistory.assignedDate,\n      reason: assetAssignmentHistory.assignmentReason,\n      createdAt: assetAssignmentHistory.createdAt\n    })\n    .from(assetAssignmentHistory)\n    .where(isNull(assetAssignmentHistory.returnedDate))\n    .orderBy(desc(assetAssignmentHistory.createdAt))\n    .limit(limit);\n  }\n}","size_bytes":13902},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/server/seed.ts":{"content":"import { DatabaseStorage } from \"./database-storage\";\nimport bcrypt from \"bcryptjs\";\n\nconst storage = new DatabaseStorage();\n\nasync function seedDatabase() {\n  console.log(\"🌱 Starting database seed...\");\n\n  try {\n    // 1. Create company settings\n    console.log(\"📝 Creating company settings...\");\n    await storage.updateCompanySettings({\n      companyName: \"BODYCRAFT\",\n      timezone: \"Asia/Kolkata\",\n      dateFormat: \"DD/MM/YYYY\",\n      language: \"en\",\n      sessionTimeout: 480,\n      passwordMinLength: 8,\n      emailNotificationsEnabled: true,\n      maintenanceMode: false,\n    });\n\n    // 2. Create asset types\n    console.log(\"🏷️ Creating asset types...\");\n    const assetTypes = [\n      { name: \"Laptop\", description: \"Portable computers for mobile work\" },\n      { name: \"Desktop\", description: \"Desktop computers for office use\" },\n      { name: \"Monitor\", description: \"Display screens and monitors\" },\n      { name: \"Mobile\", description: \"Mobile phones and tablets\" },\n      { name: \"Router\", description: \"Network routers and switches\" },\n      { name: \"Printer\", description: \"Printers and scanning devices\" },\n    ];\n\n    for (const type of assetTypes) {\n      await storage.createAssetType(type);\n    }\n\n    // 3. Create locations (BODYCRAFT outlets)\n    console.log(\"🏢 Creating outlet locations...\");\n    const locations = [\n      { \n        outletName: \"JP Nagar\", \n        city: \"Bangalore\", \n        state: \"Karnataka\", \n        address: \"123 JP Nagar Main Road, Bangalore\", \n        managerName: \"Rajesh Kumar\", \n        contactDetails: \"rajesh@bodycraft.com, +91-9876543210\" \n      },\n      { \n        outletName: \"Koramangala\", \n        city: \"Bangalore\", \n        state: \"Karnataka\", \n        address: \"456 Koramangala Ring Road, Bangalore\", \n        managerName: \"Priya Sharma\", \n        contactDetails: \"priya@bodycraft.com, +91-9876543211\" \n      },\n      { \n        outletName: \"Indiranagar\", \n        city: \"Bangalore\", \n        state: \"Karnataka\", \n        address: \"789 Indiranagar Main Street, Bangalore\", \n        managerName: \"Amit Singh\", \n        contactDetails: \"amit@bodycraft.com, +91-9876543212\" \n      },\n    ];\n\n    const createdLocations = [];\n    for (const location of locations) {\n      const created = await storage.createLocation(location);\n      createdLocations.push(created);\n    }\n\n    // 4. Create employees\n    console.log(\"👥 Creating employees...\");\n    const employees = [\n      { \n        employeeCode: \"BFC2024001\", \n        firstName: \"Rajesh\", \n        lastName: \"Kumar\", \n        department: \"IT\", \n        designation: \"Manager\", \n        email: \"rajesh@bodycraft.com\", \n        phone: \"+91-9876543210\",\n        status: \"active\", \n        locationId: createdLocations[0].id \n      },\n      { \n        employeeCode: \"BFC2024002\", \n        firstName: \"Priya\", \n        lastName: \"Sharma\", \n        department: \"Sales\", \n        designation: \"Executive\", \n        email: \"priya@bodycraft.com\", \n        phone: \"+91-9876543211\",\n        status: \"active\", \n        locationId: createdLocations[1].id \n      },\n      { \n        employeeCode: \"BFC2024003\", \n        firstName: \"Amit\", \n        lastName: \"Singh\", \n        department: \"Operations\", \n        designation: \"Specialist\", \n        email: \"amit@bodycraft.com\", \n        phone: \"+91-9876543212\",\n        status: \"active\", \n        locationId: createdLocations[2].id \n      },\n      { \n        employeeCode: \"BFC2024004\", \n        firstName: \"Sunita\", \n        lastName: \"Reddy\", \n        department: \"Marketing\", \n        designation: \"Specialist\", \n        email: \"sunita@bodycraft.com\", \n        phone: \"+91-9876543213\",\n        status: \"active\", \n        locationId: createdLocations[0].id \n      },\n    ];\n\n    const createdEmployees = [];\n    for (const employee of employees) {\n      const created = await storage.createEmployee(employee);\n      createdEmployees.push(created);\n    }\n\n    // 5. Create super admin user\n    console.log(\"👤 Creating super admin user...\");\n    const hashedPassword = await bcrypt.hash(\"admin123\", 10);\n    await storage.createUser({\n      username: \"admin\",\n      email: \"admin@bodycraft.com\",\n      passwordHash: hashedPassword,\n      firstName: \"Super\",\n      lastName: \"Admin\",\n      role: \"super_admin\",\n      status: \"active\",\n      employeeId: createdEmployees[0].id,\n    });\n\n    // 6. Create assets\n    console.log(\"💻 Creating assets...\");\n    const assets = [\n      { \n        assetId: \"BFC001\", \n        modelName: \"ThinkPad E15\", \n        brand: \"Lenovo\", \n        serviceTag: \"LEN001\", \n        assetType: \"Laptop\", \n        status: \"assigned\", \n        condition: \"good\", \n        purchaseDate: \"2024-01-15\",\n        warrantyExpiry: \"2026-01-15\",\n        locationId: createdLocations[0].id, \n        currentUserId: createdEmployees[0].id \n      },\n      { \n        assetId: \"BFC002\", \n        modelName: \"OptiPlex 3080\", \n        brand: \"Dell\", \n        serviceTag: \"DELL002\", \n        assetType: \"Desktop\", \n        status: \"available\", \n        condition: \"excellent\", \n        purchaseDate: \"2024-02-01\",\n        warrantyExpiry: \"2027-02-01\",\n        locationId: createdLocations[0].id, \n        currentUserId: null \n      },\n      { \n        assetId: \"BFC003\", \n        modelName: \"Surface Pro 8\", \n        brand: \"Microsoft\", \n        serviceTag: \"MS003\", \n        assetType: \"Laptop\", \n        status: \"assigned\", \n        condition: \"good\", \n        purchaseDate: \"2024-01-20\",\n        warrantyExpiry: \"2026-01-20\",\n        locationId: createdLocations[1].id, \n        currentUserId: createdEmployees[1].id \n      },\n      { \n        assetId: \"BFC004\", \n        modelName: \"UZ2450\", \n        brand: \"Dell\", \n        serviceTag: \"DELL004\", \n        assetType: \"Monitor\", \n        status: \"available\", \n        condition: \"good\", \n        purchaseDate: \"2024-02-05\",\n        warrantyExpiry: \"2027-02-05\",\n        locationId: createdLocations[1].id, \n        currentUserId: null \n      },\n      { \n        assetId: \"BFC005\", \n        modelName: \"iPhone 14\", \n        brand: \"Apple\", \n        serviceTag: \"APL005\", \n        assetType: \"Mobile\", \n        status: \"assigned\", \n        condition: \"excellent\", \n        purchaseDate: \"2024-01-10\",\n        warrantyExpiry: \"2025-01-10\",\n        locationId: createdLocations[2].id, \n        currentUserId: createdEmployees[2].id \n      },\n      { \n        assetId: \"BFC006\", \n        modelName: \"MacBook Pro 14\", \n        brand: \"Apple\", \n        serviceTag: \"APL006\", \n        assetType: \"Laptop\", \n        status: \"maintenance\", \n        condition: \"fair\", \n        purchaseDate: \"2023-12-15\",\n        warrantyExpiry: \"2025-12-15\",\n        locationId: createdLocations[2].id, \n        currentUserId: null \n      },\n      { \n        assetId: \"BFC007\", \n        modelName: \"ThinkPad X1\", \n        brand: \"Lenovo\", \n        serviceTag: \"LEN007\", \n        assetType: \"Laptop\", \n        status: \"assigned\", \n        condition: \"good\", \n        purchaseDate: \"2024-03-01\",\n        warrantyExpiry: \"2026-03-01\",\n        locationId: createdLocations[0].id, \n        currentUserId: createdEmployees[3].id \n      },\n    ];\n\n    for (const asset of assets) {\n      await storage.createAsset(asset);\n    }\n\n    // 7. Create assignment history\n    console.log(\"📋 Creating assignment history...\");\n    const assignments = [\n      { \n        assetId: \"BFC001\", \n        employeeId: createdEmployees[0].id, \n        assignedDate: \"2024-01-15\", \n        returnedDate: null, \n        assignmentReason: \"New employee setup\", \n        conditionOnAssignment: \"good\",\n        createdBy: createdEmployees[0].id \n      },\n      { \n        assetId: \"BFC003\", \n        employeeId: createdEmployees[1].id, \n        assignedDate: \"2024-02-01\", \n        returnedDate: null, \n        assignmentReason: \"Department transfer\", \n        conditionOnAssignment: \"good\",\n        createdBy: createdEmployees[0].id \n      },\n      { \n        assetId: \"BFC005\", \n        employeeId: createdEmployees[2].id, \n        assignedDate: \"2024-02-15\", \n        returnedDate: null, \n        assignmentReason: \"Business requirement\", \n        conditionOnAssignment: \"excellent\",\n        createdBy: createdEmployees[0].id \n      },\n      { \n        assetId: \"BFC007\", \n        employeeId: createdEmployees[3].id, \n        assignedDate: \"2024-03-01\", \n        returnedDate: null, \n        assignmentReason: \"New hire equipment\", \n        conditionOnAssignment: \"good\",\n        createdBy: createdEmployees[0].id \n      },\n    ];\n\n    for (const assignment of assignments) {\n      await storage.createAssignment(assignment);\n    }\n\n    // 8. Create maintenance records\n    console.log(\"🔧 Creating maintenance records...\");\n    const maintenanceRecords = [\n      { \n        assetId: \"BFC006\", \n        maintenanceType: \"corrective\", \n        description: \"Screen replacement due to crack\", \n        scheduledDate: \"2024-03-01\", \n        completedDate: \"2024-03-02\", \n        cost: \"15000.00\", \n        technicianName: \"Ravi Tech Services\", \n        partsReplaced: \"LCD Screen\" \n      },\n      { \n        assetId: \"BFC001\", \n        maintenanceType: \"preventive\", \n        description: \"Regular cleaning and system check\", \n        scheduledDate: \"2024-03-15\", \n        completedDate: \"2024-03-15\", \n        cost: \"500.00\", \n        technicianName: \"Internal IT\", \n        partsReplaced: null \n      },\n      { \n        assetId: \"BFC002\", \n        maintenanceType: \"upgrade\", \n        description: \"RAM upgrade from 8GB to 16GB\", \n        scheduledDate: \"2024-02-20\", \n        completedDate: \"2024-02-21\", \n        cost: \"3500.00\", \n        technicianName: \"Dell Support\", \n        partsReplaced: \"8GB DDR4 RAM\" \n      },\n    ];\n\n    for (const record of maintenanceRecords) {\n      await storage.createMaintenanceRecord(record);\n    }\n\n    // 9. Create CCTV systems\n    console.log(\"📹 Creating CCTV systems...\");\n    const cctvSystems = [\n      { \n        deviceName: \"JP Nagar Entrance Camera\", \n        ipAddress: \"192.168.1.101\", \n        locationDetails: \"Main entrance\", \n        username: \"admin\", \n        passwordHash: await bcrypt.hash(\"hikvision123\", 10), \n        status: \"online\", \n        lastOnline: new Date(), \n        locationId: createdLocations[0].id \n      },\n      { \n        deviceName: \"JP Nagar DVR System\", \n        ipAddress: \"192.168.1.102\", \n        locationDetails: \"Server room\", \n        username: \"admin\", \n        passwordHash: await bcrypt.hash(\"hikvision123\", 10), \n        status: \"online\", \n        lastOnline: new Date(), \n        locationId: createdLocations[0].id \n      },\n      { \n        deviceName: \"Koramangala Reception Cam\", \n        ipAddress: \"192.168.2.101\", \n        locationDetails: \"Reception area\", \n        username: \"admin\", \n        passwordHash: await bcrypt.hash(\"hikvision123\", 10), \n        status: \"online\", \n        lastOnline: new Date(), \n        locationId: createdLocations[1].id \n      },\n      { \n        deviceName: \"Indiranagar Security DVR\", \n        ipAddress: \"192.168.3.101\", \n        locationDetails: \"Security office\", \n        username: \"admin\", \n        passwordHash: await bcrypt.hash(\"hikvision123\", 10), \n        status: \"offline\", \n        lastOnline: null, \n        locationId: createdLocations[2].id \n      },\n    ];\n\n    for (const system of cctvSystems) {\n      await storage.createCctvSystem(system);\n    }\n\n    // 10. Create biometric systems\n    console.log(\"👆 Creating biometric systems...\");\n    const biometricSystems = [\n      { \n        deviceName: \"JP Nagar Attendance\", \n        deviceModel: \"eSSL K30 Pro\", \n        ipAddress: \"192.168.1.201\", \n        locationDetails: \"Main entrance\", \n        employeeCount: 15, \n        lastSyncDate: new Date(), \n        status: \"online\", \n        locationId: createdLocations[0].id \n      },\n      { \n        deviceName: \"Koramangala Biometric\", \n        deviceModel: \"ZKTeco F18\", \n        ipAddress: \"192.168.2.201\", \n        locationDetails: \"Employee entrance\", \n        employeeCount: 12, \n        lastSyncDate: new Date(), \n        status: \"online\", \n        locationId: createdLocations[1].id \n      },\n      { \n        deviceName: \"Indiranagar Access Control\", \n        deviceModel: \"Realtime T502\", \n        ipAddress: \"192.168.3.201\", \n        locationDetails: \"Staff entry\", \n        employeeCount: 18, \n        lastSyncDate: new Date(), \n        status: \"error\", \n        locationId: createdLocations[2].id \n      },\n    ];\n\n    for (const system of biometricSystems) {\n      await storage.createBiometricSystem(system);\n    }\n\n    // 11. Create backup records\n    console.log(\"💾 Creating backup records...\");\n    const backupRecords = [\n      { \n        assetId: \"BFC001\", \n        employeeId: createdEmployees[0].id, \n        backupDate: new Date(\"2024-01-14\"), \n        backupSize: \"250GB\", \n        backupType: \"full\", \n        backupLocation: \"NAS Server - /backups/users/rajesh\", \n        performedBy: createdEmployees[0].id \n      },\n      { \n        assetId: \"BFC003\", \n        employeeId: createdEmployees[1].id, \n        backupDate: new Date(\"2024-01-31\"), \n        backupSize: \"180GB\", \n        backupType: \"selective\", \n        backupLocation: \"Cloud Storage - AWS S3\", \n        performedBy: createdEmployees[0].id \n      },\n      { \n        assetId: \"BFC005\", \n        employeeId: createdEmployees[2].id, \n        backupDate: new Date(\"2024-02-14\"), \n        backupSize: \"128GB\", \n        backupType: \"full\", \n        backupLocation: \"Local Server - /backups/mobile\", \n        performedBy: createdEmployees[0].id \n      },\n    ];\n\n    for (const record of backupRecords) {\n      await storage.createBackup(record);\n    }\n\n    console.log(\"✅ Database seeded successfully!\");\n    console.log(\"\\n🔑 Super Admin Login:\");\n    console.log(\"Username: admin\");\n    console.log(\"Password: admin123\");\n    console.log(\"Email: admin@bodycraft.com\");\n    \n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n    throw error;\n  }\n}\n\n// Run seed function immediately\nseedDatabase().then(() => {\n  console.log(\"🎉 Seeding completed!\");\n}).catch((error) => {\n  console.error(\"💥 Seeding failed:\", error);\n  throw error;\n});\n\nexport { seedDatabase };","size_bytes":14230},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Building2, \n  Users, \n  Package, \n  MapPin, \n  Settings, \n  Shield, \n  Database,\n  Bell,\n  Upload,\n  Download,\n  Trash2,\n  Edit,\n  Plus,\n  Check,\n  X\n} from \"lucide-react\";\nimport { Separator } from \"@/components/ui/separator\";\n\nexport default function SettingsPage() {\n  const [companySettings, setCompanySettings] = useState({\n    companyName: \"BODYCRAFT\",\n    logoUrl: \"\",\n    timezone: \"Asia/Kolkata\",\n    dateFormat: \"DD/MM/YYYY\",\n    language: \"en\",\n  });\n\n  const [securitySettings, setSecuritySettings] = useState({\n    sessionTimeout: 480,\n    passwordMinLength: 8,\n    emailNotificationsEnabled: true,\n    maintenanceMode: false,\n  });\n\n  const [users, setUsers] = useState([\n    { id: 1, username: \"admin\", email: \"admin@bodycraft.com\", role: \"super_admin\", status: \"active\", lastLogin: \"2024-09-27\" },\n    { id: 2, username: \"rajesh.kumar\", email: \"rajesh@bodycraft.com\", role: \"admin\", status: \"active\", lastLogin: \"2024-09-26\" },\n    { id: 3, username: \"priya.sharma\", email: \"priya@bodycraft.com\", role: \"manager\", status: \"active\", lastLogin: \"2024-09-25\" },\n  ]);\n\n  const [assetTypes, setAssetTypes] = useState([\n    { id: 1, name: \"Laptop\", description: \"Portable computers for mobile work\", isActive: true },\n    { id: 2, name: \"Desktop\", description: \"Desktop computers for office use\", isActive: true },\n    { id: 3, name: \"Monitor\", description: \"Display screens and monitors\", isActive: true },\n    { id: 4, name: \"Mobile\", description: \"Mobile phones and tablets\", isActive: true },\n    { id: 5, name: \"Router\", description: \"Network routers and switches\", isActive: true },\n    { id: 6, name: \"Printer\", description: \"Printers and scanning devices\", isActive: true },\n  ]);\n\n  const [locations, setLocations] = useState([\n    { \n      id: 1, \n      outletName: \"JP Nagar\", \n      city: \"Bangalore\", \n      state: \"Karnataka\", \n      manager: \"Rajesh Kumar\", \n      contact: \"rajesh@bodycraft.com\",\n      region: \"South\"\n    },\n    { \n      id: 2, \n      outletName: \"Koramangala\", \n      city: \"Bangalore\", \n      state: \"Karnataka\", \n      manager: \"Priya Sharma\", \n      contact: \"priya@bodycraft.com\",\n      region: \"South\"\n    },\n    { \n      id: 3, \n      outletName: \"Indiranagar\", \n      city: \"Bangalore\", \n      state: \"Karnataka\", \n      manager: \"Amit Singh\", \n      contact: \"amit@bodycraft.com\",\n      region: \"South\"\n    },\n  ]);\n\n  const [newUser, setNewUser] = useState({\n    username: \"\",\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    role: \"user\",\n    password: \"\",\n  });\n\n  const [newAssetType, setNewAssetType] = useState({\n    name: \"\",\n    description: \"\",\n  });\n\n  const [newLocation, setNewLocation] = useState({\n    outletName: \"\",\n    city: \"\",\n    state: \"\",\n    address: \"\",\n    manager: \"\",\n    contact: \"\",\n    region: \"\",\n  });\n\n  const handleSaveCompanySettings = () => {\n    // TODO: Connect to API\n    console.log(\"Saving company settings:\", companySettings);\n    alert(\"Company settings saved successfully!\");\n  };\n\n  const handleSaveSecuritySettings = () => {\n    // TODO: Connect to API\n    console.log(\"Saving security settings:\", securitySettings);\n    alert(\"Security settings saved successfully!\");\n  };\n\n  const handleCreateUser = () => {\n    if (!newUser.username || !newUser.email || !newUser.password) {\n      alert(\"Please fill in all required fields\");\n      return;\n    }\n    \n    const user = {\n      id: users.length + 1,\n      ...newUser,\n      status: \"active\",\n      lastLogin: \"Never\",\n    };\n    \n    setUsers([...users, user]);\n    setNewUser({ username: \"\", email: \"\", firstName: \"\", lastName: \"\", role: \"user\", password: \"\" });\n    alert(\"User created successfully!\");\n  };\n\n  const handleCreateAssetType = () => {\n    if (!newAssetType.name) {\n      alert(\"Asset type name is required\");\n      return;\n    }\n    \n    const assetType = {\n      id: assetTypes.length + 1,\n      ...newAssetType,\n      isActive: true,\n    };\n    \n    setAssetTypes([...assetTypes, assetType]);\n    setNewAssetType({ name: \"\", description: \"\" });\n    alert(\"Asset type created successfully!\");\n  };\n\n  const handleCreateLocation = () => {\n    if (!newLocation.outletName || !newLocation.city || !newLocation.state) {\n      alert(\"Please fill in all required fields\");\n      return;\n    }\n    \n    const location = {\n      id: locations.length + 1,\n      ...newLocation,\n    };\n    \n    setLocations([...locations, location]);\n    setNewLocation({\n      outletName: \"\",\n      city: \"\",\n      state: \"\",\n      address: \"\",\n      manager: \"\",\n      contact: \"\",\n      region: \"\",\n    });\n    alert(\"Location created successfully!\");\n  };\n\n  const toggleUserStatus = (userId: number) => {\n    setUsers(users.map(user => \n      user.id === userId \n        ? { ...user, status: user.status === \"active\" ? \"inactive\" : \"active\" }\n        : user\n    ));\n  };\n\n  const toggleAssetType = (assetTypeId: number) => {\n    setAssetTypes(assetTypes.map(type => \n      type.id === assetTypeId \n        ? { ...type, isActive: !type.isActive }\n        : type\n    ));\n  };\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case \"super_admin\": return \"bg-red-500\";\n      case \"admin\": return \"bg-blue-500\";\n      case \"manager\": return \"bg-green-500\";\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-6xl\">\n      <div className=\"flex items-center gap-3 mb-6\">\n        <Settings className=\"h-8 w-8 text-primary\" />\n        <div>\n          <h1 className=\"text-3xl font-bold\">System Settings</h1>\n          <p className=\"text-muted-foreground\">Configure your BODYCRAFT MDM system</p>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"company\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-7\">\n          <TabsTrigger value=\"company\" className=\"flex items-center gap-2\">\n            <Building2 className=\"h-4 w-4\" />\n            Company\n          </TabsTrigger>\n          <TabsTrigger value=\"users\" className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            Users\n          </TabsTrigger>\n          <TabsTrigger value=\"assets\" className=\"flex items-center gap-2\">\n            <Package className=\"h-4 w-4\" />\n            Assets\n          </TabsTrigger>\n          <TabsTrigger value=\"locations\" className=\"flex items-center gap-2\">\n            <MapPin className=\"h-4 w-4\" />\n            Locations\n          </TabsTrigger>\n          <TabsTrigger value=\"notifications\" className=\"flex items-center gap-2\">\n            <Bell className=\"h-4 w-4\" />\n            Alerts\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" className=\"flex items-center gap-2\">\n            <Shield className=\"h-4 w-4\" />\n            Security\n          </TabsTrigger>\n          <TabsTrigger value=\"backup\" className=\"flex items-center gap-2\">\n            <Database className=\"h-4 w-4\" />\n            Backup\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Company Settings */}\n        <TabsContent value=\"company\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Building2 className=\"h-5 w-5\" />\n                Company Settings\n              </CardTitle>\n              <CardDescription>\n                Configure your company information and system preferences\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"companyName\">Company Name</Label>\n                    <Input\n                      id=\"companyName\"\n                      value={companySettings.companyName}\n                      onChange={(e) => setCompanySettings({...companySettings, companyName: e.target.value})}\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"timezone\">Timezone</Label>\n                    <Select \n                      value={companySettings.timezone} \n                      onValueChange={(value) => setCompanySettings({...companySettings, timezone: value})}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Asia/Kolkata\">Asia/Kolkata (India)</SelectItem>\n                        <SelectItem value=\"UTC\">UTC</SelectItem>\n                        <SelectItem value=\"America/New_York\">America/New_York</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"dateFormat\">Date Format</Label>\n                    <Select \n                      value={companySettings.dateFormat} \n                      onValueChange={(value) => setCompanySettings({...companySettings, dateFormat: value})}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"DD/MM/YYYY\">DD/MM/YYYY</SelectItem>\n                        <SelectItem value=\"MM/DD/YYYY\">MM/DD/YYYY</SelectItem>\n                        <SelectItem value=\"YYYY-MM-DD\">YYYY-MM-DD</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"language\">System Language</Label>\n                    <Select \n                      value={companySettings.language} \n                      onValueChange={(value) => setCompanySettings({...companySettings, language: value})}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"en\">English</SelectItem>\n                        <SelectItem value=\"hi\">Hindi</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"logo\">Company Logo</Label>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <Input type=\"file\" accept=\"image/*\" />\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Upload className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      Upload your company logo (max 2MB, PNG/JPG)\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end\">\n                <Button onClick={handleSaveCompanySettings} className=\"bg-purple-600 hover:bg-purple-700\">\n                  Save Company Settings\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* User Management */}\n        <TabsContent value=\"users\">\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5\" />\n                  User Management\n                </CardTitle>\n                <CardDescription>\n                  Manage user accounts and permissions\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {users.map((user) => (\n                    <div key={user.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-4\">\n                        <div>\n                          <div className=\"font-medium\">{user.username}</div>\n                          <div className=\"text-sm text-muted-foreground\">{user.email}</div>\n                        </div>\n                        <Badge className={getRoleBadgeColor(user.role)}>\n                          {user.role.replace(\"_\", \" \")}\n                        </Badge>\n                        <Badge variant={user.status === \"active\" ? \"default\" : \"secondary\"}>\n                          {user.status}\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-sm text-muted-foreground\">\n                          Last login: {user.lastLogin}\n                        </span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => toggleUserStatus(user.id)}\n                        >\n                          {user.status === \"active\" ? <X className=\"h-4 w-4\" /> : <Check className=\"h-4 w-4\" />}\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Create New User</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"username\">Username *</Label>\n                    <Input\n                      id=\"username\"\n                      value={newUser.username}\n                      onChange={(e) => setNewUser({...newUser, username: e.target.value})}\n                      placeholder=\"Enter username\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\">Email *</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={newUser.email}\n                      onChange={(e) => setNewUser({...newUser, email: e.target.value})}\n                      placeholder=\"Enter email\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      value={newUser.firstName}\n                      onChange={(e) => setNewUser({...newUser, firstName: e.target.value})}\n                      placeholder=\"Enter first name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      value={newUser.lastName}\n                      onChange={(e) => setNewUser({...newUser, lastName: e.target.value})}\n                      placeholder=\"Enter last name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"role\">Role</Label>\n                    <Select value={newUser.role} onValueChange={(value) => setNewUser({...newUser, role: value})}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"user\">User</SelectItem>\n                        <SelectItem value=\"manager\">Manager</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                        <SelectItem value=\"super_admin\">Super Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"password\">Password *</Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      value={newUser.password}\n                      onChange={(e) => setNewUser({...newUser, password: e.target.value})}\n                      placeholder=\"Enter password\"\n                    />\n                  </div>\n                </div>\n                <div className=\"flex justify-end mt-4\">\n                  <Button onClick={handleCreateUser} className=\"bg-purple-600 hover:bg-purple-700\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create User\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Asset Configuration */}\n        <TabsContent value=\"assets\">\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Package className=\"h-5 w-5\" />\n                  Asset Types\n                </CardTitle>\n                <CardDescription>\n                  Configure asset categories and types\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {assetTypes.map((type) => (\n                    <div key={type.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div>\n                        <div className=\"font-medium\">{type.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">{type.description}</div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Switch\n                          checked={type.isActive}\n                          onCheckedChange={() => toggleAssetType(type.id)}\n                        />\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Add New Asset Type</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"assetTypeName\">Asset Type Name *</Label>\n                    <Input\n                      id=\"assetTypeName\"\n                      value={newAssetType.name}\n                      onChange={(e) => setNewAssetType({...newAssetType, name: e.target.value})}\n                      placeholder=\"e.g., Laptop, Desktop\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"assetTypeDescription\">Description</Label>\n                    <Textarea\n                      id=\"assetTypeDescription\"\n                      value={newAssetType.description}\n                      onChange={(e) => setNewAssetType({...newAssetType, description: e.target.value})}\n                      placeholder=\"Brief description of this asset type\"\n                      rows={1}\n                    />\n                  </div>\n                </div>\n                <div className=\"flex justify-end mt-4\">\n                  <Button onClick={handleCreateAssetType} className=\"bg-purple-600 hover:bg-purple-700\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Asset Type\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Location Setup */}\n        <TabsContent value=\"locations\">\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MapPin className=\"h-5 w-5\" />\n                  BODYCRAFT Outlets\n                </CardTitle>\n                <CardDescription>\n                  Manage all 32 BODYCRAFT outlet locations\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {locations.map((location) => (\n                    <div key={location.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div>\n                        <div className=\"font-medium\">{location.outletName}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {location.city}, {location.state} • Manager: {location.manager}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">{location.contact}</div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\">{location.region}</Badge>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Add New Location</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"outletName\">Outlet Name *</Label>\n                    <Input\n                      id=\"outletName\"\n                      value={newLocation.outletName}\n                      onChange={(e) => setNewLocation({...newLocation, outletName: e.target.value})}\n                      placeholder=\"Enter outlet name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"city\">City *</Label>\n                    <Input\n                      id=\"city\"\n                      value={newLocation.city}\n                      onChange={(e) => setNewLocation({...newLocation, city: e.target.value})}\n                      placeholder=\"Enter city\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"state\">State *</Label>\n                    <Input\n                      id=\"state\"\n                      value={newLocation.state}\n                      onChange={(e) => setNewLocation({...newLocation, state: e.target.value})}\n                      placeholder=\"Enter state\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"region\">Region</Label>\n                    <Select value={newLocation.region} onValueChange={(value) => setNewLocation({...newLocation, region: value})}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select region\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"North\">North</SelectItem>\n                        <SelectItem value=\"South\">South</SelectItem>\n                        <SelectItem value=\"East\">East</SelectItem>\n                        <SelectItem value=\"West\">West</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"manager\">Manager Name</Label>\n                    <Input\n                      id=\"manager\"\n                      value={newLocation.manager}\n                      onChange={(e) => setNewLocation({...newLocation, manager: e.target.value})}\n                      placeholder=\"Enter manager name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"contact\">Contact Details</Label>\n                    <Input\n                      id=\"contact\"\n                      value={newLocation.contact}\n                      onChange={(e) => setNewLocation({...newLocation, contact: e.target.value})}\n                      placeholder=\"Email or phone\"\n                    />\n                  </div>\n                  <div className=\"md:col-span-2\">\n                    <Label htmlFor=\"address\">Address</Label>\n                    <Textarea\n                      id=\"address\"\n                      value={newLocation.address}\n                      onChange={(e) => setNewLocation({...newLocation, address: e.target.value})}\n                      placeholder=\"Complete address\"\n                      rows={2}\n                    />\n                  </div>\n                </div>\n                <div className=\"flex justify-end mt-4\">\n                  <Button onClick={handleCreateLocation} className=\"bg-purple-600 hover:bg-purple-700\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Location\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Notifications */}\n        <TabsContent value=\"notifications\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bell className=\"h-5 w-5\" />\n                Notification Settings\n              </CardTitle>\n              <CardDescription>\n                Configure email alerts and notifications\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"font-medium\">Asset Assignment Alerts</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Send email when assets are assigned or returned\n                    </div>\n                  </div>\n                  <Switch defaultChecked />\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"font-medium\">Maintenance Due Reminders</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Alert when asset maintenance is due\n                    </div>\n                  </div>\n                  <Switch defaultChecked />\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"font-medium\">System Health Alerts</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Notify when CCTV or biometric systems are offline\n                    </div>\n                  </div>\n                  <Switch defaultChecked />\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"font-medium\">Weekly Reports</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Send weekly asset utilization reports\n                    </div>\n                  </div>\n                  <Switch />\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <Label>Notification Recipients</Label>\n                <div className=\"space-y-2\">\n                  <Input placeholder=\"admin@bodycraft.com\" />\n                  <Input placeholder=\"manager@bodycraft.com\" />\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Recipient\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end\">\n                <Button className=\"bg-purple-600 hover:bg-purple-700\">\n                  Save Notification Settings\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Security */}\n        <TabsContent value=\"security\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5\" />\n                Security Settings\n              </CardTitle>\n              <CardDescription>\n                Configure security policies and access controls\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"sessionTimeout\">Session Timeout (minutes)</Label>\n                    <Input\n                      id=\"sessionTimeout\"\n                      type=\"number\"\n                      value={securitySettings.sessionTimeout}\n                      onChange={(e) => setSecuritySettings({...securitySettings, sessionTimeout: parseInt(e.target.value)})}\n                    />\n                    <p className=\"text-sm text-muted-foreground\">\n                      Users will be logged out after this period of inactivity\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"passwordMinLength\">Minimum Password Length</Label>\n                    <Input\n                      id=\"passwordMinLength\"\n                      type=\"number\"\n                      value={securitySettings.passwordMinLength}\n                      onChange={(e) => setSecuritySettings({...securitySettings, passwordMinLength: parseInt(e.target.value)})}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"font-medium\">Email Notifications</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Enable system email notifications\n                      </div>\n                    </div>\n                    <Switch\n                      checked={securitySettings.emailNotificationsEnabled}\n                      onCheckedChange={(checked) => setSecuritySettings({...securitySettings, emailNotificationsEnabled: checked})}\n                    />\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"font-medium\">Maintenance Mode</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Restrict system access for maintenance\n                      </div>\n                    </div>\n                    <Switch\n                      checked={securitySettings.maintenanceMode}\n                      onCheckedChange={(checked) => setSecuritySettings({...securitySettings, maintenanceMode: checked})}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end\">\n                <Button onClick={handleSaveSecuritySettings} className=\"bg-purple-600 hover:bg-purple-700\">\n                  Save Security Settings\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Backup & Maintenance */}\n        <TabsContent value=\"backup\">\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Database className=\"h-5 w-5\" />\n                  Backup & Maintenance\n                </CardTitle>\n                <CardDescription>\n                  Configure system backups and maintenance schedules\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>Automatic Backups</Label>\n                    <Select defaultValue=\"daily\">\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"hourly\">Every Hour</SelectItem>\n                        <SelectItem value=\"daily\">Daily</SelectItem>\n                        <SelectItem value=\"weekly\">Weekly</SelectItem>\n                        <SelectItem value=\"monthly\">Monthly</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label>Backup Retention Period</Label>\n                    <Select defaultValue=\"30\">\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"7\">7 days</SelectItem>\n                        <SelectItem value=\"30\">30 days</SelectItem>\n                        <SelectItem value=\"90\">90 days</SelectItem>\n                        <SelectItem value=\"365\">1 year</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label>Log Retention Period</Label>\n                    <Select defaultValue=\"90\">\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"30\">30 days</SelectItem>\n                        <SelectItem value=\"90\">90 days</SelectItem>\n                        <SelectItem value=\"180\">180 days</SelectItem>\n                        <SelectItem value=\"365\">1 year</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-medium\">Manual Actions</h3>\n                  <div className=\"flex gap-2\">\n                    <Button variant=\"outline\">\n                      <Database className=\"h-4 w-4 mr-2\" />\n                      Create Backup Now\n                    </Button>\n                    <Button variant=\"outline\">\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Download Logs\n                    </Button>\n                    <Button variant=\"outline\">\n                      <Trash2 className=\"h-4 w-4 mr-2\" />\n                      Clear Old Logs\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button className=\"bg-purple-600 hover:bg-purple-700\">\n                    Save Backup Settings\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":36381},"Bodycraft-MDM/Bodycraft-MDM/AutoDesignPro/client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Building2, Lock, User, AlertCircle, Eye, EyeOff } from \"lucide-react\";\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const [credentials, setCredentials] = useState({\n    username: \"\",\n    password: \"\",\n  });\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    setLoading(true);\n\n    try {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(credentials),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log(\"Login successful:\", data);\n        \n        // Store user info in localStorage\n        localStorage.setItem(\"user\", JSON.stringify(data.user));\n        \n        // Redirect to dashboard\n        setLocation(\"/\");\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || \"Login failed. Please check your credentials.\");\n      }\n    } catch (err) {\n      setError(\"Network error. Please try again.\");\n      console.error(\"Login error:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDemoLogin = (role: 'super_admin' | 'admin' | 'manager' | 'user') => {\n    const demoCredentials = {\n      super_admin: { username: \"admin\", password: \"admin123\" },\n      admin: { username: \"rajesh.kumar\", password: \"rajesh123\" },\n      manager: { username: \"priya.sharma\", password: \"priya123\" },\n      user: { username: \"demo.user\", password: \"demo123\" },\n    };\n\n    setCredentials(demoCredentials[role]);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-50 to-blue-50 dark:from-gray-900 dark:to-gray-800 px-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* BODYCRAFT Branding */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"p-2 bg-primary rounded-lg\">\n              <Building2 className=\"h-8 w-8 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-primary\">BODYCRAFT</h1>\n              <p className=\"text-sm text-muted-foreground\">Master Data Management</p>\n            </div>\n          </div>\n          <p className=\"text-muted-foreground\">\n            Sign in to access your IT asset management system\n          </p>\n        </div>\n\n        {/* Login Form */}\n        <Card className=\"shadow-lg\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl text-center flex items-center justify-center gap-2\">\n              <Lock className=\"h-5 w-5\" />\n              Sign In\n            </CardTitle>\n            <CardDescription className=\"text-center\">\n              Enter your credentials to access the BODYCRAFT MDM system\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Username</Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"username\"\n                    type=\"text\"\n                    placeholder=\"Enter your username\"\n                    value={credentials.username}\n                    onChange={(e) => setCredentials({ ...credentials, username: e.target.value })}\n                    className=\"pl-10\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Enter your password\"\n                    value={credentials.password}\n                    onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}\n                    className=\"pl-10 pr-10\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </button>\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-primary hover:bg-primary/90\"\n                disabled={loading}\n              >\n                {loading ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n\n            {/* Demo Login Section */}\n            <div className=\"mt-6 space-y-3\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-background px-2 text-muted-foreground\">Demo Accounts</span>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleDemoLogin('super_admin')}\n                  className=\"text-xs\"\n                >\n                  Super Admin\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleDemoLogin('admin')}\n                  className=\"text-xs\"\n                >\n                  Admin\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleDemoLogin('manager')}\n                  className=\"text-xs\"\n                >\n                  Manager\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleDemoLogin('user')}\n                  className=\"text-xs\"\n                >\n                  User\n                </Button>\n              </div>\n              \n              <p className=\"text-xs text-center text-muted-foreground\">\n                Click any demo account to auto-fill credentials\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* System Info */}\n        <div className=\"text-center text-xs text-muted-foreground space-y-1\">\n          <p>BODYCRAFT IT Asset Management System</p>\n          <p>Serving 32 outlets across India</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8145},"README.md":{"content":"# Bodycraft-MDM\nBodycraft master data management software \n","size_bytes":59},"design_guidelines.md":{"content":"# Social Media Graphics Automation Tool - Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from modern design tools like Canva and Figma, with productivity-focused patterns from Notion and Linear. This utility-focused application prioritizes efficiency and learnability for social media managers.\n\n## Core Design Elements\n\n### Color Palette\n**Light Mode:**\n- Primary: 264 100% 50% (vibrant purple for creative energy)\n- Secondary: 220 15% 25% (dark slate for text)\n- Background: 0 0% 98% (soft white)\n- Surface: 0 0% 100% (pure white cards)\n- Accent: 142 76% 50% (success green, used sparingly)\n\n**Dark Mode:**\n- Primary: 264 100% 60% (lighter purple for contrast)\n- Secondary: 210 40% 85% (light gray text)\n- Background: 222 20% 12% (deep dark blue)\n- Surface: 220 15% 16% (elevated dark cards)\n- Accent: 142 76% 60% (success green)\n\n### Typography\n- **Primary Font**: Inter (Google Fonts) - excellent readability for interfaces\n- **Display Font**: Plus Jakarta Sans (Google Fonts) - friendly, modern for headings\n- **Hierarchy**: h1 (32px), h2 (24px), h3 (20px), body (16px), small (14px)\n\n### Layout System\n**Tailwind Spacing**: Use units of 2, 4, 6, 8, 12, 16 for consistent rhythm\n- Base padding: p-4, p-6, p-8\n- Component margins: m-2, m-4, m-8\n- Heights: h-8, h-12, h-16 for consistent component sizing\n\n### Component Library\n\n**Navigation:**\n- Clean sidebar with icon + text labels\n- Top header with search and user profile\n- Breadcrumb navigation for deep workflows\n\n**Content Creation:**\n- Canvas area with drag-drop interface\n- Tool palette with categorized options\n- Property panel for selected elements\n- Template gallery with preview cards\n\n**Data Management:**\n- Table views with sorting/filtering\n- Card layouts for visual content\n- Upload areas with drag-drop zones\n- Progress indicators for processing\n\n**Privacy Controls:**\n- Toggle switches for privacy settings\n- Clear data usage indicators\n- Consent management modal\n- Export/delete data options\n\n**Forms:**\n- Floating labels for inputs\n- Clear validation states\n- Multi-step wizards for complex flows\n- Auto-save indicators\n\n### Visual Hierarchy\n- Use 4-6 shades of gray for text hierarchy\n- Bold typography for primary actions\n- Subtle shadows for card elevation\n- Strategic use of the accent color for success states only\n\n### Interactions\n- Hover states with subtle scale (102%) and shadow changes\n- Loading states with skeleton screens\n- Smooth transitions (200-300ms ease-out)\n- Clear focus indicators for accessibility\n\n## Images\n**Hero Section**: Medium-sized hero (60vh) showcasing the graphic creation interface with a blurred background featuring sample social media posts. Place a primary CTA button with variant=\"outline\" and blurred background overlay.\n\n**Feature Sections**: Screenshots of the interface, template gallery, and brand kit management. Use actual interface mockups rather than abstract illustrations.\n\n**Template Gallery**: Preview thumbnails of social media templates organized by platform and category.\n\nThis design prioritizes usability and efficiency while maintaining visual appeal appropriate for creative professionals.","size_bytes":3165},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    allowedHosts: true,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1141},"AutoDesignPro/design_guidelines.md":{"content":"# Social Media Graphics Automation Tool - Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from modern design tools like Canva and Figma, with productivity-focused patterns from Notion and Linear. This utility-focused application prioritizes efficiency and learnability for social media managers.\n\n## Core Design Elements\n\n### Color Palette\n**Light Mode:**\n- Primary: 264 100% 50% (vibrant purple for creative energy)\n- Secondary: 220 15% 25% (dark slate for text)\n- Background: 0 0% 98% (soft white)\n- Surface: 0 0% 100% (pure white cards)\n- Accent: 142 76% 50% (success green, used sparingly)\n\n**Dark Mode:**\n- Primary: 264 100% 60% (lighter purple for contrast)\n- Secondary: 210 40% 85% (light gray text)\n- Background: 222 20% 12% (deep dark blue)\n- Surface: 220 15% 16% (elevated dark cards)\n- Accent: 142 76% 60% (success green)\n\n### Typography\n- **Primary Font**: Inter (Google Fonts) - excellent readability for interfaces\n- **Display Font**: Plus Jakarta Sans (Google Fonts) - friendly, modern for headings\n- **Hierarchy**: h1 (32px), h2 (24px), h3 (20px), body (16px), small (14px)\n\n### Layout System\n**Tailwind Spacing**: Use units of 2, 4, 6, 8, 12, 16 for consistent rhythm\n- Base padding: p-4, p-6, p-8\n- Component margins: m-2, m-4, m-8\n- Heights: h-8, h-12, h-16 for consistent component sizing\n\n### Component Library\n\n**Navigation:**\n- Clean sidebar with icon + text labels\n- Top header with search and user profile\n- Breadcrumb navigation for deep workflows\n\n**Content Creation:**\n- Canvas area with drag-drop interface\n- Tool palette with categorized options\n- Property panel for selected elements\n- Template gallery with preview cards\n\n**Data Management:**\n- Table views with sorting/filtering\n- Card layouts for visual content\n- Upload areas with drag-drop zones\n- Progress indicators for processing\n\n**Privacy Controls:**\n- Toggle switches for privacy settings\n- Clear data usage indicators\n- Consent management modal\n- Export/delete data options\n\n**Forms:**\n- Floating labels for inputs\n- Clear validation states\n- Multi-step wizards for complex flows\n- Auto-save indicators\n\n### Visual Hierarchy\n- Use 4-6 shades of gray for text hierarchy\n- Bold typography for primary actions\n- Subtle shadows for card elevation\n- Strategic use of the accent color for success states only\n\n### Interactions\n- Hover states with subtle scale (102%) and shadow changes\n- Loading states with skeleton screens\n- Smooth transitions (200-300ms ease-out)\n- Clear focus indicators for accessibility\n\n## Images\n**Hero Section**: Medium-sized hero (60vh) showcasing the graphic creation interface with a blurred background featuring sample social media posts. Place a primary CTA button with variant=\"outline\" and blurred background overlay.\n\n**Feature Sections**: Screenshots of the interface, template gallery, and brand kit management. Use actual interface mockups rather than abstract illustrations.\n\n**Template Gallery**: Preview thumbnails of social media templates organized by platform and category.\n\nThis design prioritizes usability and efficiency while maintaining visual appeal appropriate for creative professionals.","size_bytes":3165},"AutoDesignPro/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"AutoDesignPro/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"AutoDesignPro/replit.md":{"content":"# BODYCRAFT Master Data Management (MDM) System\n\n## Overview\n\nThe BODYCRAFT Master Data Management (MDM) System is a comprehensive web application designed to manage IT assets across 32 retail outlets throughout India. The system replaces manual Excel-based tracking with a centralized platform that maintains complete audit trails, manages asset assignments, and integrates with existing infrastructure systems like CCTV and biometric devices.\n\nThe application serves as a single source of truth for asset management, employee tracking, and location-based operations, ensuring data integrity through historical preservation and comprehensive logging of all transactions.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18** with TypeScript for type safety and modern component patterns\n- **Vite** as the build tool for fast development and optimized production builds\n- **Wouter** for lightweight client-side routing\n- **TanStack Query** for server state management and caching\n- **Shadcn/ui** component library built on Radix UI primitives for accessible, customizable components\n- **Tailwind CSS** with custom design system for consistent styling\n\n### Backend Architecture\n- **Node.js** with Express.js providing RESTful API endpoints\n- **TypeScript** throughout the stack for consistent type safety\n- **Zod** for runtime schema validation and type inference\n- **Modular storage interface** allowing for flexible database implementations\n- **Session-based architecture** with PostgreSQL session store\n\n### Data Storage Solutions\n- **PostgreSQL** as the primary database with Neon serverless hosting\n- **Drizzle ORM** for type-safe database queries and schema management\n- **Historical data preservation** - assignment history is never overwritten\n- **Comprehensive audit trails** for all data modifications\n- **Multi-tenant data isolation** supporting all 32 outlet locations\n\n### Authentication and Authorization\n- **Session-based authentication** using connect-pg-simple for PostgreSQL session storage\n- **Role-based access control** framework ready for implementation\n- **Location-based data filtering** ensuring users see relevant outlet information\n\n### Design System\n- **Modern design approach** inspired by Canva and Figma\n- **Dual theme support** (light/dark) with purple primary branding\n- **Responsive design** supporting desktop, tablet, and mobile devices\n- **Accessibility-first** component library with keyboard navigation and screen reader support\n\n### Database Schema Design\nThe system uses a relational model with core entities:\n- **Locations** - 32 BODYCRAFT outlets with contact information\n- **Employees** - Staff members with department and designation tracking\n- **Assets** - IT equipment with detailed specifications and lifecycle management\n- **Assignment History** - Immutable record of asset-to-employee assignments\n- **Maintenance Records** - Service history and warranty tracking\n- **Integration Tables** - CCTV systems, biometric devices, and backup records\n\n### API Architecture\n- **RESTful endpoints** following standard HTTP conventions\n- **Consistent error handling** with proper status codes and error messages\n- **Input validation** using Zod schemas at API boundaries\n- **Structured logging** for debugging and audit purposes\n\n## External Dependencies\n\n### Database Services\n- **Neon Database** - Serverless PostgreSQL hosting with automatic scaling\n- **Drizzle Kit** - Database migration and schema management tools\n\n### UI Framework\n- **Radix UI** - Headless component primitives for accessibility and customization\n- **Lucide React** - Modern icon library with consistent styling\n- **Embla Carousel** - Touch-friendly carousel components\n- **Class Variance Authority** - Type-safe component variant management\n\n### Development Tools\n- **Vite Plugins** - Development enhancements including error overlay and development banner\n- **PostCSS with Autoprefixer** - CSS processing and vendor prefix management\n- **TypeScript** - Static type checking across the entire application\n\n### Google Fonts Integration\n- **Inter** - Primary interface font for excellent readability\n- **Plus Jakarta Sans** - Display font for headings and emphasis\n- **Additional fonts** - Extended typography palette for various use cases\n\n### Form Management\n- **React Hook Form** - Performance-optimized form handling\n- **Hookform Resolvers** - Zod integration for form validation\n\n### Utilities\n- **Date-fns** - Date manipulation and formatting\n- **clsx and tailwind-merge** - Conditional CSS class management\n- **nanoid** - Unique ID generation for sessions and records\n\nThe system is architected for scalability and maintainability, with clear separation of concerns and comprehensive type safety throughout the stack.","size_bytes":4826},"AutoDesignPro/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"AutoDesignPro/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/database-storage.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { eq, desc, and, or, like, isNull, sql, type SQL } from \"drizzle-orm\";\nimport { alias } from \"drizzle-orm/pg-core\";\nimport { \n  type Asset, type InsertAsset,\n  type Employee, type InsertEmployee, \n  type Location, type InsertLocation,\n  type Department, type InsertDepartment,\n  type AssetAssignmentHistory, type InsertAssetAssignmentHistory,\n  type AssetMaintenance, type InsertAssetMaintenance,\n  type CctvSystem, type InsertCctvSystem,\n  type BiometricSystem, type InsertBiometricSystem,\n  type Backup, type InsertBackup,\n  type User, type InsertUser,\n  type CompanySettings, type InsertCompanySettings,\n  type AssetType, type InsertAssetType,\n  type ApprovalRequest, type InsertApprovalRequest,\n  type ApprovalAction, type InsertApprovalAction,\n  type Invoice, type InsertInvoice,\n  type ComplianceTask, type InsertComplianceTask,\n  type ComplianceEvidence, type InsertComplianceEvidence,\n  type ComplianceAuditTrail, type InsertComplianceAuditTrail,\n  type AssetTransfer, type InsertAssetTransfer,\n  type ComplianceSignal, type InsertComplianceSignal,\n  type ComplianceRiskScore, type InsertComplianceRiskScore,\n  type AutomationRun, type InsertAutomationRun,\n  type AiRecommendation, type InsertAiRecommendation,\n  type BackupVerification, type InsertBackupVerification,\n  type ComplianceAssignmentQueue, type InsertComplianceAssignmentQueue,\n  assets, employees, locations, departments, assetAssignmentHistory, assetMaintenance,\n  cctvSystems, biometricSystems, backups, users, companySettings, assetTypes,\n  approvalRequests, approvalActions, invoices,\n  complianceTasks, complianceEvidence, complianceAuditTrail, assetTransfers,\n  complianceSignals, complianceRiskScores, automationRuns, aiRecommendations,\n  backupVerification, complianceAssignmentQueue\n} from \"@shared/schema\";\nimport { IStorage } from \"./storage\";\n\nconst sql = neon(process.env.DATABASE_URL!);\nconst db = drizzle(sql);\n\nexport class DatabaseStorage implements IStorage {\n  // Assets\n  async getAsset(assetId: string): Promise<Asset | undefined> {\n    const result = await db.select().from(assets).where(eq(assets.assetId, assetId));\n    return result[0];\n  }\n\n  async getAllAssets(): Promise<Asset[]> {\n    return await db.select().from(assets).orderBy(desc(assets.createdAt));\n  }\n\n  async createAsset(asset: InsertAsset): Promise<Asset> {\n    const result = await db.insert(assets).values({\n      ...asset,\n      status: asset.status || \"available\",\n      condition: asset.condition || \"good\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateAsset(assetId: string, asset: Partial<InsertAsset>): Promise<Asset | undefined> {\n    const result = await db.update(assets)\n      .set({ \n        ...asset, \n        updatedAt: new Date() \n      })\n      .where(eq(assets.assetId, assetId))\n      .returning();\n    return result[0];\n  }\n\n  async deleteAsset(assetId: string): Promise<boolean> {\n    const result = await db.delete(assets).where(eq(assets.assetId, assetId));\n    return result.rowCount > 0;\n  }\n\n  // Employees\n  async getEmployee(id: number): Promise<Employee | undefined> {\n    const result = await db.select().from(employees).where(eq(employees.id, id));\n    return result[0];\n  }\n\n  async getAllEmployees(): Promise<Employee[]> {\n    return await db.select().from(employees).orderBy(desc(employees.createdAt));\n  }\n\n  async createEmployee(employee: InsertEmployee): Promise<Employee> {\n    const result = await db.insert(employees).values({\n      ...employee,\n      status: employee.status || \"active\",\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateEmployee(id: number, employee: Partial<InsertEmployee>): Promise<Employee | undefined> {\n    const result = await db.update(employees)\n      .set(employee)\n      .where(eq(employees.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteEmployee(id: number): Promise<boolean> {\n    const result = await db.delete(employees).where(eq(employees.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Locations\n  async getLocation(id: number): Promise<Location | undefined> {\n    const result = await db.select().from(locations).where(eq(locations.id, id));\n    return result[0];\n  }\n\n  async getAllLocations(): Promise<Location[]> {\n    return await db.select().from(locations).orderBy(desc(locations.createdAt));\n  }\n\n  async createLocation(location: InsertLocation): Promise<Location> {\n    const result = await db.insert(locations).values({\n      ...location,\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateLocation(id: number, location: Partial<InsertLocation>): Promise<Location | undefined> {\n    const result = await db.update(locations)\n      .set(location)\n      .where(eq(locations.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteLocation(id: number): Promise<boolean> {\n    const result = await db.delete(locations).where(eq(locations.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Departments\n  async getDepartment(id: number): Promise<Department | undefined> {\n    const result = await db.select().from(departments).where(eq(departments.id, id));\n    return result[0];\n  }\n\n  async getAllDepartments(): Promise<Department[]> {\n    return await db.select().from(departments).orderBy(departments.name);\n  }\n\n  async createDepartment(department: InsertDepartment): Promise<Department> {\n    const result = await db.insert(departments).values({\n      ...department,\n      isActive: department.isActive !== undefined ? department.isActive : true,\n      isCustom: department.isCustom !== undefined ? department.isCustom : false,\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateDepartment(id: number, department: Partial<InsertDepartment>): Promise<Department | undefined> {\n    const result = await db.update(departments)\n      .set(department)\n      .where(eq(departments.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteDepartment(id: number): Promise<boolean> {\n    const result = await db.delete(departments).where(eq(departments.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Assignment History\n  async getAssignmentHistory(assetId?: string, employeeId?: number): Promise<AssetAssignmentHistory[]> {\n    let query = db.select().from(assetAssignmentHistory);\n    \n    if (assetId && employeeId) {\n      query = query.where(and(\n        eq(assetAssignmentHistory.assetId, assetId),\n        eq(assetAssignmentHistory.employeeId, employeeId)\n      ));\n    } else if (assetId) {\n      query = query.where(eq(assetAssignmentHistory.assetId, assetId));\n    } else if (employeeId) {\n      query = query.where(eq(assetAssignmentHistory.employeeId, employeeId));\n    }\n    \n    return await query.orderBy(desc(assetAssignmentHistory.createdAt));\n  }\n\n  async createAssignment(assignment: InsertAssetAssignmentHistory): Promise<AssetAssignmentHistory> {\n    const result = await db.insert(assetAssignmentHistory).values({\n      ...assignment,\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  // Maintenance\n  async getMaintenanceRecords(assetId?: string): Promise<AssetMaintenance[]> {\n    let query = db.select().from(assetMaintenance);\n    \n    if (assetId) {\n      query = query.where(eq(assetMaintenance.assetId, assetId));\n    }\n    \n    return await query.orderBy(desc(assetMaintenance.createdAt));\n  }\n\n  async createMaintenanceRecord(maintenance: InsertAssetMaintenance): Promise<AssetMaintenance> {\n    const result = await db.insert(assetMaintenance).values({\n      ...maintenance,\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateMaintenanceRecord(id: number, maintenance: Partial<InsertAssetMaintenance>): Promise<AssetMaintenance | undefined> {\n    const result = await db.update(assetMaintenance)\n      .set(maintenance)\n      .where(eq(assetMaintenance.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteMaintenanceRecord(id: number): Promise<boolean> {\n    const result = await db.delete(assetMaintenance).where(eq(assetMaintenance.id, id));\n    return result.rowCount > 0;\n  }\n\n  // CCTV Systems\n  async getAllCctvSystems(): Promise<CctvSystem[]> {\n    return await db.select().from(cctvSystems).orderBy(desc(cctvSystems.createdAt));\n  }\n\n  async createCctvSystem(system: InsertCctvSystem): Promise<CctvSystem> {\n    const result = await db.insert(cctvSystems).values({\n      ...system,\n      status: system.status || \"online\",\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateCctvSystem(id: number, system: Partial<InsertCctvSystem>): Promise<CctvSystem | undefined> {\n    const result = await db.update(cctvSystems)\n      .set(system)\n      .where(eq(cctvSystems.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteCctvSystem(id: number): Promise<boolean> {\n    const result = await db.delete(cctvSystems).where(eq(cctvSystems.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Biometric Systems\n  async getAllBiometricSystems(): Promise<BiometricSystem[]> {\n    return await db.select().from(biometricSystems).orderBy(desc(biometricSystems.createdAt));\n  }\n\n  async createBiometricSystem(system: InsertBiometricSystem): Promise<BiometricSystem> {\n    const result = await db.insert(biometricSystems).values({\n      ...system,\n      status: system.status || \"online\",\n      employeeCount: system.employeeCount || 0,\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateBiometricSystem(id: number, system: Partial<InsertBiometricSystem>): Promise<BiometricSystem | undefined> {\n    const result = await db.update(biometricSystems)\n      .set(system)\n      .where(eq(biometricSystems.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteBiometricSystem(id: number): Promise<boolean> {\n    const result = await db.delete(biometricSystems).where(eq(biometricSystems.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Backups\n  async getBackups(assetId?: string): Promise<Backup[]> {\n    let query = db.select().from(backups);\n    \n    if (assetId) {\n      query = query.where(eq(backups.assetId, assetId));\n    }\n    \n    return await query.orderBy(desc(backups.createdAt));\n  }\n\n  async createBackup(backup: InsertBackup): Promise<Backup> {\n    const result = await db.insert(backups).values({\n      ...backup,\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateBackup(id: number, backup: Partial<InsertBackup>): Promise<Backup | undefined> {\n    const result = await db.update(backups)\n      .set(backup)\n      .where(eq(backups.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteBackup(id: number): Promise<boolean> {\n    const result = await db.delete(backups).where(eq(backups.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Additional methods for user management and settings\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values({\n      ...user,\n      status: user.status || \"active\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username));\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email));\n    return result[0];\n  }\n\n  async getUserById(id: number): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id));\n    return result[0];\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async updateUser(id: number, user: Partial<InsertUser>): Promise<User | undefined> {\n    const result = await db.update(users)\n      .set({ \n        ...user, \n        updatedAt: new Date() \n      })\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getCompanySettings(): Promise<CompanySettings | undefined> {\n    const result = await db.select().from(companySettings).limit(1);\n    return result[0];\n  }\n\n  async updateCompanySettings(settings: Partial<InsertCompanySettings>): Promise<CompanySettings> {\n    const existing = await this.getCompanySettings();\n    \n    if (existing) {\n      const result = await db.update(companySettings)\n        .set({ \n          ...settings, \n          updatedAt: new Date() \n        })\n        .where(eq(companySettings.id, existing.id))\n        .returning();\n      return result[0];\n    } else {\n      const result = await db.insert(companySettings).values({\n        ...settings,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }).returning();\n      return result[0];\n    }\n  }\n\n  async getAllAssetTypes(): Promise<AssetType[]> {\n    return await db.select().from(assetTypes)\n      .where(eq(assetTypes.isActive, true))\n      .orderBy(assetTypes.name);\n  }\n\n  async createAssetType(assetType: InsertAssetType): Promise<AssetType> {\n    const result = await db.insert(assetTypes).values({\n      ...assetType,\n      isActive: assetType.isActive ?? true,\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  // Dashboard statistics methods\n  async getDashboardStats() {\n    const [totalAssets, assignedAssets, availableAssets, maintenanceAssets] = await Promise.all([\n      db.select().from(assets),\n      db.select().from(assets).where(eq(assets.status, 'assigned')),\n      db.select().from(assets).where(eq(assets.status, 'available')),\n      db.select().from(assets).where(eq(assets.status, 'maintenance'))\n    ]);\n\n    const [totalEmployees, totalLocations, activeCctvSystems, activeBiometricSystems] = await Promise.all([\n      db.select().from(employees).where(eq(employees.status, 'active')),\n      db.select().from(locations),\n      db.select().from(cctvSystems).where(eq(cctvSystems.status, 'online')),\n      db.select().from(biometricSystems).where(eq(biometricSystems.status, 'online'))\n    ]);\n\n    return {\n      totalAssets: totalAssets.length,\n      assignedAssets: assignedAssets.length,\n      availableAssets: availableAssets.length,\n      maintenanceAssets: maintenanceAssets.length,\n      utilizationRate: totalAssets.length > 0 ? Math.round((assignedAssets.length / totalAssets.length) * 100) : 0,\n      totalEmployees: totalEmployees.length,\n      totalLocations: totalLocations.length,\n      activeCctvSystems: activeCctvSystems.length,\n      activeBiometricSystems: activeBiometricSystems.length,\n      systemHealth: 100 // Calculate based on your criteria\n    };\n  }\n\n  // Search functionality\n  async searchAssets(searchTerm: string): Promise<Asset[]> {\n    return await db.select().from(assets)\n      .where(or(\n        like(assets.assetId, `%${searchTerm}%`),\n        like(assets.modelName, `%${searchTerm}%`),\n        like(assets.brand, `%${searchTerm}%`),\n        like(assets.serviceTag, `%${searchTerm}%`)\n      ))\n      .orderBy(desc(assets.createdAt));\n  }\n\n  async searchEmployees(searchTerm: string): Promise<Employee[]> {\n    return await db.select().from(employees)\n      .where(or(\n        like(employees.employeeCode, `%${searchTerm}%`),\n        like(employees.firstName, `%${searchTerm}%`),\n        like(employees.lastName, `%${searchTerm}%`),\n        like(employees.email, `%${searchTerm}%`)\n      ))\n      .orderBy(desc(employees.createdAt));\n  }\n\n  // Get recent activities for dashboard\n  async getRecentActivities(limit: number = 10) {\n    return await db.select({\n      id: assetAssignmentHistory.id,\n      type: 'assignment',\n      assetId: assetAssignmentHistory.assetId,\n      employeeId: assetAssignmentHistory.employeeId,\n      date: assetAssignmentHistory.assignedDate,\n      reason: assetAssignmentHistory.assignmentReason,\n      createdAt: assetAssignmentHistory.createdAt\n    })\n    .from(assetAssignmentHistory)\n    .where(isNull(assetAssignmentHistory.returnedDate))\n    .orderBy(desc(assetAssignmentHistory.createdAt))\n    .limit(limit);\n  }\n\n  // Approval Requests\n  async getApprovalRequest(id: number): Promise<ApprovalRequest | undefined> {\n    const result = await db.select().from(approvalRequests).where(eq(approvalRequests.id, id));\n    return result[0];\n  }\n\n  async getAllApprovalRequests(filters?: { status?: string; requestedBy?: number }): Promise<ApprovalRequest[]> {\n    if (!filters || (!filters.status && !filters.requestedBy)) {\n      return await db\n        .select()\n        .from(approvalRequests)\n        .orderBy(desc(approvalRequests.requestedAt));\n    }\n    \n    const conditions: SQL<unknown>[] = [];\n    if (filters.status) {\n      conditions.push(eq(approvalRequests.status, filters.status));\n    }\n    if (filters.requestedBy) {\n      conditions.push(eq(approvalRequests.requestedBy, filters.requestedBy));\n    }\n    \n    return await db\n      .select()\n      .from(approvalRequests)\n      .where(and(...conditions))\n      .orderBy(desc(approvalRequests.requestedAt));\n  }\n\n  async createApprovalRequest(request: InsertApprovalRequest): Promise<ApprovalRequest> {\n    const result = await db.insert(approvalRequests).values({\n      ...request,\n      status: request.status || \"pending\",\n      currentApprovalLevel: request.currentApprovalLevel || 1,\n      requiredApprovalLevels: request.requiredApprovalLevels || 1,\n      requestedAt: new Date(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateApprovalRequest(id: number, request: Partial<InsertApprovalRequest>): Promise<ApprovalRequest | undefined> {\n    const result = await db.update(approvalRequests)\n      .set({\n        ...request,\n        updatedAt: new Date(),\n      })\n      .where(eq(approvalRequests.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Approval Actions\n  async getApprovalActions(requestId: number): Promise<ApprovalAction[]> {\n    return await db.select().from(approvalActions)\n      .where(eq(approvalActions.requestId, requestId))\n      .orderBy(approvalActions.approvalLevel);\n  }\n\n  async createApprovalAction(action: InsertApprovalAction): Promise<ApprovalAction> {\n    const result = await db.insert(approvalActions).values({\n      ...action,\n      actionAt: new Date(),\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  // Invoices\n  async getAllInvoices(): Promise<Invoice[]> {\n    return await db.select().from(invoices).orderBy(desc(invoices.invoiceDate));\n  }\n\n  async getInvoice(id: number): Promise<Invoice | undefined> {\n    const result = await db.select().from(invoices).where(eq(invoices.id, id));\n    return result[0];\n  }\n\n  async createInvoice(invoice: InsertInvoice): Promise<Invoice> {\n    const result = await db.insert(invoices).values({\n      ...invoice,\n      paymentStatus: invoice.paymentStatus || \"unpaid\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateInvoice(id: number, invoice: Partial<InsertInvoice>): Promise<Invoice | undefined> {\n    const result = await db.update(invoices)\n      .set({\n        ...invoice,\n        updatedAt: new Date(),\n      })\n      .where(eq(invoices.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteInvoice(id: number): Promise<boolean> {\n    const result = await db.delete(invoices).where(eq(invoices.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Compliance Management\n  async getComplianceTasks(filters?: { status?: string; priority?: string; taskType?: string; locationId?: number; overdueOnly?: boolean }): Promise<any[]> {\n    const assignedToUser = alias(users, 'assignedToUser');\n    const createdByUser = alias(users, 'createdByUser');\n    \n    const baseQuery = db.select({\n      task: complianceTasks,\n      assignedToUser: assignedToUser,\n      createdByUser: createdByUser,\n      location: locations,\n    }).from(complianceTasks)\n      .leftJoin(assignedToUser, eq(complianceTasks.assignedTo, assignedToUser.id))\n      .leftJoin(createdByUser, eq(complianceTasks.createdBy, createdByUser.id))\n      .leftJoin(locations, eq(complianceTasks.locationId, locations.id));\n\n    const conditions: SQL<unknown>[] = [];\n    \n    if (filters?.status) {\n      conditions.push(eq(complianceTasks.status, filters.status));\n    }\n    \n    if (filters?.priority) {\n      conditions.push(eq(complianceTasks.priority, filters.priority));\n    }\n    \n    if (filters?.taskType) {\n      conditions.push(eq(complianceTasks.taskType, filters.taskType));\n    }\n    \n    if (filters?.locationId) {\n      conditions.push(eq(complianceTasks.locationId, filters.locationId));\n    }\n    \n    if (filters?.overdueOnly) {\n      // Filter for overdue tasks will be done in the map function after fetching\n      conditions.push(eq(complianceTasks.status, 'pending'));\n    }\n\n    const results = conditions.length > 0 \n      ? await baseQuery.where(and(...conditions)).orderBy(desc(complianceTasks.createdAt))\n      : await baseQuery.orderBy(desc(complianceTasks.createdAt));\n    \n    // Fetch evidence files for all tasks\n    const taskIds = results.map((r: any) => r.task.id);\n    let evidenceMap: Record<number, string[]> = {};\n    \n    if (taskIds.length > 0) {\n      const evidence = await db.select()\n        .from(complianceEvidence)\n        .where(eq(complianceEvidence.taskId, taskIds[0])); // Get evidence for first task to check\n      \n      // Build evidence map for all tasks\n      for (const taskId of taskIds) {\n        const taskEvidence = await db.select()\n          .from(complianceEvidence)\n          .where(eq(complianceEvidence.taskId, taskId));\n        evidenceMap[taskId] = taskEvidence.map(e => e.fileUrl);\n      }\n    }\n    \n    // Compute is_overdue and days_until_due\n    return results.map((row: any) => {\n      const dueDate = new Date(row.task.dueDate);\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      dueDate.setHours(0, 0, 0, 0);\n      \n      const diffTime = dueDate.getTime() - today.getTime();\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      \n      return {\n        ...row.task,\n        assignedToName: row.assignedToUser ? `${row.assignedToUser.firstName} ${row.assignedToUser.lastName}` : null,\n        createdByName: row.createdByUser ? `${row.createdByUser.firstName} ${row.createdByUser.lastName}` : null,\n        locationName: row.location?.outletName || null,\n        evidenceFiles: evidenceMap[row.task.id] || null,\n        isOverdue: row.task.status === 'pending' && diffDays < 0,\n        daysUntilDue: diffDays,\n      };\n    });\n  }\n\n  async getComplianceTask(id: number): Promise<any | undefined> {\n    const assignedToUser = alias(users, 'assignedToUser');\n    const createdByUser = alias(users, 'createdByUser');\n    \n    const result = await db.select({\n      task: complianceTasks,\n      assignedToUser: assignedToUser,\n      createdByUser: createdByUser,\n      location: locations,\n    }).from(complianceTasks)\n      .leftJoin(assignedToUser, eq(complianceTasks.assignedTo, assignedToUser.id))\n      .leftJoin(createdByUser, eq(complianceTasks.createdBy, createdByUser.id))\n      .leftJoin(locations, eq(complianceTasks.locationId, locations.id))\n      .where(eq(complianceTasks.id, id));\n    \n    if (result.length === 0) return undefined;\n    \n    const row = result[0];\n    return {\n      ...row.task,\n      assignedToName: row.assignedToUser ? `${row.assignedToUser.firstName} ${row.assignedToUser.lastName}` : null,\n      createdByName: row.createdByUser ? `${row.createdByUser.firstName} ${row.createdByUser.lastName}` : null,\n      locationName: row.location?.outletName || null,\n    };\n  }\n\n  async createComplianceTask(task: InsertComplianceTask): Promise<ComplianceTask> {\n    const result = await db.insert(complianceTasks).values({\n      ...task,\n      priority: task.priority || 'medium',\n      status: task.status || 'pending',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateComplianceTask(id: number, task: Partial<InsertComplianceTask>): Promise<ComplianceTask | undefined> {\n    const result = await db.update(complianceTasks)\n      .set({\n        ...task,\n        updatedAt: new Date(),\n      })\n      .where(eq(complianceTasks.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteComplianceTask(id: number): Promise<boolean> {\n    const result = await db.delete(complianceTasks).where(eq(complianceTasks.id, id));\n    return result.rowCount > 0;\n  }\n\n  async getComplianceDashboardStats(locationId?: number): Promise<any> {\n    let tasksQuery = db.select().from(complianceTasks);\n    \n    if (locationId) {\n      tasksQuery = tasksQuery.where(eq(complianceTasks.locationId, locationId)) as any;\n    }\n    \n    const tasks = await tasksQuery;\n    \n    const stats = {\n      totalTasks: tasks.length,\n      pending: tasks.filter(t => t.status === 'pending').length,\n      inProgress: tasks.filter(t => t.status === 'in_progress').length,\n      completed: tasks.filter(t => t.status === 'completed').length,\n      overdue: tasks.filter(t => {\n        if (t.status !== 'pending') return false;\n        const dueDate = new Date(t.dueDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        return dueDate < today;\n      }).length,\n      highRisk: tasks.filter(t => t.riskLevel === 'high' || t.riskLevel === 'critical').length,\n      avgComplianceScore: tasks.reduce((sum, t) => sum + (t.complianceScore || 0), 0) / (tasks.length || 1),\n      completionRate: tasks.length > 0 ? (tasks.filter(t => t.status === 'completed').length / tasks.length) * 100 : 0,\n    };\n    \n    // Get recent tasks\n    const recentTasks = await db.select({\n      task: complianceTasks,\n      assignedToUser: users,\n      location: locations,\n    }).from(complianceTasks)\n      .leftJoin(users, eq(complianceTasks.assignedTo, users.id))\n      .leftJoin(locations, eq(complianceTasks.locationId, locations.id))\n      .orderBy(desc(complianceTasks.createdAt))\n      .limit(5);\n    \n    return {\n      ...stats,\n      recentTasks: recentTasks.map(row => ({\n        ...row.task,\n        assignedToName: row.assignedToUser ? `${row.assignedToUser.firstName} ${row.assignedToUser.lastName}` : null,\n        locationName: row.location?.outletName || null,\n      })),\n    };\n  }\n\n  async uploadComplianceEvidence(evidence: InsertComplianceEvidence): Promise<ComplianceEvidence> {\n    const result = await db.insert(complianceEvidence).values({\n      ...evidence,\n      uploadedAt: new Date(),\n      verificationStatus: evidence.verificationStatus || 'pending',\n    }).returning();\n    return result[0];\n  }\n\n  async createComplianceAuditTrail(trail: InsertComplianceAuditTrail): Promise<ComplianceAuditTrail> {\n    const result = await db.insert(complianceAuditTrail).values({\n      ...trail,\n      timestamp: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async getComplianceAuditTrail(taskId: number): Promise<any[]> {\n    const results = await db.select({\n      trail: complianceAuditTrail,\n      user: users,\n    }).from(complianceAuditTrail)\n      .leftJoin(users, eq(complianceAuditTrail.performedBy, users.id))\n      .where(eq(complianceAuditTrail.taskId, taskId))\n      .orderBy(desc(complianceAuditTrail.timestamp));\n    \n    return results.map((row: any) => ({\n      ...row.trail,\n      performedByName: row.user ? `${row.user.firstName} ${row.user.lastName}` : 'Unknown User',\n    }));\n  }\n\n  // Phase 2: Predictive Analytics\n  async getPredictiveMaintenance(locationId: number | null, assetType: string | null, riskLevel: string | null): Promise<any[]> {\n    const assignedAssets = await db.select({\n      asset: assets,\n      location: locations,\n    }).from(assets)\n      .leftJoin(locations, eq(assets.locationId, locations.id))\n      .where(\n        and(\n          eq(assets.status, 'assigned'),\n          locationId ? eq(assets.locationId, locationId) : undefined,\n          assetType ? eq(assets.assetType, assetType) : undefined\n        )\n      );\n\n    const predictions = await Promise.all(assignedAssets.map(async (row: any) => {\n      const asset = row.asset;\n      const location = row.location;\n\n      // Get maintenance history\n      const maintenanceHistory = await db.select()\n        .from(assetMaintenance)\n        .where(eq(assetMaintenance.assetId, asset.assetId));\n\n      const maintenanceCount = maintenanceHistory.length;\n      const totalCost = maintenanceHistory.reduce((sum, m) => sum + (Number(m.cost) || 0), 0);\n      const avgMaintenanceCost = maintenanceCount > 0 ? totalCost / maintenanceCount : 0;\n\n      const lastMaintenance = maintenanceHistory.sort((a, b) => \n        new Date(b.completedDate || b.scheduledDate || 0).getTime() - \n        new Date(a.completedDate || a.scheduledDate || 0).getTime()\n      )[0];\n\n      const lastMaintenanceDate = lastMaintenance ? (lastMaintenance.completedDate || lastMaintenance.scheduledDate) : null;\n      const daysSinceMaintenance = lastMaintenanceDate ? \n        Math.floor((Date.now() - new Date(lastMaintenanceDate).getTime()) / (1000 * 60 * 60 * 24)) : \n        (asset.purchaseDate ? Math.floor((Date.now() - new Date(asset.purchaseDate).getTime()) / (1000 * 60 * 60 * 24)) : 365);\n\n      // Risk model\n      let failureRisk = 'low';\n      let predictedDaysToFailure = 180;\n      let recommendedAction = 'Continue monitoring';\n      let estimatedCost = avgMaintenanceCost || 1000;\n\n      if (daysSinceMaintenance > 180 || maintenanceCount > 5) {\n        failureRisk = 'high';\n        predictedDaysToFailure = 30;\n        recommendedAction = 'Schedule immediate preventive maintenance';\n        estimatedCost = avgMaintenanceCost * 1.5 || 5000;\n      } else if (daysSinceMaintenance > 90 || maintenanceCount > 3) {\n        failureRisk = 'medium';\n        predictedDaysToFailure = 60;\n        recommendedAction = 'Schedule preventive maintenance within 30 days';\n        estimatedCost = avgMaintenanceCost * 1.2 || 3000;\n      }\n\n      return {\n        assetId: asset.assetId,\n        modelName: asset.modelName,\n        brand: asset.brand,\n        assetType: asset.assetType,\n        locationName: location?.outletName || 'Unknown',\n        purchaseDate: asset.purchaseDate,\n        maintenanceCount,\n        avgMaintenanceCost: Number(avgMaintenanceCost.toFixed(2)),\n        lastMaintenanceDate,\n        daysSinceMaintenance,\n        failureRisk,\n        predictedDaysToFailure,\n        recommendedAction,\n        estimatedCost: Number(estimatedCost.toFixed(2)),\n      };\n    }));\n\n    // Filter by risk level if specified\n    if (riskLevel) {\n      return predictions.filter(p => p.failureRisk === riskLevel);\n    }\n\n    return predictions;\n  }\n\n  async getUtilizationOptimization(): Promise<any> {\n    const allLocations = await db.select().from(locations);\n    \n    const locationStats = await Promise.all(allLocations.map(async (location) => {\n      const totalAssets = await db.select().from(assets).where(eq(assets.locationId, location.id));\n      const assignedAssets = totalAssets.filter(a => a.status === 'assigned');\n      const availableAssets = totalAssets.filter(a => a.status === 'available');\n      const totalEmployees = await db.select().from(employees).where(eq(employees.locationId, location.id));\n\n      const utilizationRate = totalAssets.length > 0 ? Math.round((assignedAssets.length / totalAssets.length) * 100) : 0;\n      const assetsPerEmployee = totalEmployees.length > 0 ? Number((assignedAssets.length / totalEmployees.length).toFixed(2)) : 0;\n      \n      // Calculate efficiency score (combination of utilization and assets per employee)\n      const efficiencyScore = Math.round((utilizationRate * 0.7) + (Math.min(assetsPerEmployee * 20, 30)));\n\n      // Generate recommendations\n      const recommendations = [];\n      if (utilizationRate < 60) {\n        recommendations.push({\n          priority: 'high',\n          action: `Redistribute ${availableAssets.length} unused assets to other locations`,\n          expectedGain: `Improve utilization by ${100 - utilizationRate}%`,\n        });\n      }\n      if (assetsPerEmployee < 0.5) {\n        recommendations.push({\n          priority: 'medium',\n          action: 'Consider asset procurement to meet employee needs',\n          expectedGain: 'Improve productivity and employee satisfaction',\n        });\n      }\n      if (assetsPerEmployee > 2) {\n        recommendations.push({\n          priority: 'low',\n          action: 'Excess assets detected - consider redistribution',\n          expectedGain: 'Optimize asset allocation across locations',\n        });\n      }\n\n      return {\n        locationId: location.id,\n        locationName: location.outletName,\n        totalAssets: totalAssets.length,\n        assignedAssets: assignedAssets.length,\n        availableAssets: availableAssets.length,\n        totalEmployees: totalEmployees.length,\n        utilizationRate,\n        assetsPerEmployee,\n        efficiencyScore,\n        recommendations,\n      };\n    }));\n\n    return {\n      locations: locationStats,\n      summary: {\n        totalLocations: allLocations.length,\n        avgUtilization: Math.round(locationStats.reduce((sum, l) => sum + l.utilizationRate, 0) / locationStats.length),\n        avgEfficiencyScore: Math.round(locationStats.reduce((sum, l) => sum + l.efficiencyScore, 0) / locationStats.length),\n      },\n    };\n  }\n\n  async getLocationPerformanceAnalytics(): Promise<any[]> {\n    const allLocations = await db.select().from(locations);\n\n    const performance = await Promise.all(allLocations.map(async (location) => {\n      const totalAssets = await db.select().from(assets).where(eq(assets.locationId, location.id));\n      const activeAssets = totalAssets.filter(a => a.status === 'assigned');\n      const allEmployees = await db.select().from(employees).where(eq(employees.locationId, location.id));\n      const activeEmployees = allEmployees.filter(e => e.status === 'active');\n\n      const maintenanceRecords = await db.select()\n        .from(assetMaintenance)\n        .innerJoin(assets, eq(assetMaintenance.assetId, assets.assetId))\n        .where(eq(assets.locationId, location.id));\n\n      const totalMaintenance = maintenanceRecords.length;\n      const totalMaintenanceCost = maintenanceRecords.reduce((sum, r) => sum + (Number(r.asset_maintenance.cost) || 0), 0);\n\n      const locationComplianceTasks = await db.select()\n        .from(complianceTasks)\n        .where(eq(complianceTasks.locationId, location.id));\n\n      const completedCompliance = locationComplianceTasks.filter((t: any) => t.status === 'completed').length;\n      const avgComplianceScore = locationComplianceTasks.length > 0 ? \n        Math.round(locationComplianceTasks.reduce((sum: number, t: any) => sum + (t.complianceScore || 0), 0) / locationComplianceTasks.length) : 0;\n\n      const utilizationRate = totalAssets.length > 0 ? Math.round((activeAssets.length / totalAssets.length) * 100) : 0;\n      const complianceRate = locationComplianceTasks.length > 0 ? Math.round((completedCompliance / locationComplianceTasks.length) * 100) : 0;\n      const assetPerEmployee = activeEmployees.length > 0 ? Number((activeAssets.length / activeEmployees.length).toFixed(2)) : 0;\n      const avgMaintenanceCost = totalMaintenance > 0 ? Number((totalMaintenanceCost / totalMaintenance).toFixed(2)) : 0;\n\n      // Performance score calculation\n      const performanceScore = Math.round(\n        (utilizationRate * 0.3) + \n        (complianceRate * 0.3) + \n        (Math.min(assetPerEmployee * 20, 20)) + \n        ((100 - Math.min(avgMaintenanceCost / 100, 30)))\n      );\n\n      return {\n        locationId: location.id,\n        locationName: location.outletName,\n        city: location.city,\n        state: location.state,\n        totalAssets: totalAssets.length,\n        activeAssets: activeAssets.length,\n        totalEmployees: allEmployees.length,\n        activeEmployees: activeEmployees.length,\n        totalMaintenance,\n        totalMaintenanceCost: Number(totalMaintenanceCost.toFixed(2)),\n        totalComplianceTasks: locationComplianceTasks.length,\n        completedCompliance,\n        avgComplianceScore,\n        utilizationRate,\n        complianceRate,\n        assetPerEmployee,\n        avgMaintenanceCost,\n        performanceScore,\n      };\n    }));\n\n    // Add performance rank\n    const rankedPerformance = performance\n      .sort((a, b) => b.performanceScore - a.performanceScore)\n      .map((loc, index) => ({\n        ...loc,\n        performanceRank: index + 1,\n      }));\n\n    return rankedPerformance;\n  }\n\n  async createAssetTransfer(transfer: InsertAssetTransfer): Promise<AssetTransfer> {\n    const result = await db.insert(assetTransfers).values({\n      ...transfer,\n      createdAt: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async getRealTimeDashboardData(): Promise<any> {\n    // Asset stats\n    const allAssets = await db.select().from(assets);\n    const totalAssets = allAssets.length;\n    const assignedAssets = allAssets.filter(a => a.status === 'assigned').length;\n    const availableAssets = allAssets.filter(a => a.status === 'available').length;\n    const maintenanceAssets = allAssets.filter(a => a.status === 'maintenance').length;\n    const retiredAssets = allAssets.filter(a => a.status === 'retired').length;\n    const utilizationRate = totalAssets > 0 ? Math.round((assignedAssets / totalAssets) * 100) : 0;\n\n    // Financial stats\n    const allInvoices = await db.select().from(invoices);\n    const totalInvoices = allInvoices.reduce((sum, inv) => sum + Number(inv.amount), 0);\n    const paidInvoices = allInvoices.filter(inv => inv.paymentStatus === 'paid').reduce((sum, inv) => sum + Number(inv.amount), 0);\n    const pendingInvoices = allInvoices.filter(inv => inv.paymentStatus === 'unpaid' || inv.paymentStatus === 'partial').reduce((sum, inv) => sum + Number(inv.amount), 0);\n    const invoiceCount = allInvoices.length;\n    const collectionRate = totalInvoices > 0 ? Math.round((paidInvoices / totalInvoices) * 100) : 0;\n\n    // Maintenance stats\n    const allMaintenance = await db.select().from(assetMaintenance);\n    const completedMaintenance = allMaintenance.filter(m => m.completedDate).length;\n    const scheduledMaintenance = allMaintenance.filter(m => m.scheduledDate && !m.completedDate).length;\n    const overdueMaintenance = allMaintenance.filter(m => \n      m.scheduledDate && !m.completedDate && new Date(m.scheduledDate) < new Date()\n    ).length;\n    const avgMaintenanceCost = allMaintenance.length > 0 ? \n      Number((allMaintenance.reduce((sum, m) => sum + Number(m.cost || 0), 0) / allMaintenance.length).toFixed(2)) : 0;\n    const maintenanceCompletionRate = allMaintenance.length > 0 ? Math.round((completedMaintenance / allMaintenance.length) * 100) : 0;\n\n    // Compliance stats\n    const allComplianceTasks = await db.select().from(complianceTasks);\n    const completedCompliance = allComplianceTasks.filter(t => t.status === 'completed').length;\n    const overdueCompliance = allComplianceTasks.filter(t => \n      t.status === 'pending' && new Date(t.dueDate) < new Date()\n    ).length;\n    const avgComplianceScore = allComplianceTasks.length > 0 ? \n      Math.round(allComplianceTasks.reduce((sum, t) => sum + (t.complianceScore || 0), 0) / allComplianceTasks.length) : 0;\n    const complianceCompletionRate = allComplianceTasks.length > 0 ? Math.round((completedCompliance / allComplianceTasks.length) * 100) : 0;\n\n    // Recent activities (simulated - in production, use audit logs)\n    const recentActivities = [\n      { type: 'asset', entity: 'Asset BFC001 assigned', date: new Date() },\n      { type: 'maintenance', entity: 'Maintenance completed for BFC002', date: new Date() },\n      { type: 'compliance', entity: 'Compliance task updated', date: new Date() },\n    ].slice(0, 10);\n\n    return {\n      assets: {\n        total: totalAssets,\n        assigned: assignedAssets,\n        available: availableAssets,\n        maintenance: maintenanceAssets,\n        retired: retiredAssets,\n        utilizationRate,\n      },\n      financials: {\n        totalInvoices: Number(totalInvoices.toFixed(2)),\n        paid: Number(paidInvoices.toFixed(2)),\n        pending: Number(pendingInvoices.toFixed(2)),\n        count: invoiceCount,\n        collectionRate,\n      },\n      maintenance: {\n        total: allMaintenance.length,\n        completed: completedMaintenance,\n        scheduled: scheduledMaintenance,\n        overdue: overdueMaintenance,\n        avgCost: avgMaintenanceCost,\n        completionRate: maintenanceCompletionRate,\n      },\n      compliance: {\n        total: allComplianceTasks.length,\n        completed: completedCompliance,\n        overdue: overdueCompliance,\n        avgScore: avgComplianceScore,\n        completionRate: complianceCompletionRate,\n      },\n      recentActivities,\n      lastUpdated: new Date().toISOString(),\n    };\n  }\n\n  async getDashboardTrends(metric: string, period: string): Promise<any[]> {\n    // For demo purposes, generate sample trend data\n    // In production, this would query actual historical data\n    const now = new Date();\n    const dataPoints = period === 'daily' ? 30 : period === 'weekly' ? 12 : 12;\n    \n    const trends = [];\n    for (let i = dataPoints - 1; i >= 0; i--) {\n      const date = new Date(now);\n      if (period === 'daily') {\n        date.setDate(date.getDate() - i);\n      } else if (period === 'weekly') {\n        date.setDate(date.getDate() - (i * 7));\n      } else {\n        date.setMonth(date.getMonth() - i);\n      }\n\n      let value = 0;\n      let additionalData = {};\n\n      if (metric === 'assets') {\n        value = Math.floor(Math.random() * 20) + 80; // 80-100\n        additionalData = { assigned: Math.floor(value * 0.7), available: Math.floor(value * 0.3) };\n      } else if (metric === 'maintenance') {\n        value = Math.floor(Math.random() * 10) + 5; // 5-15\n        additionalData = { cost: Math.floor(Math.random() * 10000) + 5000 };\n      } else if (metric === 'compliance') {\n        value = Math.floor(Math.random() * 15) + 10; // 10-25\n        additionalData = { avgScore: Math.floor(Math.random() * 30) + 70 };\n      }\n\n      trends.push({\n        date: date.toISOString().split('T')[0],\n        period,\n        metric,\n        value,\n        ...additionalData,\n      });\n    }\n\n    return trends;\n  }\n\n  // ==================== AI COMPLIANCE AUTOMATION METHODS ====================\n\n  async createComplianceSignal(signal: InsertComplianceSignal): Promise<ComplianceSignal> {\n    const result = await db.insert(complianceSignals).values(signal).returning();\n    return result[0];\n  }\n\n  async getActiveComplianceSignals(filters?: { locationId?: number; severity?: string }): Promise<ComplianceSignal[]> {\n    const conditions: SQL<unknown>[] = [eq(complianceSignals.status, 'active')];\n    \n    if (filters?.locationId) {\n      conditions.push(eq(complianceSignals.locationId, filters.locationId));\n    }\n    if (filters?.severity) {\n      conditions.push(eq(complianceSignals.severity, filters.severity));\n    }\n    \n    return await db\n      .select()\n      .from(complianceSignals)\n      .where(and(...conditions))\n      .orderBy(desc(complianceSignals.detectedAt));\n  }\n\n  async resolveComplianceSignal(signalId: number): Promise<ComplianceSignal> {\n    const result = await db\n      .update(complianceSignals)\n      .set({ status: 'resolved', resolvedAt: new Date() })\n      .where(eq(complianceSignals.id, signalId))\n      .returning();\n    return result[0];\n  }\n\n  async createComplianceRiskScore(score: InsertComplianceRiskScore): Promise<ComplianceRiskScore> {\n    const result = await db.insert(complianceRiskScores).values(score).returning();\n    return result[0];\n  }\n\n  async getLatestRiskScores(filters?: { locationId?: number; assetId?: string }): Promise<ComplianceRiskScore[]> {\n    if (!filters || (!filters.locationId && !filters.assetId)) {\n      return await db\n        .select()\n        .from(complianceRiskScores)\n        .orderBy(desc(complianceRiskScores.calculatedAt))\n        .limit(100);\n    }\n    \n    const conditions: SQL<unknown>[] = [];\n    if (filters.locationId) {\n      conditions.push(eq(complianceRiskScores.locationId, filters.locationId));\n    }\n    if (filters.assetId) {\n      conditions.push(eq(complianceRiskScores.assetId, filters.assetId));\n    }\n    \n    return await db\n      .select()\n      .from(complianceRiskScores)\n      .where(and(...conditions))\n      .orderBy(desc(complianceRiskScores.calculatedAt))\n      .limit(100);\n  }\n\n  async createAutomationRun(run: InsertAutomationRun): Promise<AutomationRun> {\n    const result = await db.insert(automationRuns).values(run).returning();\n    return result[0];\n  }\n\n  async updateAutomationRun(id: number, run: Partial<InsertAutomationRun>): Promise<AutomationRun> {\n    const result = await db\n      .update(automationRuns)\n      .set(run)\n      .where(eq(automationRuns.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getAutomationRun(id: number): Promise<AutomationRun | undefined> {\n    const result = await db\n      .select()\n      .from(automationRuns)\n      .where(eq(automationRuns.id, id));\n    return result[0];\n  }\n\n  async getAutomationRuns(limit: number = 10): Promise<AutomationRun[]> {\n    return await db\n      .select()\n      .from(automationRuns)\n      .orderBy(desc(automationRuns.startedAt))\n      .limit(limit);\n  }\n\n  async getAutomationRunSummary(): Promise<{\n    total: number;\n    successful: number;\n    failed: number;\n    successRate: number;\n    totalTasksGenerated: number;\n    totalRisksDetected: number;\n    avgExecutionTime: number;\n    lastRun: AutomationRun | null;\n  }> {\n    // Get counts and stats with SQL aggregation\n    const [stats] = await db.execute(sql`\n      SELECT \n        COUNT(*)::int AS total,\n        COUNT(*) FILTER (WHERE status = 'completed')::int AS successful,\n        COUNT(*) FILTER (WHERE status = 'failed')::int AS failed,\n        COALESCE(SUM(tasks_generated), 0)::int AS total_tasks_generated,\n        COALESCE(SUM(risks_detected), 0)::int AS total_risks_detected,\n        COALESCE(ROUND(AVG(execution_time_ms)), 0)::int AS avg_execution_time\n      FROM automation_runs\n      WHERE started_at >= NOW() - INTERVAL '30 days'\n    `);\n    \n    const lastRun = await this.getAutomationRuns(1);\n    \n    const total = Number(stats.total) || 0;\n    const successful = Number(stats.successful) || 0;\n\n    return {\n      total,\n      successful,\n      failed: Number(stats.failed) || 0,\n      successRate: total > 0 ? Math.round((successful / total) * 100) : 0,\n      totalTasksGenerated: Number(stats.total_tasks_generated) || 0,\n      totalRisksDetected: Number(stats.total_risks_detected) || 0,\n      avgExecutionTime: Number(stats.avg_execution_time) || 0,\n      lastRun: lastRun[0] || null,\n    };\n  }\n\n  async createAiRecommendation(recommendation: InsertAiRecommendation): Promise<AiRecommendation> {\n    const result = await db.insert(aiRecommendations).values(recommendation).returning();\n    return result[0];\n  }\n\n  async getAiRecommendations(filters?: { targetType?: string; status?: string; locationId?: number }): Promise<AiRecommendation[]> {\n    if (!filters || (!filters.targetType && !filters.status)) {\n      return await db\n        .select()\n        .from(aiRecommendations)\n        .orderBy(desc(aiRecommendations.createdAt))\n        .limit(50);\n    }\n    \n    const conditions: SQL<unknown>[] = [];\n    if (filters.targetType) {\n      conditions.push(eq(aiRecommendations.targetType, filters.targetType));\n    }\n    if (filters.status) {\n      conditions.push(eq(aiRecommendations.status, filters.status));\n    }\n    \n    return await db\n      .select()\n      .from(aiRecommendations)\n      .where(and(...conditions))\n      .orderBy(desc(aiRecommendations.createdAt))\n      .limit(50);\n  }\n\n  async updateAiRecommendation(id: number, recommendation: Partial<InsertAiRecommendation>): Promise<AiRecommendation> {\n    const result = await db\n      .update(aiRecommendations)\n      .set(recommendation)\n      .where(eq(aiRecommendations.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async createBackupVerification(verification: InsertBackupVerification): Promise<BackupVerification> {\n    const result = await db.insert(backupVerification).values(verification).returning();\n    return result[0];\n  }\n\n  async getBackupVerifications(filters?: { assetId?: string; status?: string }): Promise<BackupVerification[]> {\n    if (!filters || (!filters.assetId && !filters.status)) {\n      return await db\n        .select()\n        .from(backupVerification)\n        .orderBy(desc(backupVerification.verifiedAt));\n    }\n    \n    const conditions: SQL<unknown>[] = [];\n    if (filters.assetId) {\n      conditions.push(eq(backupVerification.assetId, filters.assetId));\n    }\n    if (filters.status) {\n      conditions.push(eq(backupVerification.verificationStatus, filters.status));\n    }\n    \n    return await db\n      .select()\n      .from(backupVerification)\n      .where(and(...conditions))\n      .orderBy(desc(backupVerification.verifiedAt));\n  }\n\n  async getDueBackupVerifications(): Promise<BackupVerification[]> {\n    const now = new Date().toISOString();\n    return await db\n      .select()\n      .from(backupVerification)\n      .where(\n        and(\n          eq(backupVerification.verificationStatus, 'passed'),\n          sql`${backupVerification.nextVerificationDue} <= ${now}`\n        )\n      )\n      .orderBy(backupVerification.nextVerificationDue);\n  }\n\n  async createComplianceAssignment(assignment: InsertComplianceAssignmentQueue): Promise<ComplianceAssignmentQueue> {\n    const result = await db.insert(complianceAssignmentQueue).values(assignment).returning();\n    return result[0];\n  }\n\n  async getComplianceAssignments(filters?: { userId?: number; status?: string }): Promise<ComplianceAssignmentQueue[]> {\n    if (!filters || (!filters.userId && !filters.status)) {\n      return await db\n        .select()\n        .from(complianceAssignmentQueue)\n        .orderBy(desc(complianceAssignmentQueue.assignedAt));\n    }\n    \n    const conditions: SQL<unknown>[] = [];\n    if (filters.userId) {\n      conditions.push(eq(complianceAssignmentQueue.assignedTo, filters.userId));\n    }\n    if (filters.status) {\n      conditions.push(eq(complianceAssignmentQueue.status, filters.status));\n    }\n    \n    return await db\n      .select()\n      .from(complianceAssignmentQueue)\n      .where(and(...conditions))\n      .orderBy(desc(complianceAssignmentQueue.assignedAt));\n  }\n}","size_bytes":50743},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport ConnectPgSimple from \"connect-pg-simple\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\nconst PgSession = ConnectPgSimple(session);\napp.use(session({\n  store: new PgSession({\n    conString: process.env.DATABASE_URL,\n  }),\n  secret: process.env.SESSION_SECRET || 'bodycraft-mdm-session-secret-key-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    maxAge: 8 * 60 * 60 * 1000, // 8 hours\n  },\n  name: 'bodycraft.sid',\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      \n      // Only log response body in development to prevent data leakage\n      if (app.get(\"env\") === \"development\" && capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2731},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport bcrypt from \"bcryptjs\";\nimport { storage } from \"./storage\";\nimport { \n  insertAssetSchema, \n  insertEmployeeSchema, \n  insertLocationSchema,\n  insertDepartmentSchema,\n  insertAssetAssignmentHistorySchema,\n  insertAssetMaintenanceSchema,\n  insertCctvSystemSchema,\n  insertBiometricSystemSchema,\n  insertBackupSchema,\n  insertInvoiceSchema,\n  passwordResetSchema,\n  adminPasswordResetSchema,\n  type InsertInvoice\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password are required\" });\n      }\n\n      // Get user by username\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid username or password\" });\n      }\n\n      // Check password\n      const isValid = await bcrypt.compare(password, user.passwordHash);\n      if (!isValid) {\n        return res.status(401).json({ message: \"Invalid username or password\" });\n      }\n\n      // Check if user is active\n      if (user.status !== \"active\") {\n        return res.status(401).json({ message: \"Account is inactive\" });\n      }\n\n      // Update last login\n      await storage.updateUser(user.id, { lastLogin: new Date() });\n\n      // Regenerate session ID to prevent session fixation\n      req.session.regenerate((err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Session error\" });\n        }\n        \n        // Create session (store in session)\n        req.session.userId = user.id;\n        req.session.username = user.username;\n        req.session.role = user.role;\n        req.session.locationId = user.locationId || null;\n\n        // Return user info (without password hash)\n        const { passwordHash, ...userResponse } = user;\n        res.json({\n          message: \"Login successful\",\n          user: userResponse\n        });\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", async (req, res) => {\n    try {\n      req.session.destroy((err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Could not log out\" });\n        }\n        res.json({ message: \"Logged out successfully\" });\n      });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/auth/session\", async (req, res) => {\n    try {\n      if (!req.session.userId || !req.session.username) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      // Get current user info\n      const user = await storage.getUserByUsername(req.session.username);\n      if (!user || user.status !== \"active\") {\n        return res.status(401).json({ message: \"Invalid session\" });\n      }\n\n      // Return user info (without password hash)\n      const { passwordHash, ...userResponse } = user;\n      res.json({ user: userResponse });\n    } catch (error) {\n      console.error(\"Session check error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Alias for session check (used by frontend auth guard)\n  app.get(\"/api/auth/me\", async (req, res) => {\n    try {\n      if (!req.session.userId || !req.session.username) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      // Get current user info\n      const user = await storage.getUserByUsername(req.session.username);\n      if (!user || user.status !== \"active\") {\n        return res.status(401).json({ message: \"Invalid session\" });\n      }\n\n      // Return user info (without password hash)\n      const { passwordHash, ...userResponse } = user;\n      res.json({ user: userResponse });\n    } catch (error) {\n      console.error(\"Session check error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Password reset endpoint\n  app.post(\"/api/auth/reset-password\", async (req, res) => {\n    try {\n      // Check authentication\n      if (!req.session.userId || !req.session.username) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      // Validate request body\n      const validation = passwordResetSchema.safeParse(req.body);\n      if (!validation.success) {\n        const errors = validation.error.errors.map(e => e.message).join(\", \");\n        return res.status(400).json({ message: errors });\n      }\n\n      const { currentPassword, newPassword } = validation.data;\n\n      // Get current user\n      const user = await storage.getUserByUsername(req.session.username);\n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      // Verify current password\n      const isValid = await bcrypt.compare(currentPassword, user.passwordHash);\n      if (!isValid) {\n        return res.status(401).json({ message: \"Current password is incorrect\" });\n      }\n\n      // Check if new password is same as current\n      const isSamePassword = await bcrypt.compare(newPassword, user.passwordHash);\n      if (isSamePassword) {\n        return res.status(400).json({ message: \"New password must be different from current password\" });\n      }\n\n      // Hash new password\n      const newPasswordHash = await bcrypt.hash(newPassword, 10);\n\n      // Update password\n      await storage.updateUser(user.id, { passwordHash: newPasswordHash, updatedAt: new Date() });\n\n      res.json({ message: \"Password updated successfully\" });\n    } catch (error) {\n      console.error(\"Password reset error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Middleware to check authentication\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    next();\n  };\n\n  // Middleware to check role permissions\n  const requireRole = (roles: string[]) => {\n    return (req: any, res: any, next: any) => {\n      if (!req.session.role || !roles.includes(req.session.role)) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      next();\n    };\n  };\n\n  // Helper function to filter data by location for location_user role\n  const filterByUserLocation = (data: any[], req: any) => {\n    // super_admin and admin can see all data\n    if (req.session.role === 'super_admin' || req.session.role === 'admin') {\n      return data;\n    }\n    \n    // location_user can only see data from their location\n    if (req.session.role === 'location_user' && req.session.locationId) {\n      return data.filter((item: any) => item.locationId === req.session.locationId);\n    }\n    \n    // Default: return all data (for other roles)\n    return data;\n  };\n\n  // Helper to check if location_user can access a specific location\n  const canAccessLocation = (req: any, locationId: number | null) => {\n    // super_admin and admin can access all locations\n    if (req.session.role === 'super_admin' || req.session.role === 'admin') {\n      return true;\n    }\n    \n    // location_user can only access their own location\n    if (req.session.role === 'location_user') {\n      return locationId === req.session.locationId;\n    }\n    \n    return true; // Default allow for other roles\n  };\n\n  // Assets routes - Protected with authentication\n  app.get(\"/api/assets\", requireAuth, async (req, res) => {\n    try {\n      const assets = await storage.getAllAssets();\n      const filteredAssets = filterByUserLocation(assets, req);\n      res.json(filteredAssets);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch assets\" });\n    }\n  });\n\n  app.get(\"/api/assets/:id\", requireAuth, async (req, res) => {\n    try {\n      const asset = await storage.getAsset(req.params.id);\n      if (!asset) {\n        return res.status(404).json({ error: \"Asset not found\" });\n      }\n      \n      // Check location access\n      if (!canAccessLocation(req, asset.locationId)) {\n        return res.status(403).json({ error: \"Access denied to this asset\" });\n      }\n      \n      res.json(asset);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch asset\" });\n    }\n  });\n\n  app.post(\"/api/assets\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const validatedAsset = insertAssetSchema.parse(req.body);\n      const asset = await storage.createAsset(validatedAsset);\n      res.status(201).json(asset);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid asset data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create asset\" });\n    }\n  });\n\n  app.patch(\"/api/assets/:id\", requireAuth, requireRole(['super_admin', 'admin', 'location_user']), async (req, res) => {\n    try {\n      // First check if asset exists and user has access\n      const existingAsset = await storage.getAsset(req.params.id);\n      if (!existingAsset) {\n        return res.status(404).json({ error: \"Asset not found\" });\n      }\n      \n      if (!canAccessLocation(req, existingAsset.locationId)) {\n        return res.status(403).json({ error: \"Access denied to this asset\" });\n      }\n      \n      const validatedAsset = insertAssetSchema.partial().parse(req.body);\n      \n      // Prevent location_user from changing locationId\n      if (req.session.role === 'location_user' && validatedAsset.locationId && validatedAsset.locationId !== existingAsset.locationId) {\n        return res.status(403).json({ error: \"Cannot transfer asset to another location\" });\n      }\n      \n      const asset = await storage.updateAsset(req.params.id, validatedAsset);\n      res.json(asset);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid asset data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update asset\" });\n    }\n  });\n\n  app.delete(\"/api/assets/:id\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const success = await storage.deleteAsset(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Asset not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete asset\" });\n    }\n  });\n\n  // Employees routes\n  app.get(\"/api/employees\", requireAuth, async (req, res) => {\n    try {\n      const employees = await storage.getAllEmployees();\n      const filteredEmployees = filterByUserLocation(employees, req);\n      res.json(filteredEmployees);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch employees\" });\n    }\n  });\n\n  app.get(\"/api/employees/:id\", requireAuth, async (req, res) => {\n    try {\n      const employee = await storage.getEmployee(parseInt(req.params.id));\n      if (!employee) {\n        return res.status(404).json({ error: \"Employee not found\" });\n      }\n      \n      if (!canAccessLocation(req, employee.locationId)) {\n        return res.status(403).json({ error: \"Access denied to this employee\" });\n      }\n      \n      res.json(employee);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch employee\" });\n    }\n  });\n\n  app.post(\"/api/employees\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const validatedEmployee = insertEmployeeSchema.parse(req.body);\n      const employee = await storage.createEmployee(validatedEmployee);\n      res.status(201).json(employee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid employee data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create employee\" });\n    }\n  });\n\n  app.patch(\"/api/employees/:id\", requireAuth, requireRole(['super_admin', 'admin', 'location_user']), async (req, res) => {\n    try {\n      const existingEmployee = await storage.getEmployee(parseInt(req.params.id));\n      if (!existingEmployee) {\n        return res.status(404).json({ error: \"Employee not found\" });\n      }\n      \n      if (!canAccessLocation(req, existingEmployee.locationId)) {\n        return res.status(403).json({ error: \"Access denied to this employee\" });\n      }\n      \n      const validatedEmployee = insertEmployeeSchema.partial().parse(req.body);\n      \n      // Prevent location_user from changing locationId\n      if (req.session.role === 'location_user' && validatedEmployee.locationId && validatedEmployee.locationId !== existingEmployee.locationId) {\n        return res.status(403).json({ error: \"Cannot transfer employee to another location\" });\n      }\n      \n      const employee = await storage.updateEmployee(parseInt(req.params.id), validatedEmployee);\n      res.json(employee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid employee data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update employee\" });\n    }\n  });\n\n  app.delete(\"/api/employees/:id\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const success = await storage.deleteEmployee(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"Employee not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete employee\" });\n    }\n  });\n\n  // Locations routes\n  app.get(\"/api/locations\", requireAuth, async (req, res) => {\n    try {\n      const locations = await storage.getAllLocations();\n      res.json(locations);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch locations\" });\n    }\n  });\n\n  app.post(\"/api/locations\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const validatedLocation = insertLocationSchema.parse(req.body);\n      const location = await storage.createLocation(validatedLocation);\n      res.status(201).json(location);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid location data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create location\" });\n    }\n  });\n\n  app.patch(\"/api/locations/:id\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const validatedLocation = insertLocationSchema.partial().parse(req.body);\n      const location = await storage.updateLocation(parseInt(req.params.id), validatedLocation);\n      if (!location) {\n        return res.status(404).json({ error: \"Location not found\" });\n      }\n      res.json(location);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid location data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update location\" });\n    }\n  });\n\n  app.delete(\"/api/locations/:id\", requireAuth, requireRole(['super_admin']), async (req, res) => {\n    try {\n      const success = await storage.deleteLocation(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"Location not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete location\" });\n    }\n  });\n\n  // Department routes\n  app.get(\"/api/departments\", requireAuth, async (req, res) => {\n    try {\n      const departments = await storage.getAllDepartments();\n      res.json(departments);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch departments\" });\n    }\n  });\n\n  app.post(\"/api/departments\", requireAuth, requireRole(['super_admin']), async (req, res) => {\n    try {\n      const validatedDepartment = insertDepartmentSchema.parse({\n        ...req.body,\n        isCustom: true, // Custom departments created by admin are marked as custom\n      });\n      const department = await storage.createDepartment(validatedDepartment);\n      res.status(201).json(department);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid department data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create department\" });\n    }\n  });\n\n  app.patch(\"/api/departments/:id\", requireAuth, requireRole(['super_admin']), async (req, res) => {\n    try {\n      const validatedDepartment = insertDepartmentSchema.partial().parse(req.body);\n      const department = await storage.updateDepartment(parseInt(req.params.id), validatedDepartment);\n      if (!department) {\n        return res.status(404).json({ error: \"Department not found\" });\n      }\n      res.json(department);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid department data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update department\" });\n    }\n  });\n\n  app.delete(\"/api/departments/:id\", requireAuth, requireRole(['super_admin']), async (req, res) => {\n    try {\n      // Only allow deletion of custom departments\n      const department = await storage.getDepartment(parseInt(req.params.id));\n      if (!department) {\n        return res.status(404).json({ error: \"Department not found\" });\n      }\n      if (!department.isCustom) {\n        return res.status(403).json({ error: \"Cannot delete predefined departments\" });\n      }\n      \n      const success = await storage.deleteDepartment(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"Department not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete department\" });\n    }\n  });\n\n  // Assignment History routes\n  app.get(\"/api/assignments\", requireAuth, async (req, res) => {\n    try {\n      const assetId = req.query.assetId as string;\n      const employeeId = req.query.employeeId ? parseInt(req.query.employeeId as string) : undefined;\n      const assignments = await storage.getAssignmentHistory(assetId, employeeId);\n      \n      // Filter by location for location_user\n      const filteredAssignments = await Promise.all(\n        assignments.map(async (assignment) => {\n          const asset = await storage.getAsset(assignment.assetId);\n          return { assignment, asset };\n        })\n      );\n      \n      const accessibleAssignments = filteredAssignments\n        .filter(({ asset }) => canAccessLocation(req, asset?.locationId || null))\n        .map(({ assignment }) => assignment);\n      \n      res.json(accessibleAssignments);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch assignments\" });\n    }\n  });\n\n  app.post(\"/api/assignments\", requireAuth, requireRole(['super_admin', 'admin', 'location_user']), async (req, res) => {\n    try {\n      const validatedAssignment = insertAssetAssignmentHistorySchema.parse(req.body);\n      \n      // Check location access for location_user\n      const asset = await storage.getAsset(validatedAssignment.assetId);\n      if (!canAccessLocation(req, asset?.locationId || null)) {\n        return res.status(403).json({ error: \"Access denied to assign this asset\" });\n      }\n      \n      const assignment = await storage.createAssignment(validatedAssignment);\n      res.status(201).json(assignment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid assignment data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create assignment\" });\n    }\n  });\n\n  // Maintenance routes\n  app.get(\"/api/maintenance\", requireAuth, async (req, res) => {\n    try {\n      const assetId = req.query.assetId as string;\n      const maintenance = await storage.getMaintenanceRecords(assetId);\n      \n      // Filter by location for location_user\n      const filteredMaintenance = await Promise.all(\n        maintenance.map(async (record) => {\n          const asset = await storage.getAsset(record.assetId);\n          return { record, asset };\n        })\n      );\n      \n      const accessibleMaintenance = filteredMaintenance\n        .filter(({ asset }) => canAccessLocation(req, asset?.locationId || null))\n        .map(({ record }) => record);\n      \n      res.json(accessibleMaintenance);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch maintenance records\" });\n    }\n  });\n\n  app.post(\"/api/maintenance\", requireAuth, requireRole(['super_admin', 'admin', 'location_user']), async (req, res) => {\n    try {\n      const validatedMaintenance = insertAssetMaintenanceSchema.parse(req.body);\n      \n      // Check location access for location_user\n      const asset = await storage.getAsset(validatedMaintenance.assetId);\n      if (!canAccessLocation(req, asset?.locationId || null)) {\n        return res.status(403).json({ error: \"Access denied to this asset\" });\n      }\n      \n      const maintenance = await storage.createMaintenanceRecord(validatedMaintenance);\n      res.status(201).json(maintenance);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid maintenance data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create maintenance record\" });\n    }\n  });\n\n  app.patch(\"/api/maintenance/:id\", requireAuth, requireRole(['super_admin', 'admin', 'location_user']), async (req, res) => {\n    try {\n      // First get all maintenance records to find the one we want to update\n      const allMaintenance = await storage.getMaintenanceRecords();\n      const existing = allMaintenance.find(m => m.id === parseInt(req.params.id));\n      \n      if (!existing) {\n        return res.status(404).json({ error: \"Maintenance record not found\" });\n      }\n      \n      // Check location access BEFORE updating\n      const asset = await storage.getAsset(existing.assetId);\n      if (!canAccessLocation(req, asset?.locationId || null)) {\n        return res.status(403).json({ error: \"Access denied to this maintenance record\" });\n      }\n      \n      const validatedMaintenance = insertAssetMaintenanceSchema.partial().parse(req.body);\n      \n      // Prevent location_user from changing assetId (reassigning to different asset/location)\n      if (req.session.role === 'location_user' && validatedMaintenance.assetId && validatedMaintenance.assetId !== existing.assetId) {\n        return res.status(403).json({ error: \"Cannot reassign maintenance record to a different asset\" });\n      }\n      \n      const maintenance = await storage.updateMaintenanceRecord(parseInt(req.params.id), validatedMaintenance);\n      \n      res.json(maintenance);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid maintenance data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update maintenance record\" });\n    }\n  });\n\n  app.delete(\"/api/maintenance/:id\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const success = await storage.deleteMaintenanceRecord(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"Maintenance record not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete maintenance record\" });\n    }\n  });\n\n  // CCTV Systems routes\n  app.get(\"/api/cctv\", requireAuth, async (req, res) => {\n    try {\n      const systems = await storage.getAllCctvSystems();\n      \n      // Filter by location for location_user and mask sensitive data\n      const filteredSystems = filterByUserLocation(systems, req);\n      const maskedSystems = filteredSystems.map(system => ({\n        ...system,\n        passwordHash: system.passwordHash ? \"********\" : null\n      }));\n      res.json(maskedSystems);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch CCTV systems\" });\n    }\n  });\n\n  app.post(\"/api/cctv\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const validatedSystem = insertCctvSystemSchema.parse(req.body);\n      const system = await storage.createCctvSystem(validatedSystem);\n      // Mask sensitive data in response\n      const maskedSystem = {\n        ...system,\n        passwordHash: system.passwordHash ? \"********\" : null\n      };\n      res.status(201).json(maskedSystem);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid CCTV system data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create CCTV system\" });\n    }\n  });\n\n  app.patch(\"/api/cctv/:id\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      // First get existing CCTV system\n      const allSystems = await storage.getAllCctvSystems();\n      const existing = allSystems.find(s => s.id === parseInt(req.params.id));\n      \n      if (!existing) {\n        return res.status(404).json({ error: \"CCTV system not found\" });\n      }\n      \n      // Check location access BEFORE updating\n      if (!canAccessLocation(req, existing.locationId)) {\n        return res.status(403).json({ error: \"Access denied to this CCTV system\" });\n      }\n      \n      const validatedSystem = insertCctvSystemSchema.partial().parse(req.body);\n      \n      // Prevent changing locationId if location_user (even though only admin can access this route, defense in depth)\n      if (req.session.role === 'location_user' && validatedSystem.locationId && validatedSystem.locationId !== existing.locationId) {\n        return res.status(403).json({ error: \"Cannot transfer CCTV system to another location\" });\n      }\n      \n      const system = await storage.updateCctvSystem(parseInt(req.params.id), validatedSystem);\n      \n      if (!system) {\n        return res.status(404).json({ error: \"CCTV system not found\" });\n      }\n      \n      // Mask sensitive data in response\n      const maskedSystem = {\n        ...system,\n        passwordHash: system.passwordHash ? \"********\" : null\n      };\n      res.json(maskedSystem);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid CCTV system data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update CCTV system\" });\n    }\n  });\n\n  app.delete(\"/api/cctv/:id\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const success = await storage.deleteCctvSystem(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"CCTV system not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete CCTV system\" });\n    }\n  });\n\n  // Hikvision Integration routes\n  app.get(\"/api/cctv/:id/snapshot\", requireAuth, async (req, res) => {\n    try {\n      const { HikvisionClient } = await import('./hikvision-client');\n      const systemId = parseInt(req.params.id);\n      const allSystems = await storage.getAllCctvSystems();\n      const system = allSystems.find(s => s.id === systemId);\n\n      if (!system) {\n        return res.status(404).json({ error: \"CCTV system not found\" });\n      }\n\n      if (!canAccessLocation(req, system.locationId)) {\n        return res.status(403).json({ error: \"Access denied to this CCTV system\" });\n      }\n\n      if (!system.ipAddress || !system.username || !system.passwordHash) {\n        return res.status(400).json({ error: \"CCTV system not configured with credentials\" });\n      }\n\n      const client = new HikvisionClient(\n        `http://${system.ipAddress}`,\n        system.username,\n        system.passwordHash\n      );\n\n      const channel = parseInt(req.query.channel as string) || 1;\n      const snapshot = await client.getSnapshot(channel);\n\n      res.setHeader('Content-Type', 'image/jpeg');\n      res.send(snapshot);\n    } catch (error) {\n      console.error(\"Error getting snapshot:\", error);\n      res.status(500).json({ error: \"Failed to get camera snapshot\" });\n    }\n  });\n\n  app.get(\"/api/cctv/:id/stream-url\", requireAuth, async (req, res) => {\n    try {\n      const { HikvisionClient } = await import('./hikvision-client');\n      const systemId = parseInt(req.params.id);\n      const allSystems = await storage.getAllCctvSystems();\n      const system = allSystems.find(s => s.id === systemId);\n\n      if (!system) {\n        return res.status(404).json({ error: \"CCTV system not found\" });\n      }\n\n      if (!canAccessLocation(req, system.locationId)) {\n        return res.status(403).json({ error: \"Access denied to this CCTV system\" });\n      }\n\n      if (!system.ipAddress || !system.username || !system.passwordHash) {\n        return res.status(400).json({ error: \"CCTV system not configured with credentials\" });\n      }\n\n      const client = new HikvisionClient(\n        `http://${system.ipAddress}`,\n        system.username,\n        system.passwordHash\n      );\n\n      const channel = parseInt(req.query.channel as string) || 1;\n      const streamType = (req.query.streamType as 'main' | 'sub') || 'main';\n\n      const rtspUrl = client.getRtspUrl(channel, streamType);\n      const httpPreviewUrl = client.getHttpPreviewUrl(channel, streamType);\n\n      res.json({\n        rtspUrl,\n        httpPreviewUrl,\n        channel,\n        streamType\n      });\n    } catch (error) {\n      console.error(\"Error getting stream URL:\", error);\n      res.status(500).json({ error: \"Failed to get stream URL\" });\n    }\n  });\n\n  app.get(\"/api/cctv/:id/device-info\", requireAuth, async (req, res) => {\n    try {\n      const { HikvisionClient } = await import('./hikvision-client');\n      const systemId = parseInt(req.params.id);\n      const allSystems = await storage.getAllCctvSystems();\n      const system = allSystems.find(s => s.id === systemId);\n\n      if (!system) {\n        return res.status(404).json({ error: \"CCTV system not found\" });\n      }\n\n      if (!canAccessLocation(req, system.locationId)) {\n        return res.status(403).json({ error: \"Access denied to this CCTV system\" });\n      }\n\n      if (!system.ipAddress || !system.username || !system.passwordHash) {\n        return res.status(400).json({ error: \"CCTV system not configured with credentials\" });\n      }\n\n      const client = new HikvisionClient(\n        `http://${system.ipAddress}`,\n        system.username,\n        system.passwordHash\n      );\n\n      const deviceInfo = await client.getDeviceInfo();\n      res.json(deviceInfo);\n    } catch (error) {\n      console.error(\"Error getting device info:\", error);\n      res.status(500).json({ error: \"Failed to get device information\" });\n    }\n  });\n\n  app.get(\"/api/cctv/:id/status\", requireAuth, async (req, res) => {\n    try {\n      const { HikvisionClient } = await import('./hikvision-client');\n      const systemId = parseInt(req.params.id);\n      const allSystems = await storage.getAllCctvSystems();\n      const system = allSystems.find(s => s.id === systemId);\n\n      if (!system) {\n        return res.status(404).json({ error: \"CCTV system not found\" });\n      }\n\n      if (!canAccessLocation(req, system.locationId)) {\n        return res.status(403).json({ error: \"Access denied to this CCTV system\" });\n      }\n\n      if (!system.ipAddress || !system.username || !system.passwordHash) {\n        return res.status(400).json({ error: \"CCTV system not configured with credentials\" });\n      }\n\n      const client = new HikvisionClient(\n        `http://${system.ipAddress}`,\n        system.username,\n        system.passwordHash\n      );\n\n      const status = await client.checkCameraStatus();\n      \n      if (status.online && status.lastOnline) {\n        await storage.updateCctvSystem(systemId, {\n          status: 'online',\n          lastOnline: status.lastOnline\n        });\n      } else {\n        await storage.updateCctvSystem(systemId, {\n          status: 'offline'\n        });\n      }\n\n      res.json(status);\n    } catch (error) {\n      console.error(\"Error checking camera status:\", error);\n      res.status(500).json({ error: \"Failed to check camera status\" });\n    }\n  });\n\n  app.post(\"/api/cctv/:id/recordings/search\", requireAuth, async (req, res) => {\n    try {\n      const { HikvisionClient } = await import('./hikvision-client');\n      const systemId = parseInt(req.params.id);\n      const allSystems = await storage.getAllCctvSystems();\n      const system = allSystems.find(s => s.id === systemId);\n\n      if (!system) {\n        return res.status(404).json({ error: \"CCTV system not found\" });\n      }\n\n      if (!canAccessLocation(req, system.locationId)) {\n        return res.status(403).json({ error: \"Access denied to this CCTV system\" });\n      }\n\n      if (!system.ipAddress || !system.username || !system.passwordHash) {\n        return res.status(400).json({ error: \"CCTV system not configured with credentials\" });\n      }\n\n      const { startTime, endTime, channel = 1 } = req.body;\n      \n      if (!startTime || !endTime) {\n        return res.status(400).json({ error: \"startTime and endTime are required\" });\n      }\n\n      const client = new HikvisionClient(\n        `http://${system.ipAddress}`,\n        system.username,\n        system.passwordHash\n      );\n\n      const recordings = await client.searchRecordings(\n        new Date(startTime),\n        new Date(endTime),\n        channel\n      );\n\n      res.json(recordings);\n    } catch (error) {\n      console.error(\"Error searching recordings:\", error);\n      res.status(500).json({ error: \"Failed to search recordings\" });\n    }\n  });\n\n  app.get(\"/api/cctv/:id/recordings/playback-url\", requireAuth, async (req, res) => {\n    try {\n      const { HikvisionClient } = await import('./hikvision-client');\n      const systemId = parseInt(req.params.id);\n      const allSystems = await storage.getAllCctvSystems();\n      const system = allSystems.find(s => s.id === systemId);\n\n      if (!system) {\n        return res.status(404).json({ error: \"CCTV system not found\" });\n      }\n\n      if (!canAccessLocation(req, system.locationId)) {\n        return res.status(403).json({ error: \"Access denied to this CCTV system\" });\n      }\n\n      if (!system.ipAddress || !system.username || !system.passwordHash) {\n        return res.status(400).json({ error: \"CCTV system not configured with credentials\" });\n      }\n\n      const { startTime, endTime, channel = 1 } = req.query;\n      \n      if (!startTime || !endTime) {\n        return res.status(400).json({ error: \"startTime and endTime are required\" });\n      }\n\n      const client = new HikvisionClient(\n        `http://${system.ipAddress}`,\n        system.username,\n        system.passwordHash\n      );\n\n      const playbackUrl = client.getPlaybackUrl(\n        new Date(startTime as string),\n        new Date(endTime as string),\n        parseInt(channel as string)\n      );\n\n      res.json({ playbackUrl });\n    } catch (error) {\n      console.error(\"Error getting playback URL:\", error);\n      res.status(500).json({ error: \"Failed to get playback URL\" });\n    }\n  });\n\n  // Biometric Systems routes\n  app.get(\"/api/biometric\", requireAuth, async (req, res) => {\n    try {\n      const systems = await storage.getAllBiometricSystems();\n      const filteredSystems = filterByUserLocation(systems, req);\n      res.json(filteredSystems);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch biometric systems\" });\n    }\n  });\n\n  app.post(\"/api/biometric\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const validatedSystem = insertBiometricSystemSchema.parse(req.body);\n      const system = await storage.createBiometricSystem(validatedSystem);\n      res.status(201).json(system);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid biometric system data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create biometric system\" });\n    }\n  });\n\n  app.patch(\"/api/biometric/:id\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const validatedSystem = insertBiometricSystemSchema.partial().parse(req.body);\n      const system = await storage.updateBiometricSystem(parseInt(req.params.id), validatedSystem);\n      if (!system) {\n        return res.status(404).json({ error: \"Biometric system not found\" });\n      }\n      res.json(system);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid biometric system data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update biometric system\" });\n    }\n  });\n\n  app.delete(\"/api/biometric/:id\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const success = await storage.deleteBiometricSystem(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"Biometric system not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete biometric system\" });\n    }\n  });\n\n  // Backup routes\n  app.get(\"/api/backups\", requireAuth, async (req, res) => {\n    try {\n      const assetId = req.query.assetId as string;\n      const backups = await storage.getBackups(assetId);\n      \n      // Filter by location for location_user\n      const filteredBackups = await Promise.all(\n        backups.map(async (backup) => {\n          const asset = await storage.getAsset(backup.assetId);\n          return { backup, asset };\n        })\n      );\n      \n      const accessibleBackups = filteredBackups\n        .filter(({ asset }) => canAccessLocation(req, asset?.locationId || null))\n        .map(({ backup }) => backup);\n      \n      res.json(accessibleBackups);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch backups\" });\n    }\n  });\n\n  app.post(\"/api/backups\", requireAuth, requireRole(['super_admin', 'admin', 'location_user']), async (req, res) => {\n    try {\n      const validatedBackup = insertBackupSchema.parse(req.body);\n      \n      // Check location access for location_user\n      const asset = await storage.getAsset(validatedBackup.assetId);\n      if (!canAccessLocation(req, asset?.locationId || null)) {\n        return res.status(403).json({ error: \"Access denied to this asset\" });\n      }\n      \n      const backup = await storage.createBackup(validatedBackup);\n      res.status(201).json(backup);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid backup data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create backup\" });\n    }\n  });\n\n  app.patch(\"/api/backups/:id\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const validatedBackup = insertBackupSchema.partial().parse(req.body);\n      const backup = await storage.updateBackup(parseInt(req.params.id), validatedBackup);\n      if (!backup) {\n        return res.status(404).json({ error: \"Backup not found\" });\n      }\n      res.json(backup);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid backup data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update backup\" });\n    }\n  });\n\n  app.delete(\"/api/backups/:id\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const success = await storage.deleteBackup(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"Backup not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete backup\" });\n    }\n  });\n\n  // Reports API endpoints\n  \n  // Get available report templates\n  app.get(\"/api/reports/templates\", requireAuth, async (req, res) => {\n    try {\n      const templates = [\n        {\n          id: \"asset-inventory\",\n          name: \"Asset Inventory Report\", \n          description: \"Complete inventory of all assets across locations with current status, condition, and assignment details\",\n          category: \"assets\",\n          fields: [\"assetId\", \"assetType\", \"brand\", \"modelName\", \"serialNumber\", \"purchaseDate\", \"purchaseCost\", \"status\", \"condition\", \"locationId\"],\n          filters: [\"location\", \"assetType\", \"status\", \"condition\", \"purchaseDate\"],\n          totalRuns: 15,\n          lastRun: \"2024-01-18\"\n        },\n        {\n          id: \"maintenance-summary\",\n          name: \"Maintenance Summary Report\",\n          description: \"Comprehensive maintenance activities, costs, and schedules with vendor performance analysis\",\n          category: \"maintenance\", \n          fields: [\"assetId\", \"maintenanceType\", \"description\", \"scheduledDate\", \"completedDate\", \"cost\", \"vendor\", \"status\"],\n          filters: [\"maintenanceType\", \"status\", \"vendor\", \"dateRange\", \"location\"],\n          totalRuns: 23,\n          lastRun: \"2024-01-19\"\n        },\n        {\n          id: \"assignment-history\",\n          name: \"Assignment History Report\",\n          description: \"Historical tracking of asset assignments with employee details and assignment duration analysis\",\n          category: \"assignments\",\n          fields: [\"assetId\", \"employeeId\", \"assignedDate\", \"returnedDate\", \"notes\"],\n          filters: [\"employee\", \"department\", \"location\", \"dateRange\", \"assetType\"],\n          totalRuns: 18,\n          lastRun: \"2024-01-20\"\n        },\n        {\n          id: \"location-analytics\", \n          name: \"Location Analytics Report\",\n          description: \"Multi-location performance analytics with asset distribution, utilization rates, and cost analysis\",\n          category: \"locations\",\n          fields: [\"outletName\", \"city\", \"state\", \"manager\", \"contactEmail\", \"contactPhone\"],\n          filters: [\"location\", \"assetType\", \"dateRange\"],\n          totalRuns: 8,\n          lastRun: \"2024-01-17\"\n        },\n        {\n          id: \"compliance-audit\",\n          name: \"Compliance Audit Report\", \n          description: \"Comprehensive compliance status across backup verification, security audits, and policy adherence\",\n          category: \"compliance\",\n          fields: [\"locationId\", \"backupType\", \"backupDate\", \"verificationStatus\", \"evidenceProvided\", \"auditResult\"],\n          filters: [\"complianceType\", \"status\", \"location\", \"dateRange\"],\n          totalRuns: 12,\n          lastRun: \"2024-01-16\"\n        }\n      ];\n      res.json(templates);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch report templates\" });\n    }\n  });\n\n  // Generate and export report\n  app.post(\"/api/reports/generate\", requireAuth, async (req, res) => {\n    try {\n      const { templateId, filters, format = 'excel' } = req.body;\n      \n      let data: any[] = [];\n      let filename = \"\";\n      let headers: string[] = [];\n      \n      // Generate report data based on template\n      switch (templateId) {\n        case \"asset-inventory\":\n          data = await storage.getAllAssets();\n          filename = \"Asset_Inventory_Report\";\n          headers = [\"Asset ID\", \"Type\", \"Brand\", \"Model\", \"Serial Number\", \"Purchase Date\", \"Cost\", \"Status\", \"Condition\", \"Location\"];\n          \n          // Apply location filter if provided\n          if (filters?.location && filters.location !== \"all\") {\n            const locationId = parseInt(filters.location);\n            data = data.filter((asset: any) => asset.locationId === locationId);\n          }\n          \n          // Apply asset type filter\n          if (filters?.assetType && filters.assetType !== \"all\") {\n            data = data.filter((asset: any) => asset.assetType === filters.assetType);\n          }\n          \n          // Apply status filter\n          if (filters?.status && filters.status !== \"all\") {\n            data = data.filter((asset: any) => asset.status === filters.status);\n          }\n          \n          // Transform data for export\n          data = data.map((asset: any) => [\n            asset.assetId,\n            asset.assetType,\n            asset.brand,\n            asset.modelName,\n            asset.serialNumber || \"\",\n            asset.purchaseDate,\n            asset.purchaseCost || 0,\n            asset.status,\n            asset.condition,\n            asset.locationId || \"\"\n          ]);\n          break;\n          \n        case \"maintenance-summary\":\n          data = await storage.getMaintenanceRecords();\n          filename = \"Maintenance_Summary_Report\";\n          headers = [\"Asset ID\", \"Type\", \"Description\", \"Scheduled Date\", \"Completed Date\", \"Cost\", \"Vendor\", \"Status\"];\n          \n          // Apply status filter\n          if (filters?.status && filters.status !== \"all\") {\n            data = data.filter((maintenance: any) => maintenance.status === filters.status);\n          }\n          \n          // Apply maintenance type filter\n          if (filters?.maintenanceType && filters.maintenanceType !== \"all\") {\n            data = data.filter((maintenance: any) => maintenance.maintenanceType === filters.maintenanceType);\n          }\n          \n          // Transform data for export\n          data = data.map((maintenance: any) => [\n            maintenance.assetId,\n            maintenance.maintenanceType,\n            maintenance.description,\n            maintenance.scheduledDate,\n            maintenance.completedDate || \"\",\n            maintenance.cost || 0,\n            maintenance.vendor || \"\",\n            maintenance.status\n          ]);\n          break;\n          \n        case \"assignment-history\":\n          data = await storage.getAssignmentHistory();\n          filename = \"Assignment_History_Report\";\n          headers = [\"Asset ID\", \"Employee ID\", \"Assigned Date\", \"Returned Date\", \"Notes\"];\n          \n          // Transform data for export\n          data = data.map((assignment: any) => [\n            assignment.assetId,\n            assignment.employeeId,\n            assignment.assignedDate,\n            assignment.returnedDate || \"\",\n            assignment.notes || \"\"\n          ]);\n          break;\n          \n        case \"location-analytics\":\n          data = await storage.getAllLocations();\n          filename = \"Location_Analytics_Report\";\n          headers = [\"Outlet Name\", \"City\", \"State\", \"Manager\", \"Contact Email\", \"Contact Phone\"];\n          \n          // Transform data for export\n          data = data.map((location: any) => [\n            location.outletName,\n            location.city,\n            location.state,\n            location.manager || \"\",\n            location.contactEmail || \"\",\n            location.contactPhone || \"\"\n          ]);\n          break;\n          \n        case \"compliance-audit\":\n          data = await storage.getBackups();\n          filename = \"Compliance_Audit_Report\";\n          headers = [\"Location ID\", \"Backup Type\", \"Backup Date\", \"Verification Status\", \"Evidence\", \"Audit Result\"];\n          \n          // Transform data for export\n          data = data.map((backup: any) => [\n            backup.locationId,\n            backup.backupType,\n            backup.backupDate,\n            backup.verificationStatus,\n            backup.evidenceProvided ? \"Yes\" : \"No\",\n            backup.auditResult || \"\"\n          ]);\n          break;\n          \n        default:\n          return res.status(400).json({ error: \"Invalid template ID\" });\n      }\n      \n      // Generate Excel file\n      if (format === 'excel') {\n        const XLSX = require('xlsx');\n        \n        // Create workbook and worksheet\n        const wb = XLSX.utils.book_new();\n        const ws = XLSX.utils.aoa_to_sheet([headers, ...data]);\n        \n        // Add worksheet to workbook\n        XLSX.utils.book_append_sheet(wb, ws, 'Report');\n        \n        // Generate Excel buffer\n        const excelBuffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });\n        \n        // Set response headers for file download\n        res.set({\n          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n          'Content-Disposition': `attachment; filename=\"${filename}_${new Date().toISOString().split('T')[0]}.xlsx\"`\n        });\n        \n        return res.send(excelBuffer);\n      }\n      \n      // For CSV format\n      if (format === 'csv') {\n        const csvData = [headers, ...data].map(row => row.join(',')).join('\\n');\n        \n        res.set({\n          'Content-Type': 'text/csv',\n          'Content-Disposition': `attachment; filename=\"${filename}_${new Date().toISOString().split('T')[0]}.csv\"`\n        });\n        \n        return res.send(csvData);\n      }\n      \n      // Default JSON response\n      res.json({\n        templateId,\n        filename,\n        headers,\n        data,\n        rowCount: data.length,\n        generatedAt: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error('Report generation error:', error);\n      res.status(500).json({ error: \"Failed to generate report\" });\n    }\n  });\n\n  // Get custom reports\n  app.get(\"/api/reports/custom\", requireAuth, async (req, res) => {\n    try {\n      // In a real implementation, this would fetch from database\n      // For now, returning mock data with proper structure\n      const customReports = [\n        {\n          id: \"custom-1\",\n          name: \"Monthly Laptop Assignment Report\",\n          description: \"Monthly tracking of laptop assignments for JP Nagar location\",\n          entity: \"assignments\",\n          fields: [\"assetId\", \"employeeName\", \"assignedDate\", \"status\"],\n          filters: { location: \"JP Nagar\", assetType: \"Laptop\", dateRange: \"monthly\" },\n          createdDate: \"2024-01-15\",\n          createdBy: \"Admin User\",\n          lastRun: \"2024-01-20\",\n          totalRuns: 5\n        }\n      ];\n      res.json(customReports);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch custom reports\" });\n    }\n  });\n\n  // Create custom report\n  app.post(\"/api/reports/custom\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const { name, description, entity, fields, filters } = req.body;\n      \n      // Validate required fields\n      if (!name || !entity || !fields) {\n        return res.status(400).json({ error: \"Name, entity, and fields are required\" });\n      }\n      \n      const customReport = {\n        id: `custom-${Date.now()}`,\n        name,\n        description: description || \"\",\n        entity,\n        fields,\n        filters: filters || {},\n        createdDate: new Date().toISOString().split('T')[0],\n        createdBy: \"Admin User\", // In real implementation, get from auth\n        lastRun: null,\n        totalRuns: 0\n      };\n      \n      // In real implementation, save to database\n      // await storage.createCustomReport(customReport);\n      \n      res.status(201).json(customReport);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create custom report\" });\n    }\n  });\n\n  // Generate custom report\n  app.post(\"/api/reports/custom/:id/generate\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { format = 'excel' } = req.body;\n      \n      // In real implementation, fetch custom report config from database\n      // For now, handle basic case\n      \n      let data: any[] = [];\n      let filename = \"Custom_Report\";\n      let headers: string[] = [];\n      \n      // This would fetch the custom report configuration and execute it\n      // For demonstration, we'll return assets data\n      data = await storage.getAllAssets();\n      filename = \"Custom_Asset_Report\";\n      headers = [\"Asset ID\", \"Type\", \"Brand\", \"Model\", \"Status\"];\n      \n      data = data.map((asset: any) => [\n        asset.assetId,\n        asset.assetType,\n        asset.brand,\n        asset.modelName,\n        asset.status\n      ]);\n      \n      if (format === 'excel') {\n        const XLSX = require('xlsx');\n        const wb = XLSX.utils.book_new();\n        const ws = XLSX.utils.aoa_to_sheet([headers, ...data]);\n        XLSX.utils.book_append_sheet(wb, ws, 'Report');\n        \n        const excelBuffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });\n        \n        res.set({\n          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n          'Content-Disposition': `attachment; filename=\"${filename}_${new Date().toISOString().split('T')[0]}.xlsx\"`\n        });\n        \n        return res.send(excelBuffer);\n      }\n      \n      res.json({ data, rowCount: data.length });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to generate custom report\" });\n    }\n  });\n\n  // Dashboard Stats - Get real-time dashboard statistics\n  app.get(\"/api/dashboard/stats\", requireAuth, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard statistics\" });\n    }\n  });\n\n  // Dashboard Recent Activities\n  app.get(\"/api/dashboard/activities\", requireAuth, async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n      const activities = await storage.getRecentActivities(limit);\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching recent activities:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent activities\" });\n    }\n  });\n\n  // User Management Routes\n  app.get(\"/api/users\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      // Remove password hashes from response\n      const sanitizedUsers = users.map(({ passwordHash, ...user }) => user);\n      res.json(sanitizedUsers);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/users\", requireAuth, requireRole(['super_admin']), async (req, res) => {\n    try {\n      const validation = z.object({\n        username: z.string().min(3),\n        email: z.string().email(),\n        firstName: z.string().min(1),\n        lastName: z.string().min(1),\n        password: z.string().min(8),\n        role: z.enum(['super_admin', 'admin', 'manager', 'user']),\n      }).safeParse(req.body);\n\n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid user data\", errors: validation.error.issues });\n      }\n\n      // Check for existing username or email\n      const existingUsername = await storage.getUserByUsername(validation.data.username);\n      if (existingUsername) {\n        return res.status(409).json({ message: \"Username already exists\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(validation.data.email);\n      if (existingEmail) {\n        return res.status(409).json({ message: \"Email already exists\" });\n      }\n\n      const { password, ...userData } = validation.data;\n      const passwordHash = await bcrypt.hash(password, 10);\n\n      const user = await storage.createUser({\n        ...userData,\n        passwordHash,\n      });\n\n      // Remove password hash from response\n      const { passwordHash: _, ...userResponse } = user;\n      res.status(201).json(userResponse);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = { ...req.body };\n\n      // Only super_admin can change roles and status\n      if (updateData.role && req.session.role !== 'super_admin') {\n        return res.status(403).json({ message: \"Only super admins can change user roles\" });\n      }\n\n      if (updateData.status && req.session.role !== 'super_admin') {\n        return res.status(403).json({ message: \"Only super admins can change user status\" });\n      }\n\n      // Check email uniqueness if being updated\n      if (updateData.email) {\n        const existingEmail = await storage.getUserByEmail(updateData.email);\n        if (existingEmail && existingEmail.id !== id) {\n          return res.status(409).json({ message: \"Email already exists\" });\n        }\n      }\n\n      // If password is being updated, hash it\n      if (updateData.password) {\n        updateData.passwordHash = await bcrypt.hash(updateData.password, 10);\n        delete updateData.password;\n      }\n\n      // Never allow direct passwordHash updates from client\n      delete updateData.passwordHash;\n\n      const user = await storage.updateUser(id, updateData);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Remove password hash from response\n      const { passwordHash: _, ...userResponse } = user;\n      res.json(userResponse);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Admin Password Reset - Admins can reset passwords for other users\n  app.post(\"/api/users/:id/reset-password\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      \n      // Validate request body\n      const validation = adminPasswordResetSchema.safeParse(req.body);\n      if (!validation.success) {\n        const errors = validation.error.errors.map(e => e.message).join(\", \");\n        return res.status(400).json({ message: errors });\n      }\n\n      const { newPassword } = validation.data;\n\n      // Get the target user\n      const targetUser = await storage.getUserById(userId);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Authorization checks based on role hierarchy\n      if (req.session.role === 'admin') {\n        // Admins cannot reset passwords for super_admins\n        if (targetUser.role === 'super_admin') {\n          return res.status(403).json({ message: \"Admins cannot reset passwords for super admins\" });\n        }\n      }\n\n      // Prevent users from resetting their own password via this endpoint (use self-service endpoint instead)\n      if (targetUser.id === req.session.userId) {\n        return res.status(400).json({ message: \"Use the self-service password reset to change your own password\" });\n      }\n\n      // Hash new password\n      const newPasswordHash = await bcrypt.hash(newPassword, 10);\n\n      // Update password\n      await storage.updateUser(userId, { passwordHash: newPasswordHash, updatedAt: new Date() });\n\n      res.json({ message: `Password reset successfully for user ${targetUser.username}` });\n    } catch (error) {\n      console.error(\"Admin password reset error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Company Settings Routes\n  app.get(\"/api/settings/company\", requireAuth, async (req, res) => {\n    try {\n      const settings = await storage.getCompanySettings();\n      res.json(settings || {});\n    } catch (error) {\n      console.error(\"Error fetching company settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch company settings\" });\n    }\n  });\n\n  app.patch(\"/api/settings/company\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const settings = await storage.updateCompanySettings(req.body);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error updating company settings:\", error);\n      res.status(500).json({ message: \"Failed to update company settings\" });\n    }\n  });\n\n  // Asset Types Routes\n  app.get(\"/api/asset-types\", requireAuth, async (req, res) => {\n    try {\n      const assetTypes = await storage.getAllAssetTypes();\n      res.json(assetTypes);\n    } catch (error) {\n      console.error(\"Error fetching asset types:\", error);\n      res.status(500).json({ message: \"Failed to fetch asset types\" });\n    }\n  });\n\n  app.post(\"/api/asset-types\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const validation = z.object({\n        name: z.string().min(1),\n        description: z.string().optional(),\n      }).safeParse(req.body);\n\n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid asset type data\", errors: validation.error.issues });\n      }\n\n      const assetType = await storage.createAssetType(validation.data);\n      res.status(201).json(assetType);\n    } catch (error) {\n      console.error(\"Error creating asset type:\", error);\n      res.status(500).json({ message: \"Failed to create asset type\" });\n    }\n  });\n\n  // Approval Workflow Routes\n  app.get(\"/api/approvals\", requireAuth, async (req, res) => {\n    try {\n      const filters: { status?: string; requestedBy?: number } = {};\n      \n      if (req.query.status) {\n        filters.status = req.query.status as string;\n      }\n      \n      // Location users can only see their own requests or requests they can approve\n      if (req.session.role === 'location_user') {\n        filters.requestedBy = req.session.userId;\n      }\n      \n      const requests = await storage.getAllApprovalRequests(filters);\n      \n      // Filter by location for location_user\n      const accessibleRequests = await Promise.all(\n        requests.map(async (request) => {\n          const currentValue = request.currentValue ? JSON.parse(request.currentValue) : {};\n          const newValue = JSON.parse(request.newValue);\n          \n          // Check access based on entity type\n          if (request.entityType === 'asset') {\n            const asset = await storage.getAsset(request.entityId);\n            if (!canAccessLocation(req, asset?.locationId || null)) {\n              return null;\n            }\n          } else if (request.entityType === 'employee') {\n            const employee = await storage.getEmployee(parseInt(request.entityId));\n            if (!canAccessLocation(req, employee?.locationId || null)) {\n              return null;\n            }\n          }\n          \n          return request;\n        })\n      );\n      \n      res.json(accessibleRequests.filter(r => r !== null));\n    } catch (error) {\n      console.error(\"Error fetching approval requests:\", error);\n      res.status(500).json({ error: \"Failed to fetch approval requests\" });\n    }\n  });\n\n  app.post(\"/api/approvals\", requireAuth, requireRole(['location_user', 'admin', 'super_admin']), async (req, res) => {\n    try {\n      const validation = z.object({\n        requestType: z.enum(['asset_transfer', 'asset_assignment', 'employee_transfer']),\n        entityType: z.enum(['asset', 'employee']),\n        entityId: z.string(),\n        currentValue: z.string().optional(),\n        newValue: z.string(),\n        reason: z.string().optional(),\n        requiredApprovalLevels: z.number().min(1).max(3).default(1),\n      }).safeParse(req.body);\n\n      if (!validation.success) {\n        return res.status(400).json({ error: \"Invalid approval request data\", details: validation.error.issues });\n      }\n\n      // Verify entity exists and user has access\n      const { entityType, entityId } = validation.data;\n      if (entityType === 'asset') {\n        const asset = await storage.getAsset(entityId);\n        if (!asset) {\n          return res.status(404).json({ error: \"Asset not found\" });\n        }\n        if (!canAccessLocation(req, asset.locationId)) {\n          return res.status(403).json({ error: \"Access denied to this asset\" });\n        }\n      } else if (entityType === 'employee') {\n        const employee = await storage.getEmployee(parseInt(entityId));\n        if (!employee) {\n          return res.status(404).json({ error: \"Employee not found\" });\n        }\n        if (!canAccessLocation(req, employee.locationId)) {\n          return res.status(403).json({ error: \"Access denied to this employee\" });\n        }\n      }\n\n      const request = await storage.createApprovalRequest({\n        ...validation.data,\n        requestedBy: req.session.userId!,\n      });\n\n      res.status(201).json(request);\n    } catch (error) {\n      console.error(\"Error creating approval request:\", error);\n      res.status(500).json({ error: \"Failed to create approval request\" });\n    }\n  });\n\n  app.post(\"/api/approvals/:id/approve\", requireAuth, requireRole(['admin', 'super_admin']), async (req, res) => {\n    try {\n      const requestId = parseInt(req.params.id);\n      const request = await storage.getApprovalRequest(requestId);\n      \n      if (!request) {\n        return res.status(404).json({ error: \"Approval request not found\" });\n      }\n      \n      if (request.status !== 'pending') {\n        return res.status(400).json({ error: \"This request has already been processed\" });\n      }\n\n      const validation = z.object({\n        comments: z.string().optional(),\n      }).safeParse(req.body);\n\n      if (!validation.success) {\n        return res.status(400).json({ error: \"Invalid approval data\" });\n      }\n\n      // Create approval action\n      await storage.createApprovalAction({\n        requestId,\n        approvalLevel: request.currentApprovalLevel,\n        actionBy: req.session.userId!,\n        action: 'approved',\n        comments: validation.data.comments,\n      });\n\n      // Check if all levels are approved\n      const newLevel = request.currentApprovalLevel + 1;\n      if (newLevel > request.requiredApprovalLevels) {\n        // All approvals complete - verify entity still exists then execute the change\n        const newValue = JSON.parse(request.newValue);\n        \n        if (request.requestType === 'asset_transfer' && request.entityType === 'asset') {\n          const asset = await storage.getAsset(request.entityId);\n          if (!asset) {\n            return res.status(404).json({ error: \"Asset no longer exists and cannot be transferred\" });\n          }\n          await storage.updateAsset(request.entityId, { locationId: newValue.locationId });\n        } else if (request.requestType === 'asset_assignment' && request.entityType === 'asset') {\n          const asset = await storage.getAsset(request.entityId);\n          if (!asset) {\n            return res.status(404).json({ error: \"Asset no longer exists and cannot be assigned\" });\n          }\n          const employee = await storage.getEmployee(newValue.employeeId);\n          if (!employee) {\n            return res.status(404).json({ error: \"Employee no longer exists for assignment\" });\n          }\n          \n          await storage.updateAsset(request.entityId, { \n            currentUserId: newValue.employeeId,\n            status: 'assigned'\n          });\n          // Create assignment history\n          await storage.createAssignment({\n            assetId: request.entityId,\n            employeeId: newValue.employeeId,\n            assignedDate: new Date().toISOString().split('T')[0],\n            assignmentReason: request.reason || 'Approved assignment',\n          });\n        } else if (request.requestType === 'employee_transfer' && request.entityType === 'employee') {\n          const employee = await storage.getEmployee(parseInt(request.entityId));\n          if (!employee) {\n            return res.status(404).json({ error: \"Employee no longer exists and cannot be transferred\" });\n          }\n          await storage.updateEmployee(parseInt(request.entityId), { locationId: newValue.locationId });\n        }\n\n        await storage.updateApprovalRequest(requestId, {\n          status: 'approved',\n          completedAt: new Date(),\n          completedBy: req.session.userId!,\n        });\n      } else {\n        // Move to next approval level\n        await storage.updateApprovalRequest(requestId, {\n          currentApprovalLevel: newLevel,\n        });\n      }\n\n      const updatedRequest = await storage.getApprovalRequest(requestId);\n      res.json(updatedRequest);\n    } catch (error) {\n      console.error(\"Error approving request:\", error);\n      res.status(500).json({ error: \"Failed to approve request\" });\n    }\n  });\n\n  app.post(\"/api/approvals/:id/reject\", requireAuth, requireRole(['admin', 'super_admin']), async (req, res) => {\n    try {\n      const requestId = parseInt(req.params.id);\n      const request = await storage.getApprovalRequest(requestId);\n      \n      if (!request) {\n        return res.status(404).json({ error: \"Approval request not found\" });\n      }\n      \n      if (request.status !== 'pending') {\n        return res.status(400).json({ error: \"This request has already been processed\" });\n      }\n\n      const validation = z.object({\n        comments: z.string().min(1, \"Rejection reason is required\"),\n      }).safeParse(req.body);\n\n      if (!validation.success) {\n        return res.status(400).json({ error: \"Rejection reason is required\", details: validation.error.issues });\n      }\n\n      // Create rejection action\n      await storage.createApprovalAction({\n        requestId,\n        approvalLevel: request.currentApprovalLevel,\n        actionBy: req.session.userId!,\n        action: 'rejected',\n        comments: validation.data.comments,\n      });\n\n      // Update request status\n      await storage.updateApprovalRequest(requestId, {\n        status: 'rejected',\n        completedAt: new Date(),\n        completedBy: req.session.userId!,\n      });\n\n      const updatedRequest = await storage.getApprovalRequest(requestId);\n      res.json(updatedRequest);\n    } catch (error) {\n      console.error(\"Error rejecting request:\", error);\n      res.status(500).json({ error: \"Failed to reject request\" });\n    }\n  });\n\n  app.get(\"/api/approvals/:id/actions\", requireAuth, async (req, res) => {\n    try {\n      const actions = await storage.getApprovalActions(parseInt(req.params.id));\n      res.json(actions);\n    } catch (error) {\n      console.error(\"Error fetching approval actions:\", error);\n      res.status(500).json({ error: \"Failed to fetch approval actions\" });\n    }\n  });\n\n  // Sample Data Cleanup Route (for production deployment)\n  app.post(\"/api/cleanup/sample-data\", requireAuth, requireRole(['super_admin']), async (req, res) => {\n    try {\n      const confirmation = req.body.confirmation;\n      \n      if (confirmation !== \"DELETE_ALL_SAMPLE_DATA\") {\n        return res.status(400).json({ \n          error: \"Invalid confirmation\", \n          message: \"Please provide confirmation: 'DELETE_ALL_SAMPLE_DATA'\" \n        });\n      }\n\n      console.log(\"⚠️  Starting sample data cleanup...\");\n      \n      // Get all data counts before deletion\n      const beforeCounts = {\n        assets: (await storage.getAllAssets()).length,\n        employees: (await storage.getAllEmployees()).length,\n        locations: (await storage.getAllLocations()).length,\n        assignments: (await storage.getAssignmentHistory()).length,\n        maintenance: (await storage.getMaintenanceRecords()).length,\n        cctv: (await storage.getAllCctvSystems()).length,\n        biometric: (await storage.getAllBiometricSystems()).length,\n        backups: (await storage.getBackups()).length,\n      };\n\n      // Delete all sample data in correct order (respecting foreign keys)\n      // 1. Delete backups (references assets)\n      const allBackups = await storage.getBackups();\n      for (const backup of allBackups) {\n        await storage.deleteBackup(backup.id);\n      }\n\n      // 2. Delete assignment history (references assets and employees)\n      // Note: Assignment history deletion might not be exposed in API, so we'll skip it\n      \n      // 3. Delete maintenance records (references assets)\n      const allMaintenance = await storage.getMaintenanceRecords();\n      for (const record of allMaintenance) {\n        await storage.deleteMaintenanceRecord(record.id);\n      }\n\n      // 4. Delete CCTV systems (references locations)\n      const allCctv = await storage.getAllCctvSystems();\n      for (const system of allCctv) {\n        await storage.deleteCctvSystem(system.id);\n      }\n\n      // 5. Delete biometric systems (references locations)\n      const allBiometric = await storage.getAllBiometricSystems();\n      for (const system of allBiometric) {\n        await storage.deleteBiometricSystem(system.id);\n      }\n\n      // 6. Delete assets (references employees and locations)\n      const allAssets = await storage.getAllAssets();\n      for (const asset of allAssets) {\n        await storage.deleteAsset(asset.assetId);\n      }\n\n      // 7. Delete employees (references locations)\n      const allEmployees = await storage.getAllEmployees();\n      for (const employee of allEmployees) {\n        // Keep admin user's associated employee if exists\n        if (employee.email !== 'admin@bodycraft.com') {\n          await storage.deleteEmployee(employee.id);\n        }\n      }\n\n      // 8. Delete locations (but keep one for admin)\n      const allLocations = await storage.getAllLocations();\n      let keptLocationId = null;\n      for (const location of allLocations) {\n        if (!keptLocationId) {\n          keptLocationId = location.id; // Keep first location for admin\n        } else {\n          await storage.deleteLocation(location.id);\n        }\n      }\n\n      const afterCounts = {\n        assets: (await storage.getAllAssets()).length,\n        employees: (await storage.getAllEmployees()).length,\n        locations: (await storage.getAllLocations()).length,\n        assignments: 0, // Can't count, no API\n        maintenance: (await storage.getMaintenanceRecords()).length,\n        cctv: (await storage.getAllCctvSystems()).length,\n        biometric: (await storage.getAllBiometricSystems()).length,\n        backups: (await storage.getBackups()).length,\n      };\n\n      console.log(\"✅ Sample data cleanup completed!\");\n      \n      res.json({\n        success: true,\n        message: \"Sample data cleanup completed successfully\",\n        deletedCounts: {\n          assets: beforeCounts.assets - afterCounts.assets,\n          employees: beforeCounts.employees - afterCounts.employees,\n          locations: beforeCounts.locations - afterCounts.locations,\n          maintenance: beforeCounts.maintenance - afterCounts.maintenance,\n          cctv: beforeCounts.cctv - afterCounts.cctv,\n          biometric: beforeCounts.biometric - afterCounts.biometric,\n          backups: beforeCounts.backups - afterCounts.backups,\n        },\n        remainingCounts: afterCounts,\n        note: \"One location has been kept for admin access. Admin user has been preserved.\"\n      });\n    } catch (error) {\n      console.error(\"❌ Error during sample data cleanup:\", error);\n      res.status(500).json({ error: \"Failed to cleanup sample data\", details: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  // Generate demo invoice data\n  app.post(\"/api/invoices/generate-demo\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const demoInvoices: InsertInvoice[] = [\n        {\n          invoiceNumber: \"INV-2024-001\",\n          invoiceDate: \"2024-10-01\",\n          amount: \"45000\",\n          category: \"repairs\",\n          vendorName: \"Tech Repairs India\",\n          paymentStatus: \"paid\",\n          description: \"Laptop screen replacement and motherboard repair for Store #12\",\n        },\n        {\n          invoiceNumber: \"INV-2024-002\",\n          invoiceDate: \"2024-10-05\",\n          amount: \"125000\",\n          category: \"hardware\",\n          vendorName: \"Dell India\",\n          paymentStatus: \"paid\",\n          description: \"Purchase of 5 new laptops for new store opening\",\n        },\n        {\n          invoiceNumber: \"INV-2024-003\",\n          invoiceDate: \"2024-10-08\",\n          amount: \"8500\",\n          category: \"internet\",\n          vendorName: \"Airtel Business\",\n          paymentStatus: \"paid\",\n          description: \"Monthly internet bill for Store #1 - October 2024\",\n        },\n        {\n          invoiceNumber: \"INV-2024-004\",\n          invoiceDate: \"2024-10-10\",\n          amount: \"15000\",\n          category: \"software\",\n          vendorName: \"Microsoft India\",\n          paymentStatus: \"unpaid\",\n          description: \"Microsoft Office 365 annual renewal for 10 users\",\n        },\n        {\n          invoiceNumber: \"INV-2024-005\",\n          invoiceDate: \"2024-10-12\",\n          amount: \"32000\",\n          category: \"repairs\",\n          vendorName: \"Quick Fix IT Solutions\",\n          paymentStatus: \"unpaid\",\n          description: \"CCTV camera repair and networking equipment maintenance\",\n        },\n        {\n          invoiceNumber: \"INV-2024-006\",\n          invoiceDate: \"2024-10-15\",\n          amount: \"75000\",\n          category: \"hardware\",\n          vendorName: \"HP Enterprise\",\n          paymentStatus: \"paid\",\n          description: \"Purchase of 3 desktop computers and 2 printers\",\n        },\n        {\n          invoiceNumber: \"INV-2024-007\",\n          invoiceDate: \"2024-10-18\",\n          amount: \"9500\",\n          category: \"internet\",\n          vendorName: \"Jio Fiber Business\",\n          paymentStatus: \"paid\",\n          description: \"Monthly internet bill for Store #5 - October 2024\",\n        },\n        {\n          invoiceNumber: \"INV-2024-008\",\n          invoiceDate: \"2024-10-20\",\n          amount: \"28000\",\n          category: \"software\",\n          vendorName: \"Adobe India\",\n          paymentStatus: \"unpaid\",\n          description: \"Adobe Creative Cloud subscription for design team\",\n        },\n        {\n          invoiceNumber: \"INV-2024-009\",\n          invoiceDate: \"2024-10-22\",\n          amount: \"18500\",\n          category: \"maintenance\",\n          vendorName: \"City IT Services\",\n          paymentStatus: \"paid\",\n          description: \"Quarterly maintenance contract for all IT equipment at HQ\",\n        },\n        {\n          invoiceNumber: \"INV-2024-010\",\n          invoiceDate: \"2024-10-25\",\n          amount: \"52000\",\n          category: \"hardware\",\n          vendorName: \"Lenovo India\",\n          paymentStatus: \"unpaid\",\n          description: \"Purchase of 2 servers for backup infrastructure\",\n        },\n      ];\n\n      const createdInvoices = [];\n      for (const invoice of demoInvoices) {\n        const created = await storage.createInvoice(invoice);\n        createdInvoices.push(created);\n      }\n\n      res.json({ \n        success: true, \n        message: `Successfully created ${createdInvoices.length} demo invoices`,\n        invoices: createdInvoices \n      });\n    } catch (error) {\n      console.error(\"Error generating demo invoices:\", error);\n      res.status(500).json({ error: \"Failed to generate demo invoices\" });\n    }\n  });\n\n  // Object Storage upload URL route (requires authentication and admin role)\n  app.post(\"/api/object-storage/upload-url\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const { ObjectStorageService } = await import(\"./objectStorage\");\n      const objectStorage = new ObjectStorageService();\n      \n      const uploadUrl = await objectStorage.getObjectEntityUploadURL();\n      res.json({ url: uploadUrl });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Invoice routes (all require authentication)\n  app.get(\"/api/invoices\", requireAuth, async (req, res) => {\n    try {\n      const invoices = await storage.getAllInvoices();\n      res.json(invoices);\n    } catch (error) {\n      console.error(\"Error fetching invoices:\", error);\n      res.status(500).json({ error: \"Failed to fetch invoices\" });\n    }\n  });\n\n  app.get(\"/api/invoices/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const invoice = await storage.getInvoice(id);\n      \n      if (!invoice) {\n        return res.status(404).json({ error: \"Invoice not found\" });\n      }\n      \n      res.json(invoice);\n    } catch (error) {\n      console.error(\"Error fetching invoice:\", error);\n      res.status(500).json({ error: \"Failed to fetch invoice\" });\n    }\n  });\n\n  app.post(\"/api/invoices\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const validatedData = insertInvoiceSchema.parse(req.body);\n      const invoice = await storage.createInvoice(validatedData);\n      res.status(201).json(invoice);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation failed\", details: error.errors });\n      }\n      console.error(\"Error creating invoice:\", error);\n      res.status(500).json({ error: \"Failed to create invoice\" });\n    }\n  });\n\n  app.patch(\"/api/invoices/:id\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validatedData = insertInvoiceSchema.partial().parse(req.body);\n      const invoice = await storage.updateInvoice(id, validatedData);\n      \n      if (!invoice) {\n        return res.status(404).json({ error: \"Invoice not found\" });\n      }\n      \n      res.json(invoice);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation failed\", details: error.errors });\n      }\n      console.error(\"Error updating invoice:\", error);\n      res.status(500).json({ error: \"Failed to update invoice\" });\n    }\n  });\n\n  app.delete(\"/api/invoices/:id\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteInvoice(id);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"Invoice not found\" });\n      }\n      \n      res.json({ message: \"Invoice deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting invoice:\", error);\n      res.status(500).json({ error: \"Failed to delete invoice\" });\n    }\n  });\n\n  // Compliance Management Routes\n  \n  // GET /api/compliance/tasks - Fetch compliance tasks with filters\n  app.get(\"/api/compliance/tasks\", requireAuth, async (req, res) => {\n    try {\n      const filters: any = {};\n      \n      if (req.query.status) filters.status = req.query.status as string;\n      if (req.query.priority) filters.priority = req.query.priority as string;\n      if (req.query.task_type) filters.taskType = req.query.task_type as string;\n      if (req.query.overdue_only === 'true') filters.overdueOnly = true;\n      \n      // Location-based access control\n      if (req.session.role === 'location_user' && req.session.locationId) {\n        filters.locationId = req.session.locationId;\n      } else if (req.query.location_id) {\n        filters.locationId = parseInt(req.query.location_id as string);\n      }\n      \n      const tasks = await storage.getComplianceTasks(filters);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching compliance tasks:\", error);\n      res.status(500).json({ error: \"Failed to fetch compliance tasks\" });\n    }\n  });\n  \n  // POST /api/compliance/tasks - Create new compliance task\n  app.post(\"/api/compliance/tasks\", requireAuth, async (req, res) => {\n    try {\n      const taskData = req.body;\n      \n      // Determine location based on role\n      if (req.session.role === 'location_user' && req.session.locationId) {\n        taskData.locationId = req.session.locationId;\n      }\n      \n      // Set created_by to current user\n      taskData.createdBy = req.session.userId;\n      \n      // Validate required fields\n      if (!taskData.taskName || !taskData.taskType || !taskData.dueDate) {\n        return res.status(400).json({ \n          error: \"Missing required fields: taskName, taskType, dueDate\" \n        });\n      }\n      \n      const task = await storage.createComplianceTask(taskData);\n      \n      // Create audit trail\n      await storage.createComplianceAuditTrail({\n        taskId: task.id,\n        action: 'created',\n        performedBy: req.session.userId!,\n        newValues: JSON.stringify(task),\n        ipAddress: req.ip || req.socket.remoteAddress,\n        userAgent: req.headers['user-agent'],\n      });\n      \n      res.status(201).json(task);\n    } catch (error) {\n      console.error(\"Error creating compliance task:\", error);\n      res.status(500).json({ error: \"Failed to create compliance task\" });\n    }\n  });\n  \n  // PUT /api/compliance/tasks/:id - Update compliance task\n  app.put(\"/api/compliance/tasks/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      // Load existing task\n      const existingTask = await storage.getComplianceTask(id);\n      if (!existingTask) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n      \n      // Location user access control\n      if (req.session.role === 'location_user' && req.session.locationId !== existingTask.locationId) {\n        return res.status(403).json({ error: \"Access denied to this task\" });\n      }\n      \n      const updateData = req.body;\n      const updatedTask = await storage.updateComplianceTask(id, updateData);\n      \n      // Create audit trail\n      await storage.createComplianceAuditTrail({\n        taskId: id,\n        action: 'updated',\n        performedBy: req.session.userId!,\n        oldValues: JSON.stringify(existingTask),\n        newValues: JSON.stringify(updatedTask),\n        ipAddress: req.ip || req.socket.remoteAddress,\n        userAgent: req.headers['user-agent'],\n      });\n      \n      res.json(updatedTask);\n    } catch (error) {\n      console.error(\"Error updating compliance task:\", error);\n      res.status(500).json({ error: \"Failed to update compliance task\" });\n    }\n  });\n  \n  // DELETE /api/compliance/tasks/:id - Delete compliance task (Admin only)\n  app.delete(\"/api/compliance/tasks/:id\", requireAuth, requireRole(['super_admin', 'admin']), async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      // Get task for audit trail\n      const task = await storage.getComplianceTask(id);\n      if (!task) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n      \n      const success = await storage.deleteComplianceTask(id);\n      \n      if (success) {\n        // Create audit trail\n        await storage.createComplianceAuditTrail({\n          taskId: null, // Task is deleted\n          action: 'deleted',\n          performedBy: req.session.userId!,\n          oldValues: JSON.stringify(task),\n          ipAddress: req.ip || req.socket.remoteAddress,\n          userAgent: req.headers['user-agent'],\n        });\n        \n        res.json({ message: \"Task deleted successfully\" });\n      } else {\n        res.status(404).json({ error: \"Task not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting compliance task:\", error);\n      res.status(500).json({ error: \"Failed to delete compliance task\" });\n    }\n  });\n  \n  // GET /api/compliance/dashboard - Get compliance dashboard stats\n  app.get(\"/api/compliance/dashboard\", requireAuth, async (req, res) => {\n    try {\n      let locationId: number | undefined;\n      \n      // Location-based access control\n      if (req.session.role === 'location_user' && req.session.locationId) {\n        locationId = req.session.locationId;\n      }\n      \n      const stats = await storage.getComplianceDashboardStats(locationId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching compliance dashboard:\", error);\n      res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n    }\n  });\n  \n  // POST /api/compliance/tasks/:id/evidence - Upload evidence for task\n  app.post(\"/api/compliance/tasks/:id/evidence\", requireAuth, async (req, res) => {\n    try {\n      const taskId = parseInt(req.params.id);\n      const { fileName, fileUrl, fileType, fileSize } = req.body;\n      \n      if (!fileName || !fileUrl) {\n        return res.status(400).json({ error: \"fileName and fileUrl are required\" });\n      }\n      \n      // Verify task exists and user has access\n      const task = await storage.getComplianceTask(taskId);\n      if (!task) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n      \n      if (req.session.role === 'location_user' && req.session.locationId !== task.locationId) {\n        return res.status(403).json({ error: \"Access denied to this task\" });\n      }\n      \n      const evidence = await storage.uploadComplianceEvidence({\n        taskId,\n        fileName,\n        fileUrl,\n        fileType,\n        fileSize,\n        uploadedBy: req.session.userId!,\n      });\n      \n      // Create audit trail\n      await storage.createComplianceAuditTrail({\n        taskId,\n        action: 'evidence_uploaded',\n        performedBy: req.session.userId!,\n        newValues: JSON.stringify({ fileName, fileUrl }),\n        ipAddress: req.ip || req.socket.remoteAddress,\n        userAgent: req.headers['user-agent'],\n      });\n      \n      res.status(201).json(evidence);\n    } catch (error) {\n      console.error(\"Error uploading evidence:\", error);\n      res.status(500).json({ error: \"Failed to upload evidence\" });\n    }\n  });\n\n  // Get audit trail for a compliance task\n  app.get(\"/api/compliance/tasks/:id/audit-trail\", requireAuth, async (req, res) => {\n    try {\n      const taskId = parseInt(req.params.id);\n      \n      const task = await storage.getComplianceTask(taskId);\n      if (!task) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n      \n      // Check access permission\n      if (req.session.role === 'location_user' && req.session.locationId !== task.locationId) {\n        return res.status(403).json({ error: \"Access denied to this task\" });\n      }\n      \n      const auditTrail = await storage.getComplianceAuditTrail(taskId);\n      res.json(auditTrail);\n    } catch (error) {\n      console.error(\"Error fetching audit trail:\", error);\n      res.status(500).json({ error: \"Failed to fetch audit trail\" });\n    }\n  });\n\n  // Get compliance analytics\n  app.get(\"/api/compliance/analytics\", requireAuth, async (req, res) => {\n    try {\n      const locationId = req.session.role === 'location_user' ? (req.session.locationId ?? undefined) : undefined;\n      const tasks = await storage.getComplianceTasks({ locationId });\n      \n      // Calculate analytics\n      const totalTasks = tasks.length;\n      const completedTasks = tasks.filter(t => t.status === 'completed').length;\n      const pendingTasks = tasks.filter(t => t.status === 'pending').length;\n      const overdueTasks = tasks.filter(t => t.isOverdue).length;\n      \n      const complianceRate = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;\n      \n      // Status distribution\n      const statusDistribution = {\n        completed: completedTasks,\n        pending: pendingTasks,\n        overdue: overdueTasks,\n      };\n      \n      // Priority distribution\n      const priorityDistribution = tasks.reduce((acc: any, task) => {\n        acc[task.priority] = (acc[task.priority] || 0) + 1;\n        return acc;\n      }, {});\n      \n      // Task type distribution\n      const typeDistribution = tasks.reduce((acc: any, task) => {\n        acc[task.taskType] = (acc[task.taskType] || 0) + 1;\n        return acc;\n      }, {});\n      \n      // Upcoming tasks (next 7 days)\n      const today = new Date();\n      const next7Days = new Date(today);\n      next7Days.setDate(today.getDate() + 7);\n      \n      const upcomingTasks = tasks\n        .filter(t => {\n          const dueDate = new Date(t.dueDate);\n          return t.status === 'pending' && dueDate >= today && dueDate <= next7Days;\n        })\n        .sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime())\n        .slice(0, 5);\n      \n      // Compliance trends (last 30 days)\n      const trends: any[] = [];\n      for (let i = 29; i >= 0; i--) {\n        const date = new Date(today);\n        date.setDate(today.getDate() - i);\n        date.setHours(0, 0, 0, 0);\n        \n        const tasksCompletedOnDay = tasks.filter(t => {\n          if (!t.completionDate) return false;\n          const completionDate = new Date(t.completionDate);\n          completionDate.setHours(0, 0, 0, 0);\n          return completionDate.getTime() === date.getTime();\n        }).length;\n        \n        trends.push({\n          date: date.toISOString().split('T')[0],\n          completed: tasksCompletedOnDay,\n        });\n      }\n      \n      res.json({\n        summary: {\n          totalTasks,\n          completedTasks,\n          pendingTasks,\n          overdueTasks,\n          complianceRate,\n        },\n        statusDistribution,\n        priorityDistribution,\n        typeDistribution,\n        upcomingTasks,\n        trends,\n      });\n    } catch (error) {\n      console.error(\"Error fetching compliance analytics:\", error);\n      res.status(500).json({ error: \"Failed to fetch analytics\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":93526},"server/seed.ts":{"content":"import { DatabaseStorage } from \"./database-storage\";\nimport bcrypt from \"bcryptjs\";\n\nconst storage = new DatabaseStorage();\n\nasync function seedDatabase() {\n  console.log(\"🌱 Starting database seed...\");\n\n  try {\n    // 1. Create company settings\n    console.log(\"📝 Creating company settings...\");\n    await storage.updateCompanySettings({\n      companyName: \"BODYCRAFT\",\n      timezone: \"Asia/Kolkata\",\n      dateFormat: \"DD/MM/YYYY\",\n      language: \"en\",\n      sessionTimeout: 480,\n      passwordMinLength: 8,\n      emailNotificationsEnabled: true,\n      maintenanceMode: false,\n    });\n\n    // 2. Create asset types\n    console.log(\"🏷️ Creating asset types...\");\n    const assetTypes = [\n      { name: \"Laptop\", description: \"Portable computers for mobile work\" },\n      { name: \"Desktop\", description: \"Desktop computers for office use\" },\n      { name: \"Monitor\", description: \"Display screens and monitors\" },\n      { name: \"Mobile\", description: \"Mobile phones and tablets\" },\n      { name: \"Router\", description: \"Network routers and switches\" },\n      { name: \"Printer\", description: \"Printers and scanning devices\" },\n    ];\n\n    for (const type of assetTypes) {\n      await storage.createAssetType(type);\n    }\n\n    // 3. Create locations (BODYCRAFT outlets)\n    console.log(\"🏢 Creating outlet locations...\");\n    const locations = [\n      { \n        outletName: \"JP Nagar\", \n        city: \"Bangalore\", \n        state: \"Karnataka\", \n        address: \"123 JP Nagar Main Road, Bangalore\", \n        managerName: \"Rajesh Kumar\", \n        contactDetails: \"rajesh@bodycraft.com, +91-9876543210\" \n      },\n      { \n        outletName: \"Koramangala\", \n        city: \"Bangalore\", \n        state: \"Karnataka\", \n        address: \"456 Koramangala Ring Road, Bangalore\", \n        managerName: \"Priya Sharma\", \n        contactDetails: \"priya@bodycraft.com, +91-9876543211\" \n      },\n      { \n        outletName: \"Indiranagar\", \n        city: \"Bangalore\", \n        state: \"Karnataka\", \n        address: \"789 Indiranagar Main Street, Bangalore\", \n        managerName: \"Amit Singh\", \n        contactDetails: \"amit@bodycraft.com, +91-9876543212\" \n      },\n    ];\n\n    const createdLocations = [];\n    for (const location of locations) {\n      const created = await storage.createLocation(location);\n      createdLocations.push(created);\n    }\n\n    // 4. Create employees\n    console.log(\"👥 Creating employees...\");\n    const employees = [\n      { \n        employeeCode: \"BFC2024001\", \n        firstName: \"Rajesh\", \n        lastName: \"Kumar\", \n        department: \"IT\", \n        designation: \"Manager\", \n        email: \"rajesh@bodycraft.com\", \n        phone: \"+91-9876543210\",\n        status: \"active\", \n        locationId: createdLocations[0].id \n      },\n      { \n        employeeCode: \"BFC2024002\", \n        firstName: \"Priya\", \n        lastName: \"Sharma\", \n        department: \"Sales\", \n        designation: \"Executive\", \n        email: \"priya@bodycraft.com\", \n        phone: \"+91-9876543211\",\n        status: \"active\", \n        locationId: createdLocations[1].id \n      },\n      { \n        employeeCode: \"BFC2024003\", \n        firstName: \"Amit\", \n        lastName: \"Singh\", \n        department: \"Operations\", \n        designation: \"Specialist\", \n        email: \"amit@bodycraft.com\", \n        phone: \"+91-9876543212\",\n        status: \"active\", \n        locationId: createdLocations[2].id \n      },\n      { \n        employeeCode: \"BFC2024004\", \n        firstName: \"Sunita\", \n        lastName: \"Reddy\", \n        department: \"Marketing\", \n        designation: \"Specialist\", \n        email: \"sunita@bodycraft.com\", \n        phone: \"+91-9876543213\",\n        status: \"active\", \n        locationId: createdLocations[0].id \n      },\n    ];\n\n    const createdEmployees = [];\n    for (const employee of employees) {\n      const created = await storage.createEmployee(employee);\n      createdEmployees.push(created);\n    }\n\n    // 5. Create super admin user\n    console.log(\"👤 Creating super admin user...\");\n    const hashedPassword = await bcrypt.hash(\"admin123\", 10);\n    await storage.createUser({\n      username: \"admin\",\n      email: \"admin@bodycraft.com\",\n      passwordHash: hashedPassword,\n      firstName: \"Super\",\n      lastName: \"Admin\",\n      role: \"super_admin\",\n      status: \"active\",\n      employeeId: createdEmployees[0].id,\n    });\n\n    // 6. Create assets\n    console.log(\"💻 Creating assets...\");\n    const assets = [\n      { \n        assetId: \"BFC001\", \n        modelName: \"ThinkPad E15\", \n        brand: \"Lenovo\", \n        serviceTag: \"LEN001\", \n        assetType: \"Laptop\", \n        status: \"assigned\", \n        condition: \"good\", \n        purchaseDate: \"2024-01-15\",\n        warrantyExpiry: \"2026-01-15\",\n        locationId: createdLocations[0].id, \n        currentUserId: createdEmployees[0].id \n      },\n      { \n        assetId: \"BFC002\", \n        modelName: \"OptiPlex 3080\", \n        brand: \"Dell\", \n        serviceTag: \"DELL002\", \n        assetType: \"Desktop\", \n        status: \"available\", \n        condition: \"excellent\", \n        purchaseDate: \"2024-02-01\",\n        warrantyExpiry: \"2027-02-01\",\n        locationId: createdLocations[0].id, \n        currentUserId: null \n      },\n      { \n        assetId: \"BFC003\", \n        modelName: \"Surface Pro 8\", \n        brand: \"Microsoft\", \n        serviceTag: \"MS003\", \n        assetType: \"Laptop\", \n        status: \"assigned\", \n        condition: \"good\", \n        purchaseDate: \"2024-01-20\",\n        warrantyExpiry: \"2026-01-20\",\n        locationId: createdLocations[1].id, \n        currentUserId: createdEmployees[1].id \n      },\n      { \n        assetId: \"BFC004\", \n        modelName: \"UZ2450\", \n        brand: \"Dell\", \n        serviceTag: \"DELL004\", \n        assetType: \"Monitor\", \n        status: \"available\", \n        condition: \"good\", \n        purchaseDate: \"2024-02-05\",\n        warrantyExpiry: \"2027-02-05\",\n        locationId: createdLocations[1].id, \n        currentUserId: null \n      },\n      { \n        assetId: \"BFC005\", \n        modelName: \"iPhone 14\", \n        brand: \"Apple\", \n        serviceTag: \"APL005\", \n        assetType: \"Mobile\", \n        status: \"assigned\", \n        condition: \"excellent\", \n        purchaseDate: \"2024-01-10\",\n        warrantyExpiry: \"2025-01-10\",\n        locationId: createdLocations[2].id, \n        currentUserId: createdEmployees[2].id \n      },\n      { \n        assetId: \"BFC006\", \n        modelName: \"MacBook Pro 14\", \n        brand: \"Apple\", \n        serviceTag: \"APL006\", \n        assetType: \"Laptop\", \n        status: \"maintenance\", \n        condition: \"fair\", \n        purchaseDate: \"2023-12-15\",\n        warrantyExpiry: \"2025-12-15\",\n        locationId: createdLocations[2].id, \n        currentUserId: null \n      },\n      { \n        assetId: \"BFC007\", \n        modelName: \"ThinkPad X1\", \n        brand: \"Lenovo\", \n        serviceTag: \"LEN007\", \n        assetType: \"Laptop\", \n        status: \"assigned\", \n        condition: \"good\", \n        purchaseDate: \"2024-03-01\",\n        warrantyExpiry: \"2026-03-01\",\n        locationId: createdLocations[0].id, \n        currentUserId: createdEmployees[3].id \n      },\n    ];\n\n    for (const asset of assets) {\n      await storage.createAsset(asset);\n    }\n\n    // 7. Create assignment history\n    console.log(\"📋 Creating assignment history...\");\n    const assignments = [\n      { \n        assetId: \"BFC001\", \n        employeeId: createdEmployees[0].id, \n        assignedDate: \"2024-01-15\", \n        returnedDate: null, \n        assignmentReason: \"New employee setup\", \n        conditionOnAssignment: \"good\",\n        createdBy: createdEmployees[0].id \n      },\n      { \n        assetId: \"BFC003\", \n        employeeId: createdEmployees[1].id, \n        assignedDate: \"2024-02-01\", \n        returnedDate: null, \n        assignmentReason: \"Department transfer\", \n        conditionOnAssignment: \"good\",\n        createdBy: createdEmployees[0].id \n      },\n      { \n        assetId: \"BFC005\", \n        employeeId: createdEmployees[2].id, \n        assignedDate: \"2024-02-15\", \n        returnedDate: null, \n        assignmentReason: \"Business requirement\", \n        conditionOnAssignment: \"excellent\",\n        createdBy: createdEmployees[0].id \n      },\n      { \n        assetId: \"BFC007\", \n        employeeId: createdEmployees[3].id, \n        assignedDate: \"2024-03-01\", \n        returnedDate: null, \n        assignmentReason: \"New hire equipment\", \n        conditionOnAssignment: \"good\",\n        createdBy: createdEmployees[0].id \n      },\n    ];\n\n    for (const assignment of assignments) {\n      await storage.createAssignment(assignment);\n    }\n\n    // 8. Create maintenance records\n    console.log(\"🔧 Creating maintenance records...\");\n    const maintenanceRecords = [\n      { \n        assetId: \"BFC006\", \n        maintenanceType: \"corrective\", \n        description: \"Screen replacement due to crack\", \n        scheduledDate: \"2024-03-01\", \n        completedDate: \"2024-03-02\", \n        cost: \"15000.00\", \n        technicianName: \"Ravi Tech Services\", \n        partsReplaced: \"LCD Screen\" \n      },\n      { \n        assetId: \"BFC001\", \n        maintenanceType: \"preventive\", \n        description: \"Regular cleaning and system check\", \n        scheduledDate: \"2024-03-15\", \n        completedDate: \"2024-03-15\", \n        cost: \"500.00\", \n        technicianName: \"Internal IT\", \n        partsReplaced: null \n      },\n      { \n        assetId: \"BFC002\", \n        maintenanceType: \"upgrade\", \n        description: \"RAM upgrade from 8GB to 16GB\", \n        scheduledDate: \"2024-02-20\", \n        completedDate: \"2024-02-21\", \n        cost: \"3500.00\", \n        technicianName: \"Dell Support\", \n        partsReplaced: \"8GB DDR4 RAM\" \n      },\n    ];\n\n    for (const record of maintenanceRecords) {\n      await storage.createMaintenanceRecord(record);\n    }\n\n    // 9. Create CCTV systems\n    console.log(\"📹 Creating CCTV systems...\");\n    const cctvSystems = [\n      { \n        deviceName: \"JP Nagar Entrance Camera\", \n        ipAddress: \"192.168.1.101\", \n        locationDetails: \"Main entrance\", \n        username: \"admin\", \n        passwordHash: await bcrypt.hash(\"hikvision123\", 10), \n        status: \"online\", \n        lastOnline: new Date(), \n        locationId: createdLocations[0].id \n      },\n      { \n        deviceName: \"JP Nagar DVR System\", \n        ipAddress: \"192.168.1.102\", \n        locationDetails: \"Server room\", \n        username: \"admin\", \n        passwordHash: await bcrypt.hash(\"hikvision123\", 10), \n        status: \"online\", \n        lastOnline: new Date(), \n        locationId: createdLocations[0].id \n      },\n      { \n        deviceName: \"Koramangala Reception Cam\", \n        ipAddress: \"192.168.2.101\", \n        locationDetails: \"Reception area\", \n        username: \"admin\", \n        passwordHash: await bcrypt.hash(\"hikvision123\", 10), \n        status: \"online\", \n        lastOnline: new Date(), \n        locationId: createdLocations[1].id \n      },\n      { \n        deviceName: \"Indiranagar Security DVR\", \n        ipAddress: \"192.168.3.101\", \n        locationDetails: \"Security office\", \n        username: \"admin\", \n        passwordHash: await bcrypt.hash(\"hikvision123\", 10), \n        status: \"offline\", \n        lastOnline: null, \n        locationId: createdLocations[2].id \n      },\n    ];\n\n    for (const system of cctvSystems) {\n      await storage.createCctvSystem(system);\n    }\n\n    // 10. Create biometric systems\n    console.log(\"👆 Creating biometric systems...\");\n    const biometricSystems = [\n      { \n        deviceName: \"JP Nagar Attendance\", \n        deviceModel: \"eSSL K30 Pro\", \n        ipAddress: \"192.168.1.201\", \n        locationDetails: \"Main entrance\", \n        employeeCount: 15, \n        lastSyncDate: new Date(), \n        status: \"online\", \n        locationId: createdLocations[0].id \n      },\n      { \n        deviceName: \"Koramangala Biometric\", \n        deviceModel: \"ZKTeco F18\", \n        ipAddress: \"192.168.2.201\", \n        locationDetails: \"Employee entrance\", \n        employeeCount: 12, \n        lastSyncDate: new Date(), \n        status: \"online\", \n        locationId: createdLocations[1].id \n      },\n      { \n        deviceName: \"Indiranagar Access Control\", \n        deviceModel: \"Realtime T502\", \n        ipAddress: \"192.168.3.201\", \n        locationDetails: \"Staff entry\", \n        employeeCount: 18, \n        lastSyncDate: new Date(), \n        status: \"error\", \n        locationId: createdLocations[2].id \n      },\n    ];\n\n    for (const system of biometricSystems) {\n      await storage.createBiometricSystem(system);\n    }\n\n    // 11. Create backup records\n    console.log(\"💾 Creating backup records...\");\n    const backupRecords = [\n      { \n        assetId: \"BFC001\", \n        employeeId: createdEmployees[0].id, \n        backupDate: new Date(\"2024-01-14\"), \n        backupSize: \"250GB\", \n        backupType: \"full\", \n        backupLocation: \"NAS Server - /backups/users/rajesh\", \n        performedBy: createdEmployees[0].id \n      },\n      { \n        assetId: \"BFC003\", \n        employeeId: createdEmployees[1].id, \n        backupDate: new Date(\"2024-01-31\"), \n        backupSize: \"180GB\", \n        backupType: \"selective\", \n        backupLocation: \"Cloud Storage - AWS S3\", \n        performedBy: createdEmployees[0].id \n      },\n      { \n        assetId: \"BFC005\", \n        employeeId: createdEmployees[2].id, \n        backupDate: new Date(\"2024-02-14\"), \n        backupSize: \"128GB\", \n        backupType: \"full\", \n        backupLocation: \"Local Server - /backups/mobile\", \n        performedBy: createdEmployees[0].id \n      },\n    ];\n\n    for (const record of backupRecords) {\n      await storage.createBackup(record);\n    }\n\n    console.log(\"✅ Database seeded successfully!\");\n    console.log(\"\\n🔑 Super Admin Login:\");\n    console.log(\"Username: admin\");\n    console.log(\"Password: admin123\");\n    console.log(\"Email: admin@bodycraft.com\");\n    \n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n    throw error;\n  }\n}\n\n// Run seed function immediately\nseedDatabase().then(() => {\n  console.log(\"🎉 Seeding completed!\");\n}).catch((error) => {\n  console.error(\"💥 Seeding failed:\", error);\n  throw error;\n});\n\nexport { seedDatabase };","size_bytes":14230},"server/storage.ts":{"content":"import { \n  type Asset, type InsertAsset,\n  type Employee, type InsertEmployee,\n  type Location, type InsertLocation,\n  type Department, type InsertDepartment,\n  type AssetAssignmentHistory, type InsertAssetAssignmentHistory,\n  type AssetMaintenance, type InsertAssetMaintenance,\n  type CctvSystem, type InsertCctvSystem,\n  type BiometricSystem, type InsertBiometricSystem,\n  type Backup, type InsertBackup,\n  type User, type InsertUser,\n  type CompanySettings, type InsertCompanySettings,\n  type AssetType, type InsertAssetType,\n  type ApprovalRequest, type InsertApprovalRequest,\n  type ApprovalAction, type InsertApprovalAction,\n  type Invoice, type InsertInvoice,\n  type ComplianceSignal, type InsertComplianceSignal,\n  type ComplianceRiskScore, type InsertComplianceRiskScore,\n  type AutomationRun, type InsertAutomationRun,\n  type AiRecommendation, type InsertAiRecommendation,\n  type BackupVerification, type InsertBackupVerification,\n  type ComplianceAssignmentQueue, type InsertComplianceAssignmentQueue\n} from \"@shared/schema\";\n\n// BODYCRAFT MDM Storage Interface\nexport interface IStorage {\n  // Assets\n  getAsset(assetId: string): Promise<Asset | undefined>;\n  getAllAssets(): Promise<Asset[]>;\n  createAsset(asset: InsertAsset): Promise<Asset>;\n  updateAsset(assetId: string, asset: Partial<InsertAsset>): Promise<Asset | undefined>;\n  deleteAsset(assetId: string): Promise<boolean>;\n  \n  // Employees\n  getEmployee(id: number): Promise<Employee | undefined>;\n  getAllEmployees(): Promise<Employee[]>;\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  updateEmployee(id: number, employee: Partial<InsertEmployee>): Promise<Employee | undefined>;\n  deleteEmployee(id: number): Promise<boolean>;\n  \n  // Locations\n  getLocation(id: number): Promise<Location | undefined>;\n  getAllLocations(): Promise<Location[]>;\n  createLocation(location: InsertLocation): Promise<Location>;\n  updateLocation(id: number, location: Partial<InsertLocation>): Promise<Location | undefined>;\n  deleteLocation(id: number): Promise<boolean>;\n  \n  // Departments\n  getDepartment(id: number): Promise<Department | undefined>;\n  getAllDepartments(): Promise<Department[]>;\n  createDepartment(department: InsertDepartment): Promise<Department>;\n  updateDepartment(id: number, department: Partial<InsertDepartment>): Promise<Department | undefined>;\n  deleteDepartment(id: number): Promise<boolean>;\n  \n  // Assignment History\n  getAssignmentHistory(assetId?: string, employeeId?: number): Promise<AssetAssignmentHistory[]>;\n  createAssignment(assignment: InsertAssetAssignmentHistory): Promise<AssetAssignmentHistory>;\n  \n  // Maintenance\n  getMaintenanceRecords(assetId?: string): Promise<AssetMaintenance[]>;\n  createMaintenanceRecord(maintenance: InsertAssetMaintenance): Promise<AssetMaintenance>;\n  updateMaintenanceRecord(id: number, maintenance: Partial<InsertAssetMaintenance>): Promise<AssetMaintenance | undefined>;\n  deleteMaintenanceRecord(id: number): Promise<boolean>;\n  \n  // CCTV Systems\n  getAllCctvSystems(): Promise<CctvSystem[]>;\n  createCctvSystem(system: InsertCctvSystem): Promise<CctvSystem>;\n  updateCctvSystem(id: number, system: Partial<InsertCctvSystem>): Promise<CctvSystem | undefined>;\n  deleteCctvSystem(id: number): Promise<boolean>;\n  \n  // Biometric Systems\n  getAllBiometricSystems(): Promise<BiometricSystem[]>;\n  createBiometricSystem(system: InsertBiometricSystem): Promise<BiometricSystem>;\n  updateBiometricSystem(id: number, system: Partial<InsertBiometricSystem>): Promise<BiometricSystem | undefined>;\n  deleteBiometricSystem(id: number): Promise<boolean>;\n  \n  // Backups\n  getBackups(assetId?: string): Promise<Backup[]>;\n  createBackup(backup: InsertBackup): Promise<Backup>;\n  updateBackup(id: number, backup: Partial<InsertBackup>): Promise<Backup | undefined>;\n  deleteBackup(id: number): Promise<boolean>;\n  \n  // Users (Authentication & Management)\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserById(id: number): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, user: Partial<InsertUser>): Promise<User | undefined>;\n  \n  // Company Settings\n  getCompanySettings(): Promise<CompanySettings | undefined>;\n  updateCompanySettings(settings: Partial<InsertCompanySettings>): Promise<CompanySettings>;\n  \n  // Asset Types\n  getAllAssetTypes(): Promise<AssetType[]>;\n  createAssetType(assetType: InsertAssetType): Promise<AssetType>;\n  \n  // Approval Requests\n  getApprovalRequest(id: number): Promise<ApprovalRequest | undefined>;\n  getAllApprovalRequests(filters?: { status?: string; requestedBy?: number }): Promise<ApprovalRequest[]>;\n  createApprovalRequest(request: InsertApprovalRequest): Promise<ApprovalRequest>;\n  updateApprovalRequest(id: number, request: Partial<InsertApprovalRequest>): Promise<ApprovalRequest | undefined>;\n  \n  // Approval Actions\n  getApprovalActions(requestId: number): Promise<ApprovalAction[]>;\n  createApprovalAction(action: InsertApprovalAction): Promise<ApprovalAction>;\n  \n  // Invoices\n  getAllInvoices(): Promise<Invoice[]>;\n  getInvoice(id: number): Promise<Invoice | undefined>;\n  createInvoice(invoice: InsertInvoice): Promise<Invoice>;\n  updateInvoice(id: number, invoice: Partial<InsertInvoice>): Promise<Invoice | undefined>;\n  deleteInvoice(id: number): Promise<boolean>;\n  \n  // Dashboard Statistics\n  getDashboardStats(): Promise<any>;\n  getRecentActivities(limit?: number): Promise<any[]>;\n  \n  // Compliance Management\n  getComplianceTasks(filters?: { status?: string; priority?: string; taskType?: string; locationId?: number; overdueOnly?: boolean }): Promise<any[]>;\n  getComplianceTask(id: number): Promise<any | undefined>;\n  createComplianceTask(task: any): Promise<any>;\n  updateComplianceTask(id: number, task: any): Promise<any | undefined>;\n  deleteComplianceTask(id: number): Promise<boolean>;\n  getComplianceDashboardStats(locationId?: number): Promise<any>;\n  uploadComplianceEvidence(evidence: any): Promise<any>;\n  createComplianceAuditTrail(trail: any): Promise<any>;\n  getComplianceAuditTrail(taskId: number): Promise<any[]>;\n  \n  // Phase 2: Advanced Analytics\n  getPredictiveMaintenance(locationId: number | null, assetType: string | null, riskLevel: string | null): Promise<any[]>;\n  getUtilizationOptimization(): Promise<any>;\n  getLocationPerformanceAnalytics(): Promise<any[]>;\n  createAssetTransfer(transfer: any): Promise<any>;\n  getRealTimeDashboardData(): Promise<any>;\n  getDashboardTrends(metric: string, period: string): Promise<any[]>;\n  \n  // AI Compliance Automation\n  createComplianceSignal(signal: InsertComplianceSignal): Promise<ComplianceSignal>;\n  getActiveComplianceSignals(filters?: { locationId?: number; severity?: string }): Promise<ComplianceSignal[]>;\n  resolveComplianceSignal(signalId: number): Promise<ComplianceSignal>;\n  \n  createComplianceRiskScore(score: InsertComplianceRiskScore): Promise<ComplianceRiskScore>;\n  getLatestRiskScores(filters?: { locationId?: number; assetId?: string }): Promise<ComplianceRiskScore[]>;\n  \n  createAutomationRun(run: InsertAutomationRun): Promise<AutomationRun>;\n  updateAutomationRun(id: number, run: Partial<InsertAutomationRun>): Promise<AutomationRun>;\n  getAutomationRun(id: number): Promise<AutomationRun | undefined>;\n  getAutomationRuns(limit?: number): Promise<AutomationRun[]>;\n  getAutomationRunSummary(): Promise<{\n    total: number;\n    successful: number;\n    failed: number;\n    successRate: number;\n    totalTasksGenerated: number;\n    totalRisksDetected: number;\n    avgExecutionTime: number;\n    lastRun: AutomationRun | null;\n  }>;\n  \n  createAiRecommendation(recommendation: InsertAiRecommendation): Promise<AiRecommendation>;\n  getAiRecommendations(filters?: { targetType?: string; status?: string; locationId?: number }): Promise<AiRecommendation[]>;\n  updateAiRecommendation(id: number, recommendation: Partial<InsertAiRecommendation>): Promise<AiRecommendation>;\n  \n  createBackupVerification(verification: InsertBackupVerification): Promise<BackupVerification>;\n  getBackupVerifications(filters?: { assetId?: string; status?: string }): Promise<BackupVerification[]>;\n  getDueBackupVerifications(): Promise<BackupVerification[]>;\n  \n  createComplianceAssignment(assignment: InsertComplianceAssignmentQueue): Promise<ComplianceAssignmentQueue>;\n  getComplianceAssignments(filters?: { userId?: number; status?: string }): Promise<ComplianceAssignmentQueue[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private assets: Map<string, Asset>;\n  private employees: Map<number, Employee>;\n  private locations: Map<number, Location>;\n  private assignmentHistory: AssetAssignmentHistory[];\n  private maintenance: AssetMaintenance[];\n  private cctvSystems: Map<number, CctvSystem>;\n  private biometricSystems: Map<number, BiometricSystem>;\n  private backups: Backup[];\n  \n  // Counters for auto-increment IDs\n  private nextEmployeeId: number = 1;\n  private nextLocationId: number = 1;\n  private nextAssignmentId: number = 1;\n  private nextMaintenanceId: number = 1;\n  private nextCctvId: number = 1;\n  private nextBiometricId: number = 1;\n  private nextBackupId: number = 1;\n\n  constructor() {\n    this.assets = new Map();\n    this.employees = new Map();\n    this.locations = new Map();\n    this.assignmentHistory = [];\n    this.maintenance = [];\n    this.cctvSystems = new Map();\n    this.biometricSystems = new Map();\n    this.backups = [];\n    \n    // Initialize with sample data\n    this.initializeSampleData();\n  }\n\n  // Assets\n  async getAsset(assetId: string): Promise<Asset | undefined> {\n    return this.assets.get(assetId);\n  }\n\n  async getAllAssets(): Promise<Asset[]> {\n    return Array.from(this.assets.values());\n  }\n\n  async createAsset(insertAsset: InsertAsset): Promise<Asset> {\n    const asset: Asset = {\n      ...insertAsset,\n      status: insertAsset.status || \"available\",\n      condition: insertAsset.condition || \"good\",\n      serviceTag: insertAsset.serviceTag || null,\n      purchaseDate: insertAsset.purchaseDate || null,\n      warrantyExpiry: insertAsset.warrantyExpiry || null,\n      locationId: insertAsset.locationId || null,\n      currentUserId: insertAsset.currentUserId || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.assets.set(asset.assetId, asset);\n    return asset;\n  }\n\n  async updateAsset(assetId: string, updateData: Partial<InsertAsset>): Promise<Asset | undefined> {\n    const existing = this.assets.get(assetId);\n    if (!existing) return undefined;\n    \n    // Prevent assetId changes as suggested by architect\n    const { assetId: _, ...safeUpdateData } = updateData;\n    \n    const updated: Asset = {\n      ...existing,\n      ...safeUpdateData,\n      assetId: existing.assetId, // Preserve original asset ID\n      createdAt: existing.createdAt, // Preserve creation date\n      updatedAt: new Date(),\n    };\n    this.assets.set(assetId, updated);\n    return updated;\n  }\n\n  async deleteAsset(assetId: string): Promise<boolean> {\n    return this.assets.delete(assetId);\n  }\n\n  // Employees\n  async getEmployee(id: number): Promise<Employee | undefined> {\n    return this.employees.get(id);\n  }\n\n  async getAllEmployees(): Promise<Employee[]> {\n    return Array.from(this.employees.values());\n  }\n\n  async createEmployee(insertEmployee: InsertEmployee): Promise<Employee> {\n    const employee: Employee = {\n      id: this.nextEmployeeId++,\n      employeeCode: insertEmployee.employeeCode,\n      firstName: insertEmployee.firstName,\n      lastName: insertEmployee.lastName,\n      department: insertEmployee.department,\n      designation: insertEmployee.designation || null,\n      email: insertEmployee.email || null,\n      phone: insertEmployee.phone || null,\n      status: insertEmployee.status || \"active\",\n      locationId: insertEmployee.locationId || null,\n      createdAt: new Date(),\n    };\n    this.employees.set(employee.id, employee);\n    return employee;\n  }\n\n  async updateEmployee(id: number, updateData: Partial<InsertEmployee>): Promise<Employee | undefined> {\n    const existing = this.employees.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Employee = { \n      ...existing, \n      ...updateData,\n      id: existing.id, // Prevent ID changes\n      createdAt: existing.createdAt, // Preserve creation date\n    };\n    this.employees.set(id, updated);\n    return updated;\n  }\n\n  async deleteEmployee(id: number): Promise<boolean> {\n    return this.employees.delete(id);\n  }\n\n  // Locations\n  async getLocation(id: number): Promise<Location | undefined> {\n    return this.locations.get(id);\n  }\n\n  async getAllLocations(): Promise<Location[]> {\n    return Array.from(this.locations.values());\n  }\n\n  async createLocation(insertLocation: InsertLocation): Promise<Location> {\n    const location: Location = {\n      id: this.nextLocationId++,\n      outletName: insertLocation.outletName,\n      city: insertLocation.city,\n      state: insertLocation.state,\n      address: insertLocation.address || null,\n      managerName: insertLocation.managerName || null,\n      contactDetails: insertLocation.contactDetails || null,\n      createdAt: new Date(),\n    };\n    this.locations.set(location.id, location);\n    return location;\n  }\n\n  async updateLocation(id: number, updateData: Partial<InsertLocation>): Promise<Location | undefined> {\n    const existing = this.locations.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Location = { \n      ...existing, \n      ...updateData,\n      id: existing.id, // Prevent ID changes\n      createdAt: existing.createdAt, // Preserve creation date\n    };\n    this.locations.set(id, updated);\n    return updated;\n  }\n\n  async deleteLocation(id: number): Promise<boolean> {\n    return this.locations.delete(id);\n  }\n\n  // Assignment History\n  async getAssignmentHistory(assetId?: string, employeeId?: number): Promise<AssetAssignmentHistory[]> {\n    let filtered = this.assignmentHistory;\n    \n    if (assetId) {\n      filtered = filtered.filter(h => h.assetId === assetId);\n    }\n    \n    if (employeeId) {\n      filtered = filtered.filter(h => h.employeeId === employeeId);\n    }\n    \n    return filtered;\n  }\n\n  async createAssignment(insertAssignment: InsertAssetAssignmentHistory): Promise<AssetAssignmentHistory> {\n    const assignment: AssetAssignmentHistory = {\n      id: this.nextAssignmentId++,\n      assetId: insertAssignment.assetId,\n      employeeId: insertAssignment.employeeId,\n      assignedDate: insertAssignment.assignedDate,\n      returnedDate: insertAssignment.returnedDate || null,\n      assignmentReason: insertAssignment.assignmentReason || null,\n      returnReason: insertAssignment.returnReason || null,\n      conditionOnAssignment: insertAssignment.conditionOnAssignment || null,\n      conditionOnReturn: insertAssignment.conditionOnReturn || null,\n      backupDetails: insertAssignment.backupDetails || null,\n      createdBy: insertAssignment.createdBy || null,\n      createdAt: new Date(),\n    };\n    this.assignmentHistory.push(assignment);\n    return assignment;\n  }\n\n  // Maintenance\n  async getMaintenanceRecords(assetId?: string): Promise<AssetMaintenance[]> {\n    if (assetId) {\n      return this.maintenance.filter(m => m.assetId === assetId);\n    }\n    return this.maintenance;\n  }\n\n  async createMaintenanceRecord(insertMaintenance: InsertAssetMaintenance): Promise<AssetMaintenance> {\n    const maintenance: AssetMaintenance = {\n      id: this.nextMaintenanceId++,\n      assetId: insertMaintenance.assetId,\n      maintenanceType: insertMaintenance.maintenanceType || null,\n      description: insertMaintenance.description || null,\n      scheduledDate: insertMaintenance.scheduledDate || null,\n      completedDate: insertMaintenance.completedDate || null,\n      cost: insertMaintenance.cost || null,\n      technicianName: insertMaintenance.technicianName || null,\n      partsReplaced: insertMaintenance.partsReplaced || null,\n      createdAt: new Date(),\n    };\n    this.maintenance.push(maintenance);\n    return maintenance;\n  }\n\n  async updateMaintenanceRecord(id: number, updateData: Partial<InsertAssetMaintenance>): Promise<AssetMaintenance | undefined> {\n    const index = this.maintenance.findIndex(m => m.id === id);\n    if (index === -1) return undefined;\n    \n    const updated: AssetMaintenance = { ...this.maintenance[index], ...updateData };\n    this.maintenance[index] = updated;\n    return updated;\n  }\n\n  async deleteMaintenanceRecord(id: number): Promise<boolean> {\n    const index = this.maintenance.findIndex(m => m.id === id);\n    if (index === -1) return false;\n    this.maintenance.splice(index, 1);\n    return true;\n  }\n\n  // CCTV Systems\n  async getAllCctvSystems(): Promise<CctvSystem[]> {\n    return Array.from(this.cctvSystems.values());\n  }\n\n  async createCctvSystem(insertSystem: InsertCctvSystem): Promise<CctvSystem> {\n    const system: CctvSystem = {\n      id: this.nextCctvId++,\n      deviceName: insertSystem.deviceName,\n      ipAddress: insertSystem.ipAddress,\n      locationDetails: insertSystem.locationDetails || null,\n      username: insertSystem.username || null,\n      passwordHash: insertSystem.passwordHash || null,\n      status: insertSystem.status || \"online\",\n      lastOnline: insertSystem.lastOnline || null,\n      locationId: insertSystem.locationId || null,\n      createdAt: new Date(),\n    };\n    this.cctvSystems.set(system.id, system);\n    return system;\n  }\n\n  async updateCctvSystem(id: number, updateData: Partial<InsertCctvSystem>): Promise<CctvSystem | undefined> {\n    const existing = this.cctvSystems.get(id);\n    if (!existing) return undefined;\n    \n    const updated: CctvSystem = { ...existing, ...updateData };\n    this.cctvSystems.set(id, updated);\n    return updated;\n  }\n\n  async deleteCctvSystem(id: number): Promise<boolean> {\n    return this.cctvSystems.delete(id);\n  }\n\n  // Biometric Systems\n  async getAllBiometricSystems(): Promise<BiometricSystem[]> {\n    return Array.from(this.biometricSystems.values());\n  }\n\n  async createBiometricSystem(insertSystem: InsertBiometricSystem): Promise<BiometricSystem> {\n    const system: BiometricSystem = {\n      id: this.nextBiometricId++,\n      deviceName: insertSystem.deviceName,\n      deviceModel: insertSystem.deviceModel || null,\n      ipAddress: insertSystem.ipAddress || null,\n      locationDetails: insertSystem.locationDetails || null,\n      employeeCount: insertSystem.employeeCount ?? 0,  // Fix: Use nullish coalescing to handle 0 properly\n      lastSyncDate: insertSystem.lastSyncDate || null,\n      status: insertSystem.status || \"online\",\n      locationId: insertSystem.locationId || null,\n      createdAt: new Date(),\n    };\n    this.biometricSystems.set(system.id, system);\n    return system;\n  }\n\n  async updateBiometricSystem(id: number, updateData: Partial<InsertBiometricSystem>): Promise<BiometricSystem | undefined> {\n    const existing = this.biometricSystems.get(id);\n    if (!existing) return undefined;\n    \n    const updated: BiometricSystem = { ...existing, ...updateData };\n    this.biometricSystems.set(id, updated);\n    return updated;\n  }\n\n  async deleteBiometricSystem(id: number): Promise<boolean> {\n    return this.biometricSystems.delete(id);\n  }\n\n  // Backups\n  async getBackups(assetId?: string): Promise<Backup[]> {\n    if (assetId) {\n      return this.backups.filter(b => b.assetId === assetId);\n    }\n    return this.backups;\n  }\n\n  async createBackup(insertBackup: InsertBackup): Promise<Backup> {\n    const backup: Backup = {\n      id: this.nextBackupId++,\n      assetId: insertBackup.assetId,\n      employeeId: insertBackup.employeeId || null,\n      backupDate: insertBackup.backupDate,\n      backupSize: insertBackup.backupSize || null,\n      backupType: insertBackup.backupType || null,\n      backupLocation: insertBackup.backupLocation || null,\n      performedBy: insertBackup.performedBy || null,\n      createdAt: new Date(),\n    };\n    this.backups.push(backup);\n    return backup;\n  }\n\n  async updateBackup(id: number, updateData: Partial<InsertBackup>): Promise<Backup | undefined> {\n    const index = this.backups.findIndex(b => b.id === id);\n    if (index === -1) return undefined;\n    \n    const updated: Backup = { ...this.backups[index], ...updateData };\n    this.backups[index] = updated;\n    return updated;\n  }\n\n  async deleteBackup(id: number): Promise<boolean> {\n    const index = this.backups.findIndex(b => b.id === id);\n    if (index === -1) return false;\n    this.backups.splice(index, 1);\n    return true;\n  }\n\n  private initializeSampleData() {\n    // Sample locations\n    const locations = [\n      { outletName: \"JP Nagar\", city: \"Bangalore\", state: \"Karnataka\", managerName: \"Rajesh Kumar\", contactDetails: \"rajesh@bodycraft.com\" },\n      { outletName: \"Koramangala\", city: \"Bangalore\", state: \"Karnataka\", managerName: \"Priya Sharma\", contactDetails: \"priya@bodycraft.com\" },\n      { outletName: \"Indiranagar\", city: \"Bangalore\", state: \"Karnataka\", managerName: \"Amit Singh\", contactDetails: \"amit@bodycraft.com\" },\n    ];\n\n    locations.forEach(loc => {\n      const location: Location = {\n        ...loc,\n        id: this.nextLocationId++,\n        address: null,\n        createdAt: new Date(),\n      };\n      this.locations.set(location.id, location);\n    });\n\n    // Sample employees\n    const employees = [\n      { employeeCode: \"BFC2024001\", firstName: \"Rajesh\", lastName: \"Kumar\", department: \"IT\", designation: \"Manager\", email: \"rajesh@bodycraft.com\", status: \"active\", locationId: 1 },\n      { employeeCode: \"BFC2024002\", firstName: \"Priya\", lastName: \"Sharma\", department: \"Sales\", designation: \"Executive\", email: \"priya@bodycraft.com\", status: \"active\", locationId: 2 },\n      { employeeCode: \"BFC2024003\", firstName: \"Amit\", lastName: \"Singh\", department: \"Operations\", designation: \"Specialist\", email: \"amit@bodycraft.com\", status: \"active\", locationId: 3 },\n      { employeeCode: \"BFC2024004\", firstName: \"Sunita\", lastName: \"Reddy\", department: \"Marketing\", designation: \"Specialist\", email: \"sunita@bodycraft.com\", status: \"active\", locationId: 1 },\n    ];\n\n    employees.forEach(emp => {\n      const employee: Employee = {\n        ...emp,\n        id: this.nextEmployeeId++,\n        phone: null,\n        createdAt: new Date(),\n      };\n      this.employees.set(employee.id, employee);\n    });\n\n    // Sample assets\n    const assets = [\n      { assetId: \"BFC001\", modelName: \"ThinkPad E15\", brand: \"Lenovo\", serviceTag: \"LEN001\", assetType: \"Laptop\", status: \"assigned\", condition: \"good\", locationId: 1, currentUserId: 1 },\n      { assetId: \"BFC002\", modelName: \"OptiPlex 3080\", brand: \"Dell\", serviceTag: \"DELL002\", assetType: \"Desktop\", status: \"available\", condition: \"excellent\", locationId: 1, currentUserId: null },\n      { assetId: \"BFC003\", modelName: \"Surface Pro 8\", brand: \"Microsoft\", serviceTag: \"MS003\", assetType: \"Laptop\", status: \"assigned\", condition: \"good\", locationId: 2, currentUserId: 2 },\n      { assetId: \"BFC004\", modelName: \"UZ2450\", brand: \"Dell\", serviceTag: \"DELL004\", assetType: \"Monitor\", status: \"available\", condition: \"good\", locationId: 2, currentUserId: null },\n      { assetId: \"BFC005\", modelName: \"iPhone 14\", brand: \"Apple\", serviceTag: \"APL005\", assetType: \"Mobile\", status: \"assigned\", condition: \"excellent\", locationId: 3, currentUserId: 3 },\n      { assetId: \"BFC006\", modelName: \"MacBook Pro 14\", brand: \"Apple\", serviceTag: \"APL006\", assetType: \"Laptop\", status: \"maintenance\", condition: \"fair\", locationId: 3, currentUserId: null },\n      { assetId: \"BFC007\", modelName: \"ThinkPad X1\", brand: \"Lenovo\", serviceTag: \"LEN007\", assetType: \"Laptop\", status: \"assigned\", condition: \"good\", locationId: 1, currentUserId: 4 },\n    ];\n\n    assets.forEach(asset => {\n      const fullAsset: Asset = {\n        ...asset,\n        purchaseDate: null,\n        warrantyExpiry: null,\n        serviceTag: asset.serviceTag,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.assets.set(asset.assetId, fullAsset);\n    });\n\n    // Sample assignment history\n    const assignmentHistory = [\n      { assetId: \"BFC001\", employeeId: 1, assignedDate: \"2024-01-15\", returnedDate: null, assignmentReason: \"New employee setup\", createdBy: 1 },\n      { assetId: \"BFC003\", employeeId: 2, assignedDate: \"2024-02-01\", returnedDate: null, assignmentReason: \"Department transfer\", createdBy: 1 },\n      { assetId: \"BFC005\", employeeId: 3, assignedDate: \"2024-02-15\", returnedDate: null, assignmentReason: \"Business requirement\", createdBy: 1 },\n      { assetId: \"BFC007\", employeeId: 4, assignedDate: \"2024-03-01\", returnedDate: null, assignmentReason: \"New hire equipment\", createdBy: 1 },\n    ];\n\n    assignmentHistory.forEach(hist => {\n      const assignment: AssetAssignmentHistory = {\n        ...hist,\n        id: this.nextAssignmentId++,\n        returnReason: null,\n        conditionOnAssignment: null,\n        conditionOnReturn: null,\n        backupDetails: null,\n        createdAt: new Date(),\n      };\n      this.assignmentHistory.push(assignment);\n    });\n\n    // Sample maintenance records\n    const maintenanceRecords = [\n      { assetId: \"BFC006\", maintenanceType: \"corrective\", description: \"Screen replacement due to crack\", scheduledDate: \"2024-03-01\", completedDate: \"2024-03-02\", cost: \"15000.00\", technicianName: \"Ravi Tech Services\", partsReplaced: \"LCD Screen\" },\n      { assetId: \"BFC001\", maintenanceType: \"preventive\", description: \"Regular cleaning and system check\", scheduledDate: \"2024-03-15\", completedDate: \"2024-03-15\", cost: \"500.00\", technicianName: \"Internal IT\", partsReplaced: null },\n      { assetId: \"BFC002\", maintenanceType: \"upgrade\", description: \"RAM upgrade from 8GB to 16GB\", scheduledDate: \"2024-02-20\", completedDate: \"2024-02-21\", cost: \"3500.00\", technicianName: \"Dell Support\", partsReplaced: \"8GB DDR4 RAM\" },\n    ];\n\n    maintenanceRecords.forEach(record => {\n      const maintenance: AssetMaintenance = {\n        id: this.nextMaintenanceId++,\n        assetId: record.assetId,\n        maintenanceType: record.maintenanceType,\n        description: record.description,\n        scheduledDate: record.scheduledDate,\n        completedDate: record.completedDate,\n        cost: record.cost,\n        technicianName: record.technicianName,\n        partsReplaced: record.partsReplaced,\n        createdAt: new Date(),\n      };\n      this.maintenance.push(maintenance);\n    });\n\n    // Sample CCTV systems\n    const cctvSystems = [\n      { deviceName: \"JP Nagar Entrance Camera\", ipAddress: \"192.168.1.101\", locationDetails: \"Main entrance\", username: \"admin\", passwordHash: \"hashed_password_1\", status: \"online\", lastOnline: new Date(), locationId: 1 },\n      { deviceName: \"JP Nagar DVR System\", ipAddress: \"192.168.1.102\", locationDetails: \"Server room\", username: \"admin\", passwordHash: \"hashed_password_2\", status: \"online\", lastOnline: new Date(), locationId: 1 },\n      { deviceName: \"Koramangala Reception Cam\", ipAddress: \"192.168.2.101\", locationDetails: \"Reception area\", username: \"admin\", passwordHash: \"hashed_password_3\", status: \"online\", lastOnline: new Date(), locationId: 2 },\n      { deviceName: \"Indiranagar Security DVR\", ipAddress: \"192.168.3.101\", locationDetails: \"Security office\", username: \"admin\", passwordHash: \"hashed_password_4\", status: \"offline\", lastOnline: null, locationId: 3 },\n    ];\n\n    cctvSystems.forEach(system => {\n      const cctvSystem: CctvSystem = {\n        id: this.nextCctvId++,\n        deviceName: system.deviceName,\n        ipAddress: system.ipAddress,\n        locationDetails: system.locationDetails,\n        username: system.username,\n        passwordHash: system.passwordHash,\n        status: system.status,\n        lastOnline: system.lastOnline,\n        locationId: system.locationId,\n        createdAt: new Date(),\n      };\n      this.cctvSystems.set(cctvSystem.id, cctvSystem);\n    });\n\n    // Sample biometric systems\n    const biometricSystems = [\n      { deviceName: \"JP Nagar Attendance\", deviceModel: \"eSSL K30 Pro\", ipAddress: \"192.168.1.201\", locationDetails: \"Main entrance\", employeeCount: 15, lastSyncDate: new Date(), status: \"online\", locationId: 1 },\n      { deviceName: \"Koramangala Biometric\", deviceModel: \"ZKTeco F18\", ipAddress: \"192.168.2.201\", locationDetails: \"Employee entrance\", employeeCount: 12, lastSyncDate: new Date(), status: \"online\", locationId: 2 },\n      { deviceName: \"Indiranagar Access Control\", deviceModel: \"Realtime T502\", ipAddress: \"192.168.3.201\", locationDetails: \"Staff entry\", employeeCount: 18, lastSyncDate: new Date(), status: \"error\", locationId: 3 },\n    ];\n\n    biometricSystems.forEach(system => {\n      const biometricSystem: BiometricSystem = {\n        id: this.nextBiometricId++,\n        deviceName: system.deviceName,\n        deviceModel: system.deviceModel,\n        ipAddress: system.ipAddress,\n        locationDetails: system.locationDetails,\n        employeeCount: system.employeeCount,\n        lastSyncDate: system.lastSyncDate,\n        status: system.status,\n        locationId: system.locationId,\n        createdAt: new Date(),\n      };\n      this.biometricSystems.set(biometricSystem.id, biometricSystem);\n    });\n\n    // Sample backup records\n    const backupRecords = [\n      { assetId: \"BFC001\", employeeId: 1, backupDate: new Date(\"2024-01-14\"), backupSize: \"250GB\", backupType: \"full\", backupLocation: \"NAS Server - /backups/users/rajesh\", performedBy: 1 },\n      { assetId: \"BFC003\", employeeId: 2, backupDate: new Date(\"2024-01-31\"), backupSize: \"180GB\", backupType: \"selective\", backupLocation: \"Cloud Storage - AWS S3\", performedBy: 1 },\n      { assetId: \"BFC005\", employeeId: 3, backupDate: new Date(\"2024-02-14\"), backupSize: \"128GB\", backupType: \"full\", backupLocation: \"Local Server - /backups/mobile\", performedBy: 1 },\n    ];\n\n    backupRecords.forEach(record => {\n      const backup: Backup = {\n        id: this.nextBackupId++,\n        assetId: record.assetId,\n        employeeId: record.employeeId,\n        backupDate: record.backupDate,\n        backupSize: record.backupSize,\n        backupType: record.backupType,\n        backupLocation: record.backupLocation,\n        performedBy: record.performedBy,\n        createdAt: new Date(),\n      };\n      this.backups.push(backup);\n    });\n  }\n}\n\nimport { DatabaseStorage } from \"./database-storage\";\n\nexport const storage = new DatabaseStorage();\n","size_bytes":30404},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, decimal, date } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// 0. DEPARTMENTS - Business units including outlets and corporate departments\nexport const departments = pgTable(\"departments\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  name: varchar(\"name\", { length: 100 }).notNull().unique(),\n  type: varchar(\"type\", { length: 50 }).notNull(), // outlet, corporate\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  isCustom: boolean(\"is_custom\").notNull().default(false), // true for super admin created departments\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 1. LOCATIONS - 32 BODYCRAFT outlets across India\nexport const locations = pgTable(\"locations\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  outletName: varchar(\"outlet_name\", { length: 255 }).notNull(),\n  city: varchar(\"city\", { length: 100 }).notNull(),\n  state: varchar(\"state\", { length: 100 }).notNull(),\n  address: text(\"address\"),\n  managerName: varchar(\"manager_name\", { length: 255 }),\n  contactDetails: varchar(\"contact_details\", { length: 255 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 2. EMPLOYEES - Staff members who can be assigned assets\nexport const employees = pgTable(\"employees\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  employeeCode: varchar(\"employee_code\", { length: 50 }).notNull().unique(), // BFC2024001, BFC2024002\n  firstName: varchar(\"first_name\", { length: 100 }).notNull(),\n  lastName: varchar(\"last_name\", { length: 100 }).notNull(),\n  department: varchar(\"department\", { length: 100 }).notNull(), // IT, Sales, Operations, Clinic\n  designation: varchar(\"designation\", { length: 100 }),\n  email: varchar(\"email\", { length: 255 }).unique(),\n  phone: varchar(\"phone\", { length: 20 }),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"active\"), // active, inactive, terminated\n  locationId: integer(\"location_id\").references(() => locations.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 3. ASSETS - Core entity for all IT assets\nexport const assets = pgTable(\"assets\", {\n  assetId: varchar(\"asset_id\", { length: 20 }).primaryKey(), // BFC001, BFC002, etc.\n  modelName: varchar(\"model_name\", { length: 255 }).notNull(),\n  brand: varchar(\"brand\", { length: 100 }).notNull(),\n  serviceTag: varchar(\"service_tag\", { length: 100 }).unique(),\n  assetType: varchar(\"asset_type\", { length: 50 }).notNull(), // Laptop, Desktop, Monitor, Mobile\n  purchaseDate: date(\"purchase_date\"),\n  warrantyExpiry: date(\"warranty_expiry\"),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"available\"), // available, assigned, maintenance, retired\n  condition: varchar(\"condition\", { length: 20 }).notNull().default(\"good\"), // excellent, good, fair, poor\n  \n  // Enhanced asset categorization and location tracking\n  departmentId: integer(\"department_id\").references(() => departments.id), // Salon, Clinic, Skin & Spa, IT, Marketing, etc.\n  physicalLocation: varchar(\"physical_location\", { length: 255 }), // Reception, Front Desk, Room 1, etc.\n  floor: varchar(\"floor\", { length: 50 }), // Ground Floor, 1st Floor, 2nd Floor, etc.\n  \n  // Ownership and assignment type\n  ownershipType: varchar(\"ownership_type\", { length: 20 }).notNull().default(\"company\"), // company, rented, personal\n  assignmentType: varchar(\"assignment_type\", { length: 20 }).notNull().default(\"person\"), // person, outlet\n  \n  locationId: integer(\"location_id\").references(() => locations.id),\n  currentUserId: integer(\"current_user_id\").references(() => employees.id), // NULL if assigned to outlet\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// 4. ASSET ASSIGNMENT HISTORY - Critical for never losing assignment history\nexport const assetAssignmentHistory = pgTable(\"asset_assignment_history\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  assetId: varchar(\"asset_id\", { length: 20 }).notNull().references(() => assets.assetId),\n  employeeId: integer(\"employee_id\").notNull().references(() => employees.id),\n  assignedDate: date(\"assigned_date\").notNull(),\n  returnedDate: date(\"returned_date\"), // NULL for active assignments\n  assignmentReason: text(\"assignment_reason\"),\n  returnReason: text(\"return_reason\"),\n  conditionOnAssignment: varchar(\"condition_on_assignment\", { length: 20 }),\n  conditionOnReturn: varchar(\"condition_on_return\", { length: 20 }),\n  backupDetails: text(\"backup_details\"),\n  createdBy: integer(\"created_by\").references(() => employees.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 5. ASSET MAINTENANCE - Preventive and corrective maintenance\nexport const assetMaintenance = pgTable(\"asset_maintenance\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  assetId: varchar(\"asset_id\", { length: 20 }).notNull().references(() => assets.assetId),\n  maintenanceType: varchar(\"maintenance_type\", { length: 50 }), // preventive, corrective, upgrade\n  description: text(\"description\"),\n  scheduledDate: date(\"scheduled_date\"),\n  completedDate: date(\"completed_date\"),\n  cost: decimal(\"cost\", { precision: 10, scale: 2 }),\n  technicianName: varchar(\"technician_name\", { length: 255 }),\n  partsReplaced: text(\"parts_replaced\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 6. CCTV SYSTEMS - Integration with Hikvision devices\nexport const cctvSystems = pgTable(\"cctv_systems\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  deviceName: varchar(\"device_name\", { length: 255 }).notNull(),\n  ipAddress: varchar(\"ip_address\", { length: 45 }).notNull(), // Support IPv6 addresses\n  locationDetails: text(\"location_details\"),\n  username: varchar(\"username\", { length: 100 }),\n  passwordHash: varchar(\"password_hash\", { length: 255 }),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"online\"), // online, offline, error\n  lastOnline: timestamp(\"last_online\"),\n  locationId: integer(\"location_id\").references(() => locations.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 7. BIOMETRIC SYSTEMS - Employee synchronization and attendance\nexport const biometricSystems = pgTable(\"biometric_systems\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  deviceName: varchar(\"device_name\", { length: 255 }).notNull(),\n  deviceModel: varchar(\"device_model\", { length: 100 }),\n  ipAddress: varchar(\"ip_address\", { length: 45 }),\n  locationDetails: text(\"location_details\"),\n  employeeCount: integer(\"employee_count\").default(0),\n  lastSyncDate: timestamp(\"last_sync_date\"),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"online\"),\n  locationId: integer(\"location_id\").references(() => locations.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 8. BACKUPS - Data security and compliance tracking\nexport const backups = pgTable(\"backups\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  assetId: varchar(\"asset_id\", { length: 20 }).notNull().references(() => assets.assetId),\n  employeeId: integer(\"employee_id\").references(() => employees.id),\n  backupDate: timestamp(\"backup_date\").notNull(),\n  backupSize: varchar(\"backup_size\", { length: 50 }),\n  backupType: varchar(\"backup_type\", { length: 50 }), // full, incremental, selective\n  backupLocation: text(\"backup_location\"),\n  performedBy: integer(\"performed_by\").references(() => employees.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 9. REPORT EXECUTIONS - Track when reports are generated for real statistics\nexport const reportExecutions = pgTable(\"report_executions\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  templateId: varchar(\"template_id\", { length: 100 }).notNull(), // asset-inventory, maintenance-summary, etc.\n  reportName: varchar(\"report_name\", { length: 255 }).notNull(),\n  format: varchar(\"format\", { length: 20 }).notNull(), // excel, csv, pdf\n  filters: text(\"filters\"), // JSON string of applied filters\n  recordCount: integer(\"record_count\"), // Number of records in generated report\n  fileSize: varchar(\"file_size\", { length: 50 }), // Generated file size\n  executionTime: integer(\"execution_time_ms\"), // Time taken to generate in milliseconds\n  executedBy: integer(\"executed_by\").references(() => employees.id), // Who ran the report\n  locationId: integer(\"location_id\").references(() => locations.id), // Location context if applicable\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"completed\"), // completed, failed, cancelled\n  errorMessage: text(\"error_message\"), // If status is failed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert Schemas - Zod schemas for validation (fields excluded via Drizzle, not Zod)\nexport const insertDepartmentSchema = createInsertSchema(departments);\nexport const insertLocationSchema = createInsertSchema(locations);\nexport const insertEmployeeSchema = createInsertSchema(employees);\nexport const insertAssetSchema = createInsertSchema(assets);\nexport const insertAssetAssignmentHistorySchema = createInsertSchema(assetAssignmentHistory);\nexport const insertAssetMaintenanceSchema = createInsertSchema(assetMaintenance);\nexport const insertCctvSystemSchema = createInsertSchema(cctvSystems);\nexport const insertBiometricSystemSchema = createInsertSchema(biometricSystems);\nexport const insertBackupSchema = createInsertSchema(backups);\nexport const insertReportExecutionSchema = createInsertSchema(reportExecutions);\n\n// TypeScript Types\nexport type Department = typeof departments.$inferSelect;\nexport type InsertDepartment = z.infer<typeof insertDepartmentSchema>;\n\nexport type Location = typeof locations.$inferSelect;\nexport type InsertLocation = z.infer<typeof insertLocationSchema>;\n\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\n\nexport type Asset = typeof assets.$inferSelect;\nexport type InsertAsset = z.infer<typeof insertAssetSchema>;\n\nexport type AssetAssignmentHistory = typeof assetAssignmentHistory.$inferSelect;\nexport type InsertAssetAssignmentHistory = z.infer<typeof insertAssetAssignmentHistorySchema>;\n\nexport type AssetMaintenance = typeof assetMaintenance.$inferSelect;\nexport type InsertAssetMaintenance = z.infer<typeof insertAssetMaintenanceSchema>;\n\nexport type CctvSystem = typeof cctvSystems.$inferSelect;\nexport type InsertCctvSystem = z.infer<typeof insertCctvSystemSchema>;\n\nexport type BiometricSystem = typeof biometricSystems.$inferSelect;\nexport type InsertBiometricSystem = z.infer<typeof insertBiometricSystemSchema>;\n\nexport type Backup = typeof backups.$inferSelect;\nexport type InsertBackup = z.infer<typeof insertBackupSchema>;\n\nexport type ReportExecution = typeof reportExecutions.$inferSelect;\nexport type InsertReportExecution = z.infer<typeof insertReportExecutionSchema>;\n\n// USER AUTHENTICATION AND SETTINGS TABLES\n\n// 10. USERS - Authentication and system access (separate from employees)\nexport const users = pgTable(\"users\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  username: varchar(\"username\", { length: 100 }).notNull().unique(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  passwordHash: varchar(\"password_hash\", { length: 255 }).notNull(),\n  firstName: varchar(\"first_name\", { length: 100 }).notNull(),\n  lastName: varchar(\"last_name\", { length: 100 }).notNull(),\n  role: varchar(\"role\", { length: 50 }).notNull().default(\"user\"), // super_admin, admin, location_user, user\n  locationId: integer(\"location_id\").references(() => locations.id), // For location-specific access (location_user role)\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"active\"), // active, inactive, locked\n  lastLogin: timestamp(\"last_login\"),\n  employeeId: integer(\"employee_id\").references(() => employees.id), // Link to employee record if applicable\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// 11. USER SESSIONS - Track active user sessions\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: varchar(\"id\", { length: 255 }).primaryKey(), // Session ID\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 12. COMPANY SETTINGS - System configuration\nexport const companySettings = pgTable(\"company_settings\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  companyName: varchar(\"company_name\", { length: 255 }).notNull().default(\"BODYCRAFT\"),\n  logoUrl: varchar(\"logo_url\", { length: 500 }),\n  timezone: varchar(\"timezone\", { length: 100 }).notNull().default(\"Asia/Kolkata\"),\n  dateFormat: varchar(\"date_format\", { length: 20 }).notNull().default(\"DD/MM/YYYY\"),\n  language: varchar(\"language\", { length: 10 }).notNull().default(\"en\"),\n  sessionTimeout: integer(\"session_timeout\").notNull().default(480), // minutes\n  passwordMinLength: integer(\"password_min_length\").notNull().default(8),\n  emailNotificationsEnabled: boolean(\"email_notifications_enabled\").notNull().default(true),\n  maintenanceMode: boolean(\"maintenance_mode\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// 13. ASSET TYPES - Configurable asset categories\nexport const assetTypes = pgTable(\"asset_types\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  name: varchar(\"name\", { length: 100 }).notNull().unique(), // Laptop, Desktop, Monitor, etc.\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 14. APPROVAL REQUESTS - Multi-level approval system for asset transfers and assignments\nexport const approvalRequests = pgTable(\"approval_requests\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  requestType: varchar(\"request_type\", { length: 50 }).notNull(), // asset_transfer, asset_assignment, employee_transfer\n  entityType: varchar(\"entity_type\", { length: 50 }).notNull(), // asset, employee\n  entityId: varchar(\"entity_id\", { length: 50 }).notNull(), // assetId or employeeId\n  \n  // Current and new values (JSON for flexibility)\n  currentValue: text(\"current_value\"), // JSON: { locationId: 1, employeeId: null }\n  newValue: text(\"new_value\").notNull(), // JSON: { locationId: 2, employeeId: 5 }\n  \n  reason: text(\"reason\"), // Why this change is needed\n  requestedBy: integer(\"requested_by\").notNull().references(() => users.id),\n  requestedAt: timestamp(\"requested_at\").notNull().defaultNow(),\n  \n  status: varchar(\"status\", { length: 20 }).notNull().default(\"pending\"), // pending, approved, rejected, cancelled\n  currentApprovalLevel: integer(\"current_approval_level\").notNull().default(1), // Track multi-level progress\n  requiredApprovalLevels: integer(\"required_approval_levels\").notNull().default(1), // How many levels needed\n  \n  completedAt: timestamp(\"completed_at\"),\n  completedBy: integer(\"completed_by\").references(() => users.id),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// 15. APPROVAL ACTIONS - Track each approval/rejection action\nexport const approvalActions = pgTable(\"approval_actions\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  requestId: integer(\"request_id\").notNull().references(() => approvalRequests.id),\n  approvalLevel: integer(\"approval_level\").notNull(), // 1, 2, 3 for multi-level approvals\n  \n  actionBy: integer(\"action_by\").notNull().references(() => users.id),\n  action: varchar(\"action\", { length: 20 }).notNull(), // approved, rejected\n  comments: text(\"comments\"),\n  \n  actionAt: timestamp(\"action_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert Schemas for new tables\nexport const insertUserSchema = createInsertSchema(users);\nexport const insertUserSessionSchema = createInsertSchema(userSessions);\nexport const insertCompanySettingsSchema = createInsertSchema(companySettings);\nexport const insertAssetTypeSchema = createInsertSchema(assetTypes);\nexport const insertApprovalRequestSchema = createInsertSchema(approvalRequests);\nexport const insertApprovalActionSchema = createInsertSchema(approvalActions);\n\n// TypeScript Types for new tables\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type UserSession = typeof userSessions.$inferSelect;\nexport type InsertUserSession = z.infer<typeof insertUserSessionSchema>;\n\nexport type CompanySettings = typeof companySettings.$inferSelect;\nexport type InsertCompanySettings = z.infer<typeof insertCompanySettingsSchema>;\n\nexport type AssetType = typeof assetTypes.$inferSelect;\nexport type InsertAssetType = z.infer<typeof insertAssetTypeSchema>;\n\nexport type ApprovalRequest = typeof approvalRequests.$inferSelect;\nexport type InsertApprovalRequest = z.infer<typeof insertApprovalRequestSchema>;\n\nexport type ApprovalAction = typeof approvalActions.$inferSelect;\nexport type InsertApprovalAction = z.infer<typeof insertApprovalActionSchema>;\n\n// 16. INVOICES - Financial tracking for all expenses and purchases\nexport const invoices = pgTable(\"invoices\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  invoiceNumber: varchar(\"invoice_number\", { length: 100 }).notNull().unique(),\n  invoiceDate: date(\"invoice_date\").notNull(),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  \n  category: varchar(\"category\", { length: 50 }).notNull(), // repair, asset_purchase, maintenance, expense, other\n  description: text(\"description\").notNull(),\n  vendorName: varchar(\"vendor_name\", { length: 255 }),\n  \n  // Optional relationships\n  relatedAssetId: varchar(\"related_asset_id\", { length: 20 }).references(() => assets.assetId),\n  relatedMaintenanceId: integer(\"related_maintenance_id\").references(() => assetMaintenance.id),\n  \n  // File upload\n  fileUrl: text(\"file_url\"), // Path to uploaded invoice document\n  fileName: varchar(\"file_name\", { length: 255 }), // Original file name\n  fileSize: varchar(\"file_size\", { length: 50 }), // File size for display\n  \n  // Payment tracking\n  paymentStatus: varchar(\"payment_status\", { length: 20 }).notNull().default(\"unpaid\"), // paid, unpaid, partial, overdue\n  paymentDate: date(\"payment_date\"),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }), // bank_transfer, cash, card, cheque\n  \n  locationId: integer(\"location_id\").references(() => locations.id),\n  uploadedBy: integer(\"uploaded_by\").references(() => users.id),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert Schema\nexport const insertInvoiceSchema = createInsertSchema(invoices);\n\n// TypeScript Types\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\n\n// 17. COMPLIANCE TASKS - Compliance and regulatory tracking\nexport const complianceTasks = pgTable(\"compliance_tasks\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  taskName: varchar(\"task_name\", { length: 255 }).notNull(),\n  taskType: varchar(\"task_type\", { length: 50 }).notNull(), // backup, security_audit, policy_review, system_update, data_retention, access_review\n  description: text(\"description\"),\n  category: varchar(\"category\", { length: 50 }).notNull(), // data_backup, security, compliance, maintenance, governance\n  priority: varchar(\"priority\", { length: 20 }).notNull().default(\"medium\"), // low, medium, high, critical\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"pending\"), // pending, in_progress, completed, overdue, exempted\n  \n  assignedTo: integer(\"assigned_to\").references(() => users.id),\n  locationId: integer(\"location_id\").references(() => locations.id),\n  \n  dueDate: date(\"due_date\").notNull(),\n  completionDate: date(\"completion_date\"),\n  \n  evidenceFiles: text(\"evidence_files\").array(), // Array of file URLs\n  complianceScore: integer(\"compliance_score\"), // 0-100\n  riskLevel: varchar(\"risk_level\", { length: 20 }), // low, medium, high, critical\n  regulatoryFramework: varchar(\"regulatory_framework\", { length: 100 }), // GDPR, ISO27001, etc.\n  notes: text(\"notes\"),\n  \n  createdBy: integer(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// 18. COMPLIANCE EVIDENCE - File evidence for compliance tasks\nexport const complianceEvidence = pgTable(\"compliance_evidence\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  taskId: integer(\"task_id\").notNull().references(() => complianceTasks.id, { onDelete: \"cascade\" }),\n  \n  fileName: varchar(\"file_name\", { length: 255 }).notNull(),\n  fileUrl: text(\"file_url\").notNull(),\n  fileType: varchar(\"file_type\", { length: 50 }), // pdf, xlsx, jpg, png, etc.\n  fileSize: varchar(\"file_size\", { length: 50 }), // \"2.5 MB\"\n  \n  uploadedBy: integer(\"uploaded_by\").notNull().references(() => users.id),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n  verificationStatus: varchar(\"verification_status\", { length: 20 }).default(\"pending\"), // pending, verified, rejected\n});\n\n// 19. COMPLIANCE AUDIT TRAIL - Complete audit log for compliance actions\nexport const complianceAuditTrail = pgTable(\"compliance_audit_trail\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  taskId: integer(\"task_id\").references(() => complianceTasks.id, { onDelete: \"cascade\" }),\n  \n  action: text(\"action\").notNull(), // created, updated, deleted, evidence_uploaded, status_changed, etc.\n  performedBy: integer(\"performed_by\").notNull().references(() => users.id),\n  \n  oldValues: text(\"old_values\"), // JSONB stored as text\n  newValues: text(\"new_values\"), // JSONB stored as text\n  \n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  ipAddress: varchar(\"ip_address\", { length: 45 }), // Support IPv6\n  userAgent: text(\"user_agent\"),\n});\n\n// Insert Schemas for compliance tables\nexport const insertComplianceTaskSchema = createInsertSchema(complianceTasks);\nexport const insertComplianceEvidenceSchema = createInsertSchema(complianceEvidence);\nexport const insertComplianceAuditTrailSchema = createInsertSchema(complianceAuditTrail);\n\n// TypeScript Types for compliance tables\nexport type ComplianceTask = typeof complianceTasks.$inferSelect;\nexport type InsertComplianceTask = z.infer<typeof insertComplianceTaskSchema>;\n\nexport type ComplianceEvidence = typeof complianceEvidence.$inferSelect;\nexport type InsertComplianceEvidence = z.infer<typeof insertComplianceEvidenceSchema>;\n\nexport type ComplianceAuditTrail = typeof complianceAuditTrail.$inferSelect;\nexport type InsertComplianceAuditTrail = z.infer<typeof insertComplianceAuditTrailSchema>;\n\n// 20. ASSET TRANSFERS - Track asset transfers between locations\nexport const assetTransfers = pgTable(\"asset_transfers\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  assetId: varchar(\"asset_id\", { length: 20 }).notNull().references(() => assets.assetId),\n  \n  fromLocationId: integer(\"from_location_id\").notNull().references(() => locations.id),\n  toLocationId: integer(\"to_location_id\").notNull().references(() => locations.id),\n  \n  transferReason: text(\"transfer_reason\"),\n  transferDate: date(\"transfer_date\").notNull(),\n  \n  requestedBy: integer(\"requested_by\").notNull().references(() => users.id),\n  approvedBy: integer(\"approved_by\").references(() => users.id),\n  \n  status: varchar(\"status\", { length: 20 }).notNull().default(\"completed\"), // completed, pending, cancelled\n  approvalRequestId: integer(\"approval_request_id\").references(() => approvalRequests.id),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert Schema\nexport const insertAssetTransferSchema = createInsertSchema(assetTransfers);\n\n// TypeScript Types\nexport type AssetTransfer = typeof assetTransfers.$inferSelect;\nexport type InsertAssetTransfer = z.infer<typeof insertAssetTransferSchema>;\n\n// Password Reset Schema (Self-service)\nexport const passwordResetSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(8, \"Password must be at least 8 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"],\n});\n\n// Admin Password Reset Schema (For admins resetting other users' passwords)\nexport const adminPasswordResetSchema = z.object({\n  newPassword: z.string().min(8, \"Password must be at least 8 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm the password\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"],\n});\n\n// ==================== AI COMPLIANCE AUTOMATION TABLES ====================\n\n// 21. COMPLIANCE SIGNALS - Asset telemetry snapshots for AI analysis\nexport const complianceSignals = pgTable(\"compliance_signals\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  assetId: varchar(\"asset_id\", { length: 20 }).references(() => assets.assetId),\n  locationId: integer(\"location_id\").references(() => locations.id),\n  \n  signalType: varchar(\"signal_type\", { length: 50 }).notNull(), // backup_missing, maintenance_overdue, license_expiring, etc.\n  signalData: text(\"signal_data\"), // JSON string with signal details\n  severity: varchar(\"severity\", { length: 20 }).notNull(), // low, medium, high, critical\n  \n  detectedAt: timestamp(\"detected_at\").defaultNow(),\n  resolvedAt: timestamp(\"resolved_at\"),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"active\"), // active, resolved, ignored\n});\n\n// 22. COMPLIANCE RISK SCORES - AI-calculated risk scores per asset/location\nexport const complianceRiskScores = pgTable(\"compliance_risk_scores\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  assetId: varchar(\"asset_id\", { length: 20 }).references(() => assets.assetId),\n  locationId: integer(\"location_id\").references(() => locations.id),\n  \n  riskScore: integer(\"risk_score\").notNull(), // 0-100\n  riskLevel: varchar(\"risk_level\", { length: 20 }).notNull(), // low, medium, high, critical\n  riskFactors: text(\"risk_factors\"), // JSON array of contributing factors\n  \n  aiModel: varchar(\"ai_model\", { length: 100 }), // Model used for scoring\n  confidence: integer(\"confidence\"), // 0-100 confidence level\n  \n  calculatedAt: timestamp(\"calculated_at\").defaultNow(),\n  validUntil: timestamp(\"valid_until\"),\n});\n\n// 23. AUTOMATION RUNS - Tracks AI orchestrator executions\nexport const automationRuns = pgTable(\"automation_runs\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  runType: varchar(\"run_type\", { length: 50 }).notNull(), // nightly_batch, real_time_trigger, manual\n  \n  tasksGenerated: integer(\"tasks_generated\").default(0),\n  risksDetected: integer(\"risks_detected\").default(0),\n  backupsVerified: integer(\"backups_verified\").default(0),\n  assignmentsCreated: integer(\"assignments_created\").default(0),\n  \n  status: varchar(\"status\", { length: 20 }).notNull().default(\"running\"), // running, completed, failed, partial\n  errorMessage: text(\"error_message\"),\n  executionTimeMs: integer(\"execution_time_ms\"),\n  \n  triggeredBy: integer(\"triggered_by\").references(() => users.id),\n  startedAt: timestamp(\"started_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// 24. AI RECOMMENDATIONS - Intelligent remediation suggestions\nexport const aiRecommendations = pgTable(\"ai_recommendations\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  \n  targetType: varchar(\"target_type\", { length: 50 }).notNull(), // asset, location, compliance_task\n  targetId: varchar(\"target_id\", { length: 50 }).notNull(),\n  \n  recommendationType: varchar(\"recommendation_type\", { length: 50 }).notNull(), // maintenance, backup, security, upgrade\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\").notNull(),\n  actionItems: text(\"action_items\"), // JSON array of specific actions\n  \n  priority: varchar(\"priority\", { length: 20 }).notNull().default(\"medium\"),\n  estimatedCost: integer(\"estimated_cost\"),\n  estimatedImpact: varchar(\"estimated_impact\", { length: 50 }), // high, medium, low\n  \n  aiModel: varchar(\"ai_model\", { length: 100 }),\n  confidence: integer(\"confidence\"), // 0-100\n  \n  status: varchar(\"status\", { length: 20 }).notNull().default(\"pending\"), // pending, accepted, rejected, implemented\n  implementedBy: integer(\"implemented_by\").references(() => users.id),\n  implementedAt: timestamp(\"implemented_at\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 25. BACKUP VERIFICATION - Automated backup health checks\nexport const backupVerification = pgTable(\"backup_verification\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  backupId: integer(\"backup_id\").references(() => backups.id),\n  assetId: varchar(\"asset_id\", { length: 20 }).references(() => assets.assetId),\n  \n  verificationMethod: varchar(\"verification_method\", { length: 50 }).notNull(), // automated, manual\n  verificationStatus: varchar(\"verification_status\", { length: 20 }).notNull(), // passed, failed, warning\n  \n  checksPerformed: text(\"checks_performed\"), // JSON array of checks\n  issuesFound: text(\"issues_found\"), // JSON array of issues\n  healthScore: integer(\"health_score\"), // 0-100\n  \n  complianceTaskId: integer(\"compliance_task_id\").references(() => complianceTasks.id), // Auto-generated task if failed\n  \n  verifiedBy: integer(\"verified_by\").references(() => users.id),\n  verifiedAt: timestamp(\"verified_at\").defaultNow(),\n  nextVerificationDue: timestamp(\"next_verification_due\"),\n});\n\n// 26. COMPLIANCE ASSIGNMENT QUEUE - History of automated assignments\nexport const complianceAssignmentQueue = pgTable(\"compliance_assignment_queue\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  taskId: integer(\"task_id\").notNull().references(() => complianceTasks.id, { onDelete: \"cascade\" }),\n  \n  assignmentReason: text(\"assignment_reason\"), // AI reasoning for assignment\n  assignedTo: integer(\"assigned_to\").notNull().references(() => users.id),\n  locationId: integer(\"location_id\").references(() => locations.id),\n  \n  workloadScore: integer(\"workload_score\"), // User's current workload\n  skillMatch: integer(\"skill_match\"), // 0-100 match to task requirements\n  priorityScore: integer(\"priority_score\"),\n  \n  automationRunId: integer(\"automation_run_id\").references(() => automationRuns.id),\n  \n  assignedAt: timestamp(\"assigned_at\").defaultNow(),\n  acceptedAt: timestamp(\"accepted_at\"),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"assigned\"), // assigned, accepted, rejected, reassigned\n});\n\n// Insert Schemas for automation tables\nexport const insertComplianceSignalSchema = createInsertSchema(complianceSignals);\nexport const insertComplianceRiskScoreSchema = createInsertSchema(complianceRiskScores);\nexport const insertAutomationRunSchema = createInsertSchema(automationRuns);\nexport const insertAiRecommendationSchema = createInsertSchema(aiRecommendations);\nexport const insertBackupVerificationSchema = createInsertSchema(backupVerification);\nexport const insertComplianceAssignmentQueueSchema = createInsertSchema(complianceAssignmentQueue);\n\n// TypeScript Types for automation tables\nexport type ComplianceSignal = typeof complianceSignals.$inferSelect;\nexport type InsertComplianceSignal = z.infer<typeof insertComplianceSignalSchema>;\n\nexport type ComplianceRiskScore = typeof complianceRiskScores.$inferSelect;\nexport type InsertComplianceRiskScore = z.infer<typeof insertComplianceRiskScoreSchema>;\n\nexport type AutomationRun = typeof automationRuns.$inferSelect;\nexport type InsertAutomationRun = z.infer<typeof insertAutomationRunSchema>;\n\nexport type AiRecommendation = typeof aiRecommendations.$inferSelect;\nexport type InsertAiRecommendation = z.infer<typeof insertAiRecommendationSchema>;\n\nexport type BackupVerification = typeof backupVerification.$inferSelect;\nexport type InsertBackupVerification = z.infer<typeof insertBackupVerificationSchema>;\n\nexport type ComplianceAssignmentQueue = typeof complianceAssignmentQueue.$inferSelect;\nexport type InsertComplianceAssignmentQueue = z.infer<typeof insertComplianceAssignmentQueueSchema>;\n","size_bytes":32639},"AutoDesignPro/server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"AutoDesignPro/server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport { storage } from \"./storage\";\nimport { \n  insertAssetSchema, \n  insertEmployeeSchema, \n  insertLocationSchema,\n  insertAssetAssignmentHistorySchema,\n  insertAssetMaintenanceSchema,\n  insertCctvSystemSchema,\n  insertBiometricSystemSchema,\n  insertBackupSchema \n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Assets routes\n  app.get(\"/api/assets\", async (req, res) => {\n    try {\n      const assets = await storage.getAllAssets();\n      res.json(assets);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch assets\" });\n    }\n  });\n\n  app.get(\"/api/assets/:id\", async (req, res) => {\n    try {\n      const asset = await storage.getAssetById(req.params.id);\n      if (!asset) {\n        return res.status(404).json({ error: \"Asset not found\" });\n      }\n      res.json(asset);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch asset\" });\n    }\n  });\n\n  app.post(\"/api/assets\", async (req, res) => {\n    try {\n      const validatedAsset = insertAssetSchema.parse(req.body);\n      const asset = await storage.createAsset(validatedAsset);\n      res.status(201).json(asset);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid asset data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create asset\" });\n    }\n  });\n\n  app.patch(\"/api/assets/:id\", async (req, res) => {\n    try {\n      const validatedAsset = insertAssetSchema.partial().parse(req.body);\n      const asset = await storage.updateAsset(req.params.id, validatedAsset);\n      if (!asset) {\n        return res.status(404).json({ error: \"Asset not found\" });\n      }\n      res.json(asset);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid asset data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update asset\" });\n    }\n  });\n\n  app.delete(\"/api/assets/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteAsset(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Asset not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete asset\" });\n    }\n  });\n\n  // Employees routes\n  app.get(\"/api/employees\", async (req, res) => {\n    try {\n      const employees = await storage.getAllEmployees();\n      res.json(employees);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch employees\" });\n    }\n  });\n\n  app.get(\"/api/employees/:id\", async (req, res) => {\n    try {\n      const employee = await storage.getEmployeeById(parseInt(req.params.id));\n      if (!employee) {\n        return res.status(404).json({ error: \"Employee not found\" });\n      }\n      res.json(employee);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch employee\" });\n    }\n  });\n\n  app.post(\"/api/employees\", async (req, res) => {\n    try {\n      const validatedEmployee = insertEmployeeSchema.parse(req.body);\n      const employee = await storage.createEmployee(validatedEmployee);\n      res.status(201).json(employee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid employee data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create employee\" });\n    }\n  });\n\n  app.patch(\"/api/employees/:id\", async (req, res) => {\n    try {\n      const validatedEmployee = insertEmployeeSchema.partial().parse(req.body);\n      const employee = await storage.updateEmployee(parseInt(req.params.id), validatedEmployee);\n      if (!employee) {\n        return res.status(404).json({ error: \"Employee not found\" });\n      }\n      res.json(employee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid employee data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update employee\" });\n    }\n  });\n\n  app.delete(\"/api/employees/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteEmployee(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"Employee not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete employee\" });\n    }\n  });\n\n  // Locations routes\n  app.get(\"/api/locations\", async (req, res) => {\n    try {\n      const locations = await storage.getAllLocations();\n      res.json(locations);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch locations\" });\n    }\n  });\n\n  app.post(\"/api/locations\", async (req, res) => {\n    try {\n      const validatedLocation = insertLocationSchema.parse(req.body);\n      const location = await storage.createLocation(validatedLocation);\n      res.status(201).json(location);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid location data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create location\" });\n    }\n  });\n\n  app.patch(\"/api/locations/:id\", async (req, res) => {\n    try {\n      const validatedLocation = insertLocationSchema.partial().parse(req.body);\n      const location = await storage.updateLocation(parseInt(req.params.id), validatedLocation);\n      if (!location) {\n        return res.status(404).json({ error: \"Location not found\" });\n      }\n      res.json(location);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid location data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update location\" });\n    }\n  });\n\n  app.delete(\"/api/locations/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteLocation(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"Location not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete location\" });\n    }\n  });\n\n  // Assignment History routes\n  app.get(\"/api/assignments\", async (req, res) => {\n    try {\n      const assetId = req.query.assetId as string;\n      const employeeId = req.query.employeeId ? parseInt(req.query.employeeId as string) : undefined;\n      const assignments = await storage.getAssignmentHistory(assetId, employeeId);\n      res.json(assignments);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch assignments\" });\n    }\n  });\n\n  app.post(\"/api/assignments\", async (req, res) => {\n    try {\n      const validatedAssignment = insertAssetAssignmentHistorySchema.parse(req.body);\n      const assignment = await storage.createAssignment(validatedAssignment);\n      res.status(201).json(assignment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid assignment data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create assignment\" });\n    }\n  });\n\n  // Maintenance routes\n  app.get(\"/api/maintenance\", async (req, res) => {\n    try {\n      const assetId = req.query.assetId as string;\n      const maintenance = await storage.getMaintenanceRecords(assetId);\n      res.json(maintenance);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch maintenance records\" });\n    }\n  });\n\n  app.post(\"/api/maintenance\", async (req, res) => {\n    try {\n      const validatedMaintenance = insertAssetMaintenanceSchema.parse(req.body);\n      const maintenance = await storage.createMaintenanceRecord(validatedMaintenance);\n      res.status(201).json(maintenance);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid maintenance data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create maintenance record\" });\n    }\n  });\n\n  app.patch(\"/api/maintenance/:id\", async (req, res) => {\n    try {\n      const validatedMaintenance = insertAssetMaintenanceSchema.partial().parse(req.body);\n      const maintenance = await storage.updateMaintenanceRecord(parseInt(req.params.id), validatedMaintenance);\n      if (!maintenance) {\n        return res.status(404).json({ error: \"Maintenance record not found\" });\n      }\n      res.json(maintenance);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid maintenance data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update maintenance record\" });\n    }\n  });\n\n  app.delete(\"/api/maintenance/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteMaintenanceRecord(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"Maintenance record not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete maintenance record\" });\n    }\n  });\n\n  // CCTV Systems routes\n  app.get(\"/api/cctv\", async (req, res) => {\n    try {\n      const systems = await storage.getAllCctvSystems();\n      // Mask sensitive data\n      const maskedSystems = systems.map(system => ({\n        ...system,\n        passwordHash: system.passwordHash ? \"********\" : null\n      }));\n      res.json(maskedSystems);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch CCTV systems\" });\n    }\n  });\n\n  app.post(\"/api/cctv\", async (req, res) => {\n    try {\n      const validatedSystem = insertCctvSystemSchema.parse(req.body);\n      const system = await storage.createCctvSystem(validatedSystem);\n      // Mask sensitive data in response\n      const maskedSystem = {\n        ...system,\n        passwordHash: system.passwordHash ? \"********\" : null\n      };\n      res.status(201).json(maskedSystem);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid CCTV system data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create CCTV system\" });\n    }\n  });\n\n  app.patch(\"/api/cctv/:id\", async (req, res) => {\n    try {\n      const validatedSystem = insertCctvSystemSchema.partial().parse(req.body);\n      const system = await storage.updateCctvSystem(parseInt(req.params.id), validatedSystem);\n      if (!system) {\n        return res.status(404).json({ error: \"CCTV system not found\" });\n      }\n      // Mask sensitive data in response\n      const maskedSystem = {\n        ...system,\n        passwordHash: system.passwordHash ? \"********\" : null\n      };\n      res.json(maskedSystem);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid CCTV system data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update CCTV system\" });\n    }\n  });\n\n  app.delete(\"/api/cctv/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteCctvSystem(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"CCTV system not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete CCTV system\" });\n    }\n  });\n\n  // Biometric Systems routes\n  app.get(\"/api/biometric\", async (req, res) => {\n    try {\n      const systems = await storage.getAllBiometricSystems();\n      res.json(systems);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch biometric systems\" });\n    }\n  });\n\n  app.post(\"/api/biometric\", async (req, res) => {\n    try {\n      const validatedSystem = insertBiometricSystemSchema.parse(req.body);\n      const system = await storage.createBiometricSystem(validatedSystem);\n      res.status(201).json(system);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid biometric system data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create biometric system\" });\n    }\n  });\n\n  app.patch(\"/api/biometric/:id\", async (req, res) => {\n    try {\n      const validatedSystem = insertBiometricSystemSchema.partial().parse(req.body);\n      const system = await storage.updateBiometricSystem(parseInt(req.params.id), validatedSystem);\n      if (!system) {\n        return res.status(404).json({ error: \"Biometric system not found\" });\n      }\n      res.json(system);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid biometric system data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update biometric system\" });\n    }\n  });\n\n  app.delete(\"/api/biometric/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteBiometricSystem(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"Biometric system not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete biometric system\" });\n    }\n  });\n\n  // Backup routes\n  app.get(\"/api/backups\", async (req, res) => {\n    try {\n      const assetId = req.query.assetId as string;\n      const backups = await storage.getBackups(assetId);\n      res.json(backups);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch backups\" });\n    }\n  });\n\n  app.post(\"/api/backups\", async (req, res) => {\n    try {\n      const validatedBackup = insertBackupSchema.parse(req.body);\n      const backup = await storage.createBackup(validatedBackup);\n      res.status(201).json(backup);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid backup data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create backup\" });\n    }\n  });\n\n  app.patch(\"/api/backups/:id\", async (req, res) => {\n    try {\n      const validatedBackup = insertBackupSchema.partial().parse(req.body);\n      const backup = await storage.updateBackup(parseInt(req.params.id), validatedBackup);\n      if (!backup) {\n        return res.status(404).json({ error: \"Backup not found\" });\n      }\n      res.json(backup);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid backup data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update backup\" });\n    }\n  });\n\n  app.delete(\"/api/backups/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteBackup(parseInt(req.params.id));\n      if (!success) {\n        return res.status(404).json({ error: \"Backup not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete backup\" });\n    }\n  });\n\n  // Reports API endpoints\n  \n  // Get available report templates\n  app.get(\"/api/reports/templates\", async (req, res) => {\n    try {\n      const templates = [\n        {\n          id: \"asset-inventory\",\n          name: \"Asset Inventory Report\", \n          description: \"Complete inventory of all assets across locations with current status, condition, and assignment details\",\n          category: \"assets\",\n          fields: [\"assetId\", \"assetType\", \"brand\", \"modelName\", \"serialNumber\", \"purchaseDate\", \"purchaseCost\", \"status\", \"condition\", \"locationId\"],\n          filters: [\"location\", \"assetType\", \"status\", \"condition\", \"purchaseDate\"],\n          totalRuns: 15,\n          lastRun: \"2024-01-18\"\n        },\n        {\n          id: \"maintenance-summary\",\n          name: \"Maintenance Summary Report\",\n          description: \"Comprehensive maintenance activities, costs, and schedules with vendor performance analysis\",\n          category: \"maintenance\", \n          fields: [\"assetId\", \"maintenanceType\", \"description\", \"scheduledDate\", \"completedDate\", \"cost\", \"vendor\", \"status\"],\n          filters: [\"maintenanceType\", \"status\", \"vendor\", \"dateRange\", \"location\"],\n          totalRuns: 23,\n          lastRun: \"2024-01-19\"\n        },\n        {\n          id: \"assignment-history\",\n          name: \"Assignment History Report\",\n          description: \"Historical tracking of asset assignments with employee details and assignment duration analysis\",\n          category: \"assignments\",\n          fields: [\"assetId\", \"employeeId\", \"assignedDate\", \"returnedDate\", \"notes\"],\n          filters: [\"employee\", \"department\", \"location\", \"dateRange\", \"assetType\"],\n          totalRuns: 18,\n          lastRun: \"2024-01-20\"\n        },\n        {\n          id: \"location-analytics\", \n          name: \"Location Analytics Report\",\n          description: \"Multi-location performance analytics with asset distribution, utilization rates, and cost analysis\",\n          category: \"locations\",\n          fields: [\"outletName\", \"city\", \"state\", \"manager\", \"contactEmail\", \"contactPhone\"],\n          filters: [\"location\", \"assetType\", \"dateRange\"],\n          totalRuns: 8,\n          lastRun: \"2024-01-17\"\n        },\n        {\n          id: \"compliance-audit\",\n          name: \"Compliance Audit Report\", \n          description: \"Comprehensive compliance status across backup verification, security audits, and policy adherence\",\n          category: \"compliance\",\n          fields: [\"locationId\", \"backupType\", \"backupDate\", \"verificationStatus\", \"evidenceProvided\", \"auditResult\"],\n          filters: [\"complianceType\", \"status\", \"location\", \"dateRange\"],\n          totalRuns: 12,\n          lastRun: \"2024-01-16\"\n        }\n      ];\n      res.json(templates);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch report templates\" });\n    }\n  });\n\n  // Generate and export report\n  app.post(\"/api/reports/generate\", async (req, res) => {\n    try {\n      const { templateId, filters, format = 'excel' } = req.body;\n      \n      let data: any[] = [];\n      let filename = \"\";\n      let headers: string[] = [];\n      \n      // Generate report data based on template\n      switch (templateId) {\n        case \"asset-inventory\":\n          data = await storage.getAllAssets();\n          filename = \"Asset_Inventory_Report\";\n          headers = [\"Asset ID\", \"Type\", \"Brand\", \"Model\", \"Serial Number\", \"Purchase Date\", \"Cost\", \"Status\", \"Condition\", \"Location\"];\n          \n          // Apply location filter if provided\n          if (filters?.location && filters.location !== \"all\") {\n            const locationId = parseInt(filters.location);\n            data = data.filter((asset: any) => asset.locationId === locationId);\n          }\n          \n          // Apply asset type filter\n          if (filters?.assetType && filters.assetType !== \"all\") {\n            data = data.filter((asset: any) => asset.assetType === filters.assetType);\n          }\n          \n          // Apply status filter\n          if (filters?.status && filters.status !== \"all\") {\n            data = data.filter((asset: any) => asset.status === filters.status);\n          }\n          \n          // Transform data for export\n          data = data.map((asset: any) => [\n            asset.assetId,\n            asset.assetType,\n            asset.brand,\n            asset.modelName,\n            asset.serialNumber || \"\",\n            asset.purchaseDate,\n            asset.purchaseCost || 0,\n            asset.status,\n            asset.condition,\n            asset.locationId || \"\"\n          ]);\n          break;\n          \n        case \"maintenance-summary\":\n          data = await storage.getAllMaintenance();\n          filename = \"Maintenance_Summary_Report\";\n          headers = [\"Asset ID\", \"Type\", \"Description\", \"Scheduled Date\", \"Completed Date\", \"Cost\", \"Vendor\", \"Status\"];\n          \n          // Apply status filter\n          if (filters?.status && filters.status !== \"all\") {\n            data = data.filter((maintenance: any) => maintenance.status === filters.status);\n          }\n          \n          // Apply maintenance type filter\n          if (filters?.maintenanceType && filters.maintenanceType !== \"all\") {\n            data = data.filter((maintenance: any) => maintenance.maintenanceType === filters.maintenanceType);\n          }\n          \n          // Transform data for export\n          data = data.map((maintenance: any) => [\n            maintenance.assetId,\n            maintenance.maintenanceType,\n            maintenance.description,\n            maintenance.scheduledDate,\n            maintenance.completedDate || \"\",\n            maintenance.cost || 0,\n            maintenance.vendor || \"\",\n            maintenance.status\n          ]);\n          break;\n          \n        case \"assignment-history\":\n          data = await storage.getAllAssignments();\n          filename = \"Assignment_History_Report\";\n          headers = [\"Asset ID\", \"Employee ID\", \"Assigned Date\", \"Returned Date\", \"Notes\"];\n          \n          // Transform data for export\n          data = data.map((assignment: any) => [\n            assignment.assetId,\n            assignment.employeeId,\n            assignment.assignedDate,\n            assignment.returnedDate || \"\",\n            assignment.notes || \"\"\n          ]);\n          break;\n          \n        case \"location-analytics\":\n          data = await storage.getAllLocations();\n          filename = \"Location_Analytics_Report\";\n          headers = [\"Outlet Name\", \"City\", \"State\", \"Manager\", \"Contact Email\", \"Contact Phone\"];\n          \n          // Transform data for export\n          data = data.map((location: any) => [\n            location.outletName,\n            location.city,\n            location.state,\n            location.manager || \"\",\n            location.contactEmail || \"\",\n            location.contactPhone || \"\"\n          ]);\n          break;\n          \n        case \"compliance-audit\":\n          data = await storage.getAllBackups();\n          filename = \"Compliance_Audit_Report\";\n          headers = [\"Location ID\", \"Backup Type\", \"Backup Date\", \"Verification Status\", \"Evidence\", \"Audit Result\"];\n          \n          // Transform data for export\n          data = data.map((backup: any) => [\n            backup.locationId,\n            backup.backupType,\n            backup.backupDate,\n            backup.verificationStatus,\n            backup.evidenceProvided ? \"Yes\" : \"No\",\n            backup.auditResult || \"\"\n          ]);\n          break;\n          \n        default:\n          return res.status(400).json({ error: \"Invalid template ID\" });\n      }\n      \n      // Generate Excel file\n      if (format === 'excel') {\n        const XLSX = require('xlsx');\n        \n        // Create workbook and worksheet\n        const wb = XLSX.utils.book_new();\n        const ws = XLSX.utils.aoa_to_sheet([headers, ...data]);\n        \n        // Add worksheet to workbook\n        XLSX.utils.book_append_sheet(wb, ws, 'Report');\n        \n        // Generate Excel buffer\n        const excelBuffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });\n        \n        // Set response headers for file download\n        res.set({\n          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n          'Content-Disposition': `attachment; filename=\"${filename}_${new Date().toISOString().split('T')[0]}.xlsx\"`\n        });\n        \n        return res.send(excelBuffer);\n      }\n      \n      // For CSV format\n      if (format === 'csv') {\n        const csvData = [headers, ...data].map(row => row.join(',')).join('\\n');\n        \n        res.set({\n          'Content-Type': 'text/csv',\n          'Content-Disposition': `attachment; filename=\"${filename}_${new Date().toISOString().split('T')[0]}.csv\"`\n        });\n        \n        return res.send(csvData);\n      }\n      \n      // Default JSON response\n      res.json({\n        templateId,\n        filename,\n        headers,\n        data,\n        rowCount: data.length,\n        generatedAt: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error('Report generation error:', error);\n      res.status(500).json({ error: \"Failed to generate report\" });\n    }\n  });\n\n  // Get custom reports\n  app.get(\"/api/reports/custom\", async (req, res) => {\n    try {\n      // In a real implementation, this would fetch from database\n      // For now, returning mock data with proper structure\n      const customReports = [\n        {\n          id: \"custom-1\",\n          name: \"Monthly Laptop Assignment Report\",\n          description: \"Monthly tracking of laptop assignments for JP Nagar location\",\n          entity: \"assignments\",\n          fields: [\"assetId\", \"employeeName\", \"assignedDate\", \"status\"],\n          filters: { location: \"JP Nagar\", assetType: \"Laptop\", dateRange: \"monthly\" },\n          createdDate: \"2024-01-15\",\n          createdBy: \"Admin User\",\n          lastRun: \"2024-01-20\",\n          totalRuns: 5\n        }\n      ];\n      res.json(customReports);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch custom reports\" });\n    }\n  });\n\n  // Create custom report\n  app.post(\"/api/reports/custom\", async (req, res) => {\n    try {\n      const { name, description, entity, fields, filters } = req.body;\n      \n      // Validate required fields\n      if (!name || !entity || !fields) {\n        return res.status(400).json({ error: \"Name, entity, and fields are required\" });\n      }\n      \n      const customReport = {\n        id: `custom-${Date.now()}`,\n        name,\n        description: description || \"\",\n        entity,\n        fields,\n        filters: filters || {},\n        createdDate: new Date().toISOString().split('T')[0],\n        createdBy: \"Admin User\", // In real implementation, get from auth\n        lastRun: null,\n        totalRuns: 0\n      };\n      \n      // In real implementation, save to database\n      // await storage.createCustomReport(customReport);\n      \n      res.status(201).json(customReport);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create custom report\" });\n    }\n  });\n\n  // Generate custom report\n  app.post(\"/api/reports/custom/:id/generate\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { format = 'excel' } = req.body;\n      \n      // In real implementation, fetch custom report config from database\n      // For now, handle basic case\n      \n      let data: any[] = [];\n      let filename = \"Custom_Report\";\n      let headers: string[] = [];\n      \n      // This would fetch the custom report configuration and execute it\n      // For demonstration, we'll return assets data\n      data = await storage.getAllAssets();\n      filename = \"Custom_Asset_Report\";\n      headers = [\"Asset ID\", \"Type\", \"Brand\", \"Model\", \"Status\"];\n      \n      data = data.map((asset: any) => [\n        asset.assetId,\n        asset.assetType,\n        asset.brand,\n        asset.modelName,\n        asset.status\n      ]);\n      \n      if (format === 'excel') {\n        const XLSX = require('xlsx');\n        const wb = XLSX.utils.book_new();\n        const ws = XLSX.utils.aoa_to_sheet([headers, ...data]);\n        XLSX.utils.book_append_sheet(wb, ws, 'Report');\n        \n        const excelBuffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });\n        \n        res.set({\n          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n          'Content-Disposition': `attachment; filename=\"${filename}_${new Date().toISOString().split('T')[0]}.xlsx\"`\n        });\n        \n        return res.send(excelBuffer);\n      }\n      \n      res.json({ data, rowCount: data.length });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to generate custom report\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":27952},"AutoDesignPro/server/storage.ts":{"content":"import { \n  type Asset, type InsertAsset,\n  type Employee, type InsertEmployee,\n  type Location, type InsertLocation,\n  type AssetAssignmentHistory, type InsertAssetAssignmentHistory,\n  type AssetMaintenance, type InsertAssetMaintenance,\n  type CctvSystem, type InsertCctvSystem,\n  type BiometricSystem, type InsertBiometricSystem,\n  type Backup, type InsertBackup\n} from \"@shared/schema\";\n\n// BODYCRAFT MDM Storage Interface\nexport interface IStorage {\n  // Assets\n  getAsset(assetId: string): Promise<Asset | undefined>;\n  getAllAssets(): Promise<Asset[]>;\n  createAsset(asset: InsertAsset): Promise<Asset>;\n  updateAsset(assetId: string, asset: Partial<InsertAsset>): Promise<Asset | undefined>;\n  deleteAsset(assetId: string): Promise<boolean>;\n  \n  // Employees\n  getEmployee(id: number): Promise<Employee | undefined>;\n  getAllEmployees(): Promise<Employee[]>;\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  updateEmployee(id: number, employee: Partial<InsertEmployee>): Promise<Employee | undefined>;\n  deleteEmployee(id: number): Promise<boolean>;\n  \n  // Locations\n  getLocation(id: number): Promise<Location | undefined>;\n  getAllLocations(): Promise<Location[]>;\n  createLocation(location: InsertLocation): Promise<Location>;\n  updateLocation(id: number, location: Partial<InsertLocation>): Promise<Location | undefined>;\n  deleteLocation(id: number): Promise<boolean>;\n  \n  // Assignment History\n  getAssignmentHistory(assetId?: string, employeeId?: number): Promise<AssetAssignmentHistory[]>;\n  createAssignment(assignment: InsertAssetAssignmentHistory): Promise<AssetAssignmentHistory>;\n  \n  // Maintenance\n  getMaintenanceRecords(assetId?: string): Promise<AssetMaintenance[]>;\n  createMaintenanceRecord(maintenance: InsertAssetMaintenance): Promise<AssetMaintenance>;\n  updateMaintenanceRecord(id: number, maintenance: Partial<InsertAssetMaintenance>): Promise<AssetMaintenance | undefined>;\n  deleteMaintenanceRecord(id: number): Promise<boolean>;\n  \n  // CCTV Systems\n  getAllCctvSystems(): Promise<CctvSystem[]>;\n  createCctvSystem(system: InsertCctvSystem): Promise<CctvSystem>;\n  updateCctvSystem(id: number, system: Partial<InsertCctvSystem>): Promise<CctvSystem | undefined>;\n  deleteCctvSystem(id: number): Promise<boolean>;\n  \n  // Biometric Systems\n  getAllBiometricSystems(): Promise<BiometricSystem[]>;\n  createBiometricSystem(system: InsertBiometricSystem): Promise<BiometricSystem>;\n  updateBiometricSystem(id: number, system: Partial<InsertBiometricSystem>): Promise<BiometricSystem | undefined>;\n  deleteBiometricSystem(id: number): Promise<boolean>;\n  \n  // Backups\n  getBackups(assetId?: string): Promise<Backup[]>;\n  createBackup(backup: InsertBackup): Promise<Backup>;\n  updateBackup(id: number, backup: Partial<InsertBackup>): Promise<Backup | undefined>;\n  deleteBackup(id: number): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private assets: Map<string, Asset>;\n  private employees: Map<number, Employee>;\n  private locations: Map<number, Location>;\n  private assignmentHistory: AssetAssignmentHistory[];\n  private maintenance: AssetMaintenance[];\n  private cctvSystems: Map<number, CctvSystem>;\n  private biometricSystems: Map<number, BiometricSystem>;\n  private backups: Backup[];\n  \n  // Counters for auto-increment IDs\n  private nextEmployeeId: number = 1;\n  private nextLocationId: number = 1;\n  private nextAssignmentId: number = 1;\n  private nextMaintenanceId: number = 1;\n  private nextCctvId: number = 1;\n  private nextBiometricId: number = 1;\n  private nextBackupId: number = 1;\n\n  constructor() {\n    this.assets = new Map();\n    this.employees = new Map();\n    this.locations = new Map();\n    this.assignmentHistory = [];\n    this.maintenance = [];\n    this.cctvSystems = new Map();\n    this.biometricSystems = new Map();\n    this.backups = [];\n    \n    // Initialize with sample data\n    this.initializeSampleData();\n  }\n\n  // Assets\n  async getAsset(assetId: string): Promise<Asset | undefined> {\n    return this.assets.get(assetId);\n  }\n\n  async getAllAssets(): Promise<Asset[]> {\n    return Array.from(this.assets.values());\n  }\n\n  async createAsset(insertAsset: InsertAsset): Promise<Asset> {\n    const asset: Asset = {\n      ...insertAsset,\n      status: insertAsset.status || \"available\",\n      condition: insertAsset.condition || \"good\",\n      serviceTag: insertAsset.serviceTag || null,\n      purchaseDate: insertAsset.purchaseDate || null,\n      warrantyExpiry: insertAsset.warrantyExpiry || null,\n      locationId: insertAsset.locationId || null,\n      currentUserId: insertAsset.currentUserId || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.assets.set(asset.assetId, asset);\n    return asset;\n  }\n\n  async updateAsset(assetId: string, updateData: Partial<InsertAsset>): Promise<Asset | undefined> {\n    const existing = this.assets.get(assetId);\n    if (!existing) return undefined;\n    \n    // Prevent assetId changes as suggested by architect\n    const { assetId: _, ...safeUpdateData } = updateData;\n    \n    const updated: Asset = {\n      ...existing,\n      ...safeUpdateData,\n      assetId: existing.assetId, // Preserve original asset ID\n      createdAt: existing.createdAt, // Preserve creation date\n      updatedAt: new Date(),\n    };\n    this.assets.set(assetId, updated);\n    return updated;\n  }\n\n  async deleteAsset(assetId: string): Promise<boolean> {\n    return this.assets.delete(assetId);\n  }\n\n  // Employees\n  async getEmployee(id: number): Promise<Employee | undefined> {\n    return this.employees.get(id);\n  }\n\n  async getAllEmployees(): Promise<Employee[]> {\n    return Array.from(this.employees.values());\n  }\n\n  async createEmployee(insertEmployee: InsertEmployee): Promise<Employee> {\n    const employee: Employee = {\n      id: this.nextEmployeeId++,\n      employeeCode: insertEmployee.employeeCode,\n      firstName: insertEmployee.firstName,\n      lastName: insertEmployee.lastName,\n      department: insertEmployee.department,\n      designation: insertEmployee.designation || null,\n      email: insertEmployee.email || null,\n      phone: insertEmployee.phone || null,\n      status: insertEmployee.status || \"active\",\n      locationId: insertEmployee.locationId || null,\n      createdAt: new Date(),\n    };\n    this.employees.set(employee.id, employee);\n    return employee;\n  }\n\n  async updateEmployee(id: number, updateData: Partial<InsertEmployee>): Promise<Employee | undefined> {\n    const existing = this.employees.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Employee = { \n      ...existing, \n      ...updateData,\n      id: existing.id, // Prevent ID changes\n      createdAt: existing.createdAt, // Preserve creation date\n    };\n    this.employees.set(id, updated);\n    return updated;\n  }\n\n  async deleteEmployee(id: number): Promise<boolean> {\n    return this.employees.delete(id);\n  }\n\n  // Locations\n  async getLocation(id: number): Promise<Location | undefined> {\n    return this.locations.get(id);\n  }\n\n  async getAllLocations(): Promise<Location[]> {\n    return Array.from(this.locations.values());\n  }\n\n  async createLocation(insertLocation: InsertLocation): Promise<Location> {\n    const location: Location = {\n      id: this.nextLocationId++,\n      outletName: insertLocation.outletName,\n      city: insertLocation.city,\n      state: insertLocation.state,\n      address: insertLocation.address || null,\n      managerName: insertLocation.managerName || null,\n      contactDetails: insertLocation.contactDetails || null,\n      createdAt: new Date(),\n    };\n    this.locations.set(location.id, location);\n    return location;\n  }\n\n  async updateLocation(id: number, updateData: Partial<InsertLocation>): Promise<Location | undefined> {\n    const existing = this.locations.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Location = { \n      ...existing, \n      ...updateData,\n      id: existing.id, // Prevent ID changes\n      createdAt: existing.createdAt, // Preserve creation date\n    };\n    this.locations.set(id, updated);\n    return updated;\n  }\n\n  async deleteLocation(id: number): Promise<boolean> {\n    return this.locations.delete(id);\n  }\n\n  // Assignment History\n  async getAssignmentHistory(assetId?: string, employeeId?: number): Promise<AssetAssignmentHistory[]> {\n    let filtered = this.assignmentHistory;\n    \n    if (assetId) {\n      filtered = filtered.filter(h => h.assetId === assetId);\n    }\n    \n    if (employeeId) {\n      filtered = filtered.filter(h => h.employeeId === employeeId);\n    }\n    \n    return filtered;\n  }\n\n  async createAssignment(insertAssignment: InsertAssetAssignmentHistory): Promise<AssetAssignmentHistory> {\n    const assignment: AssetAssignmentHistory = {\n      id: this.nextAssignmentId++,\n      assetId: insertAssignment.assetId,\n      employeeId: insertAssignment.employeeId,\n      assignedDate: insertAssignment.assignedDate,\n      returnedDate: insertAssignment.returnedDate || null,\n      assignmentReason: insertAssignment.assignmentReason || null,\n      returnReason: insertAssignment.returnReason || null,\n      conditionOnAssignment: insertAssignment.conditionOnAssignment || null,\n      conditionOnReturn: insertAssignment.conditionOnReturn || null,\n      backupDetails: insertAssignment.backupDetails || null,\n      createdBy: insertAssignment.createdBy || null,\n      createdAt: new Date(),\n    };\n    this.assignmentHistory.push(assignment);\n    return assignment;\n  }\n\n  // Maintenance\n  async getMaintenanceRecords(assetId?: string): Promise<AssetMaintenance[]> {\n    if (assetId) {\n      return this.maintenance.filter(m => m.assetId === assetId);\n    }\n    return this.maintenance;\n  }\n\n  async createMaintenanceRecord(insertMaintenance: InsertAssetMaintenance): Promise<AssetMaintenance> {\n    const maintenance: AssetMaintenance = {\n      id: this.nextMaintenanceId++,\n      assetId: insertMaintenance.assetId,\n      maintenanceType: insertMaintenance.maintenanceType || null,\n      description: insertMaintenance.description || null,\n      scheduledDate: insertMaintenance.scheduledDate || null,\n      completedDate: insertMaintenance.completedDate || null,\n      cost: insertMaintenance.cost || null,\n      technicianName: insertMaintenance.technicianName || null,\n      partsReplaced: insertMaintenance.partsReplaced || null,\n      createdAt: new Date(),\n    };\n    this.maintenance.push(maintenance);\n    return maintenance;\n  }\n\n  async updateMaintenanceRecord(id: number, updateData: Partial<InsertAssetMaintenance>): Promise<AssetMaintenance | undefined> {\n    const index = this.maintenance.findIndex(m => m.id === id);\n    if (index === -1) return undefined;\n    \n    const updated: AssetMaintenance = { ...this.maintenance[index], ...updateData };\n    this.maintenance[index] = updated;\n    return updated;\n  }\n\n  async deleteMaintenanceRecord(id: number): Promise<boolean> {\n    const index = this.maintenance.findIndex(m => m.id === id);\n    if (index === -1) return false;\n    this.maintenance.splice(index, 1);\n    return true;\n  }\n\n  // CCTV Systems\n  async getAllCctvSystems(): Promise<CctvSystem[]> {\n    return Array.from(this.cctvSystems.values());\n  }\n\n  async createCctvSystem(insertSystem: InsertCctvSystem): Promise<CctvSystem> {\n    const system: CctvSystem = {\n      id: this.nextCctvId++,\n      deviceName: insertSystem.deviceName,\n      ipAddress: insertSystem.ipAddress,\n      locationDetails: insertSystem.locationDetails || null,\n      username: insertSystem.username || null,\n      passwordHash: insertSystem.passwordHash || null,\n      status: insertSystem.status || \"online\",\n      lastOnline: insertSystem.lastOnline || null,\n      locationId: insertSystem.locationId || null,\n      createdAt: new Date(),\n    };\n    this.cctvSystems.set(system.id, system);\n    return system;\n  }\n\n  async updateCctvSystem(id: number, updateData: Partial<InsertCctvSystem>): Promise<CctvSystem | undefined> {\n    const existing = this.cctvSystems.get(id);\n    if (!existing) return undefined;\n    \n    const updated: CctvSystem = { ...existing, ...updateData };\n    this.cctvSystems.set(id, updated);\n    return updated;\n  }\n\n  async deleteCctvSystem(id: number): Promise<boolean> {\n    return this.cctvSystems.delete(id);\n  }\n\n  // Biometric Systems\n  async getAllBiometricSystems(): Promise<BiometricSystem[]> {\n    return Array.from(this.biometricSystems.values());\n  }\n\n  async createBiometricSystem(insertSystem: InsertBiometricSystem): Promise<BiometricSystem> {\n    const system: BiometricSystem = {\n      id: this.nextBiometricId++,\n      deviceName: insertSystem.deviceName,\n      deviceModel: insertSystem.deviceModel || null,\n      ipAddress: insertSystem.ipAddress || null,\n      locationDetails: insertSystem.locationDetails || null,\n      employeeCount: insertSystem.employeeCount ?? 0,  // Fix: Use nullish coalescing to handle 0 properly\n      lastSyncDate: insertSystem.lastSyncDate || null,\n      status: insertSystem.status || \"online\",\n      locationId: insertSystem.locationId || null,\n      createdAt: new Date(),\n    };\n    this.biometricSystems.set(system.id, system);\n    return system;\n  }\n\n  async updateBiometricSystem(id: number, updateData: Partial<InsertBiometricSystem>): Promise<BiometricSystem | undefined> {\n    const existing = this.biometricSystems.get(id);\n    if (!existing) return undefined;\n    \n    const updated: BiometricSystem = { ...existing, ...updateData };\n    this.biometricSystems.set(id, updated);\n    return updated;\n  }\n\n  async deleteBiometricSystem(id: number): Promise<boolean> {\n    return this.biometricSystems.delete(id);\n  }\n\n  // Backups\n  async getBackups(assetId?: string): Promise<Backup[]> {\n    if (assetId) {\n      return this.backups.filter(b => b.assetId === assetId);\n    }\n    return this.backups;\n  }\n\n  async createBackup(insertBackup: InsertBackup): Promise<Backup> {\n    const backup: Backup = {\n      id: this.nextBackupId++,\n      assetId: insertBackup.assetId,\n      employeeId: insertBackup.employeeId || null,\n      backupDate: insertBackup.backupDate,\n      backupSize: insertBackup.backupSize || null,\n      backupType: insertBackup.backupType || null,\n      backupLocation: insertBackup.backupLocation || null,\n      performedBy: insertBackup.performedBy || null,\n      createdAt: new Date(),\n    };\n    this.backups.push(backup);\n    return backup;\n  }\n\n  async updateBackup(id: number, updateData: Partial<InsertBackup>): Promise<Backup | undefined> {\n    const index = this.backups.findIndex(b => b.id === id);\n    if (index === -1) return undefined;\n    \n    const updated: Backup = { ...this.backups[index], ...updateData };\n    this.backups[index] = updated;\n    return updated;\n  }\n\n  async deleteBackup(id: number): Promise<boolean> {\n    const index = this.backups.findIndex(b => b.id === id);\n    if (index === -1) return false;\n    this.backups.splice(index, 1);\n    return true;\n  }\n\n  private initializeSampleData() {\n    // Sample locations\n    const locations = [\n      { outletName: \"JP Nagar\", city: \"Bangalore\", state: \"Karnataka\", managerName: \"Rajesh Kumar\", contactDetails: \"rajesh@bodycraft.com\" },\n      { outletName: \"Koramangala\", city: \"Bangalore\", state: \"Karnataka\", managerName: \"Priya Sharma\", contactDetails: \"priya@bodycraft.com\" },\n      { outletName: \"Indiranagar\", city: \"Bangalore\", state: \"Karnataka\", managerName: \"Amit Singh\", contactDetails: \"amit@bodycraft.com\" },\n    ];\n\n    locations.forEach(loc => {\n      const location: Location = {\n        ...loc,\n        id: this.nextLocationId++,\n        address: null,\n        createdAt: new Date(),\n      };\n      this.locations.set(location.id, location);\n    });\n\n    // Sample employees\n    const employees = [\n      { employeeCode: \"BFC2024001\", firstName: \"Rajesh\", lastName: \"Kumar\", department: \"IT\", designation: \"Manager\", email: \"rajesh@bodycraft.com\", status: \"active\", locationId: 1 },\n      { employeeCode: \"BFC2024002\", firstName: \"Priya\", lastName: \"Sharma\", department: \"Sales\", designation: \"Executive\", email: \"priya@bodycraft.com\", status: \"active\", locationId: 2 },\n      { employeeCode: \"BFC2024003\", firstName: \"Amit\", lastName: \"Singh\", department: \"Operations\", designation: \"Specialist\", email: \"amit@bodycraft.com\", status: \"active\", locationId: 3 },\n      { employeeCode: \"BFC2024004\", firstName: \"Sunita\", lastName: \"Reddy\", department: \"Marketing\", designation: \"Specialist\", email: \"sunita@bodycraft.com\", status: \"active\", locationId: 1 },\n    ];\n\n    employees.forEach(emp => {\n      const employee: Employee = {\n        ...emp,\n        id: this.nextEmployeeId++,\n        phone: null,\n        createdAt: new Date(),\n      };\n      this.employees.set(employee.id, employee);\n    });\n\n    // Sample assets\n    const assets = [\n      { assetId: \"BFC001\", modelName: \"ThinkPad E15\", brand: \"Lenovo\", serviceTag: \"LEN001\", assetType: \"Laptop\", status: \"assigned\", condition: \"good\", locationId: 1, currentUserId: 1 },\n      { assetId: \"BFC002\", modelName: \"OptiPlex 3080\", brand: \"Dell\", serviceTag: \"DELL002\", assetType: \"Desktop\", status: \"available\", condition: \"excellent\", locationId: 1, currentUserId: null },\n      { assetId: \"BFC003\", modelName: \"Surface Pro 8\", brand: \"Microsoft\", serviceTag: \"MS003\", assetType: \"Laptop\", status: \"assigned\", condition: \"good\", locationId: 2, currentUserId: 2 },\n      { assetId: \"BFC004\", modelName: \"UZ2450\", brand: \"Dell\", serviceTag: \"DELL004\", assetType: \"Monitor\", status: \"available\", condition: \"good\", locationId: 2, currentUserId: null },\n      { assetId: \"BFC005\", modelName: \"iPhone 14\", brand: \"Apple\", serviceTag: \"APL005\", assetType: \"Mobile\", status: \"assigned\", condition: \"excellent\", locationId: 3, currentUserId: 3 },\n      { assetId: \"BFC006\", modelName: \"MacBook Pro 14\", brand: \"Apple\", serviceTag: \"APL006\", assetType: \"Laptop\", status: \"maintenance\", condition: \"fair\", locationId: 3, currentUserId: null },\n      { assetId: \"BFC007\", modelName: \"ThinkPad X1\", brand: \"Lenovo\", serviceTag: \"LEN007\", assetType: \"Laptop\", status: \"assigned\", condition: \"good\", locationId: 1, currentUserId: 4 },\n    ];\n\n    assets.forEach(asset => {\n      const fullAsset: Asset = {\n        ...asset,\n        purchaseDate: null,\n        warrantyExpiry: null,\n        serviceTag: asset.serviceTag,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.assets.set(asset.assetId, fullAsset);\n    });\n\n    // Sample assignment history\n    const assignmentHistory = [\n      { assetId: \"BFC001\", employeeId: 1, assignedDate: \"2024-01-15\", returnedDate: null, assignmentReason: \"New employee setup\", createdBy: 1 },\n      { assetId: \"BFC003\", employeeId: 2, assignedDate: \"2024-02-01\", returnedDate: null, assignmentReason: \"Department transfer\", createdBy: 1 },\n      { assetId: \"BFC005\", employeeId: 3, assignedDate: \"2024-02-15\", returnedDate: null, assignmentReason: \"Business requirement\", createdBy: 1 },\n      { assetId: \"BFC007\", employeeId: 4, assignedDate: \"2024-03-01\", returnedDate: null, assignmentReason: \"New hire equipment\", createdBy: 1 },\n    ];\n\n    assignmentHistory.forEach(hist => {\n      const assignment: AssetAssignmentHistory = {\n        ...hist,\n        id: this.nextAssignmentId++,\n        returnReason: null,\n        conditionOnAssignment: null,\n        conditionOnReturn: null,\n        backupDetails: null,\n        createdAt: new Date(),\n      };\n      this.assignmentHistory.push(assignment);\n    });\n\n    // Sample maintenance records\n    const maintenanceRecords = [\n      { assetId: \"BFC006\", maintenanceType: \"corrective\", description: \"Screen replacement due to crack\", scheduledDate: \"2024-03-01\", completedDate: \"2024-03-02\", cost: \"15000.00\", technicianName: \"Ravi Tech Services\", partsReplaced: \"LCD Screen\" },\n      { assetId: \"BFC001\", maintenanceType: \"preventive\", description: \"Regular cleaning and system check\", scheduledDate: \"2024-03-15\", completedDate: \"2024-03-15\", cost: \"500.00\", technicianName: \"Internal IT\", partsReplaced: null },\n      { assetId: \"BFC002\", maintenanceType: \"upgrade\", description: \"RAM upgrade from 8GB to 16GB\", scheduledDate: \"2024-02-20\", completedDate: \"2024-02-21\", cost: \"3500.00\", technicianName: \"Dell Support\", partsReplaced: \"8GB DDR4 RAM\" },\n    ];\n\n    maintenanceRecords.forEach(record => {\n      const maintenance: AssetMaintenance = {\n        id: this.nextMaintenanceId++,\n        assetId: record.assetId,\n        maintenanceType: record.maintenanceType,\n        description: record.description,\n        scheduledDate: record.scheduledDate,\n        completedDate: record.completedDate,\n        cost: record.cost,\n        technicianName: record.technicianName,\n        partsReplaced: record.partsReplaced,\n        createdAt: new Date(),\n      };\n      this.maintenance.push(maintenance);\n    });\n\n    // Sample CCTV systems\n    const cctvSystems = [\n      { deviceName: \"JP Nagar Entrance Camera\", ipAddress: \"192.168.1.101\", locationDetails: \"Main entrance\", username: \"admin\", passwordHash: \"hashed_password_1\", status: \"online\", lastOnline: new Date(), locationId: 1 },\n      { deviceName: \"JP Nagar DVR System\", ipAddress: \"192.168.1.102\", locationDetails: \"Server room\", username: \"admin\", passwordHash: \"hashed_password_2\", status: \"online\", lastOnline: new Date(), locationId: 1 },\n      { deviceName: \"Koramangala Reception Cam\", ipAddress: \"192.168.2.101\", locationDetails: \"Reception area\", username: \"admin\", passwordHash: \"hashed_password_3\", status: \"online\", lastOnline: new Date(), locationId: 2 },\n      { deviceName: \"Indiranagar Security DVR\", ipAddress: \"192.168.3.101\", locationDetails: \"Security office\", username: \"admin\", passwordHash: \"hashed_password_4\", status: \"offline\", lastOnline: null, locationId: 3 },\n    ];\n\n    cctvSystems.forEach(system => {\n      const cctvSystem: CctvSystem = {\n        id: this.nextCctvId++,\n        deviceName: system.deviceName,\n        ipAddress: system.ipAddress,\n        locationDetails: system.locationDetails,\n        username: system.username,\n        passwordHash: system.passwordHash,\n        status: system.status,\n        lastOnline: system.lastOnline,\n        locationId: system.locationId,\n        createdAt: new Date(),\n      };\n      this.cctvSystems.set(cctvSystem.id, cctvSystem);\n    });\n\n    // Sample biometric systems\n    const biometricSystems = [\n      { deviceName: \"JP Nagar Attendance\", deviceModel: \"eSSL K30 Pro\", ipAddress: \"192.168.1.201\", locationDetails: \"Main entrance\", employeeCount: 15, lastSyncDate: new Date(), status: \"online\", locationId: 1 },\n      { deviceName: \"Koramangala Biometric\", deviceModel: \"ZKTeco F18\", ipAddress: \"192.168.2.201\", locationDetails: \"Employee entrance\", employeeCount: 12, lastSyncDate: new Date(), status: \"online\", locationId: 2 },\n      { deviceName: \"Indiranagar Access Control\", deviceModel: \"Realtime T502\", ipAddress: \"192.168.3.201\", locationDetails: \"Staff entry\", employeeCount: 18, lastSyncDate: new Date(), status: \"error\", locationId: 3 },\n    ];\n\n    biometricSystems.forEach(system => {\n      const biometricSystem: BiometricSystem = {\n        id: this.nextBiometricId++,\n        deviceName: system.deviceName,\n        deviceModel: system.deviceModel,\n        ipAddress: system.ipAddress,\n        locationDetails: system.locationDetails,\n        employeeCount: system.employeeCount,\n        lastSyncDate: system.lastSyncDate,\n        status: system.status,\n        locationId: system.locationId,\n        createdAt: new Date(),\n      };\n      this.biometricSystems.set(biometricSystem.id, biometricSystem);\n    });\n\n    // Sample backup records\n    const backupRecords = [\n      { assetId: \"BFC001\", employeeId: 1, backupDate: new Date(\"2024-01-14\"), backupSize: \"250GB\", backupType: \"full\", backupLocation: \"NAS Server - /backups/users/rajesh\", performedBy: 1 },\n      { assetId: \"BFC003\", employeeId: 2, backupDate: new Date(\"2024-01-31\"), backupSize: \"180GB\", backupType: \"selective\", backupLocation: \"Cloud Storage - AWS S3\", performedBy: 1 },\n      { assetId: \"BFC005\", employeeId: 3, backupDate: new Date(\"2024-02-14\"), backupSize: \"128GB\", backupType: \"full\", backupLocation: \"Local Server - /backups/mobile\", performedBy: 1 },\n    ];\n\n    backupRecords.forEach(record => {\n      const backup: Backup = {\n        id: this.nextBackupId++,\n        assetId: record.assetId,\n        employeeId: record.employeeId,\n        backupDate: record.backupDate,\n        backupSize: record.backupSize,\n        backupType: record.backupType,\n        backupLocation: record.backupLocation,\n        performedBy: record.performedBy,\n        createdAt: new Date(),\n      };\n      this.backups.push(backup);\n    });\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":24658},"AutoDesignPro/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"AutoDesignPro/shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, decimal, date } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// 1. LOCATIONS - 32 BODYCRAFT outlets across India\nexport const locations = pgTable(\"locations\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  outletName: varchar(\"outlet_name\", { length: 255 }).notNull(),\n  city: varchar(\"city\", { length: 100 }).notNull(),\n  state: varchar(\"state\", { length: 100 }).notNull(),\n  address: text(\"address\"),\n  managerName: varchar(\"manager_name\", { length: 255 }),\n  contactDetails: varchar(\"contact_details\", { length: 255 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 2. EMPLOYEES - Staff members who can be assigned assets\nexport const employees = pgTable(\"employees\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  employeeCode: varchar(\"employee_code\", { length: 50 }).notNull().unique(), // BFC2024001, BFC2024002\n  firstName: varchar(\"first_name\", { length: 100 }).notNull(),\n  lastName: varchar(\"last_name\", { length: 100 }).notNull(),\n  department: varchar(\"department\", { length: 100 }).notNull(), // IT, Sales, Operations, Clinic\n  designation: varchar(\"designation\", { length: 100 }),\n  email: varchar(\"email\", { length: 255 }).unique(),\n  phone: varchar(\"phone\", { length: 20 }),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"active\"), // active, inactive, terminated\n  locationId: integer(\"location_id\").references(() => locations.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 3. ASSETS - Core entity for all IT assets\nexport const assets = pgTable(\"assets\", {\n  assetId: varchar(\"asset_id\", { length: 20 }).primaryKey(), // BFC001, BFC002, etc.\n  modelName: varchar(\"model_name\", { length: 255 }).notNull(),\n  brand: varchar(\"brand\", { length: 100 }).notNull(),\n  serviceTag: varchar(\"service_tag\", { length: 100 }).unique(),\n  assetType: varchar(\"asset_type\", { length: 50 }).notNull(), // Laptop, Desktop, Monitor, Mobile\n  purchaseDate: date(\"purchase_date\"),\n  warrantyExpiry: date(\"warranty_expiry\"),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"available\"), // available, assigned, maintenance, retired\n  condition: varchar(\"condition\", { length: 20 }).notNull().default(\"good\"), // excellent, good, fair, poor\n  locationId: integer(\"location_id\").references(() => locations.id),\n  currentUserId: integer(\"current_user_id\").references(() => employees.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// 4. ASSET ASSIGNMENT HISTORY - Critical for never losing assignment history\nexport const assetAssignmentHistory = pgTable(\"asset_assignment_history\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  assetId: varchar(\"asset_id\", { length: 20 }).notNull().references(() => assets.assetId),\n  employeeId: integer(\"employee_id\").notNull().references(() => employees.id),\n  assignedDate: date(\"assigned_date\").notNull(),\n  returnedDate: date(\"returned_date\"), // NULL for active assignments\n  assignmentReason: text(\"assignment_reason\"),\n  returnReason: text(\"return_reason\"),\n  conditionOnAssignment: varchar(\"condition_on_assignment\", { length: 20 }),\n  conditionOnReturn: varchar(\"condition_on_return\", { length: 20 }),\n  backupDetails: text(\"backup_details\"),\n  createdBy: integer(\"created_by\").references(() => employees.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 5. ASSET MAINTENANCE - Preventive and corrective maintenance\nexport const assetMaintenance = pgTable(\"asset_maintenance\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  assetId: varchar(\"asset_id\", { length: 20 }).notNull().references(() => assets.assetId),\n  maintenanceType: varchar(\"maintenance_type\", { length: 50 }), // preventive, corrective, upgrade\n  description: text(\"description\"),\n  scheduledDate: date(\"scheduled_date\"),\n  completedDate: date(\"completed_date\"),\n  cost: decimal(\"cost\", { precision: 10, scale: 2 }),\n  technicianName: varchar(\"technician_name\", { length: 255 }),\n  partsReplaced: text(\"parts_replaced\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 6. CCTV SYSTEMS - Integration with Hikvision devices\nexport const cctvSystems = pgTable(\"cctv_systems\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  deviceName: varchar(\"device_name\", { length: 255 }).notNull(),\n  ipAddress: varchar(\"ip_address\", { length: 45 }).notNull(), // Support IPv6 addresses\n  locationDetails: text(\"location_details\"),\n  username: varchar(\"username\", { length: 100 }),\n  passwordHash: varchar(\"password_hash\", { length: 255 }),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"online\"), // online, offline, error\n  lastOnline: timestamp(\"last_online\"),\n  locationId: integer(\"location_id\").references(() => locations.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 7. BIOMETRIC SYSTEMS - Employee synchronization and attendance\nexport const biometricSystems = pgTable(\"biometric_systems\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  deviceName: varchar(\"device_name\", { length: 255 }).notNull(),\n  deviceModel: varchar(\"device_model\", { length: 100 }),\n  ipAddress: varchar(\"ip_address\", { length: 45 }),\n  locationDetails: text(\"location_details\"),\n  employeeCount: integer(\"employee_count\").default(0),\n  lastSyncDate: timestamp(\"last_sync_date\"),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"online\"),\n  locationId: integer(\"location_id\").references(() => locations.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 8. BACKUPS - Data security and compliance tracking\nexport const backups = pgTable(\"backups\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  assetId: varchar(\"asset_id\", { length: 20 }).notNull().references(() => assets.assetId),\n  employeeId: integer(\"employee_id\").references(() => employees.id),\n  backupDate: timestamp(\"backup_date\").notNull(),\n  backupSize: varchar(\"backup_size\", { length: 50 }),\n  backupType: varchar(\"backup_type\", { length: 50 }), // full, incremental, selective\n  backupLocation: text(\"backup_location\"),\n  performedBy: integer(\"performed_by\").references(() => employees.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// 9. REPORT EXECUTIONS - Track when reports are generated for real statistics\nexport const reportExecutions = pgTable(\"report_executions\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  templateId: varchar(\"template_id\", { length: 100 }).notNull(), // asset-inventory, maintenance-summary, etc.\n  reportName: varchar(\"report_name\", { length: 255 }).notNull(),\n  format: varchar(\"format\", { length: 20 }).notNull(), // excel, csv, pdf\n  filters: text(\"filters\"), // JSON string of applied filters\n  recordCount: integer(\"record_count\"), // Number of records in generated report\n  fileSize: varchar(\"file_size\", { length: 50 }), // Generated file size\n  executionTime: integer(\"execution_time_ms\"), // Time taken to generate in milliseconds\n  executedBy: integer(\"executed_by\").references(() => employees.id), // Who ran the report\n  locationId: integer(\"location_id\").references(() => locations.id), // Location context if applicable\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"completed\"), // completed, failed, cancelled\n  errorMessage: text(\"error_message\"), // If status is failed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert Schemas - Zod schemas for validation\nexport const insertLocationSchema = createInsertSchema(locations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAssetSchema = createInsertSchema(assets).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAssetAssignmentHistorySchema = createInsertSchema(assetAssignmentHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAssetMaintenanceSchema = createInsertSchema(assetMaintenance).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCctvSystemSchema = createInsertSchema(cctvSystems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBiometricSystemSchema = createInsertSchema(biometricSystems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBackupSchema = createInsertSchema(backups).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReportExecutionSchema = createInsertSchema(reportExecutions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// TypeScript Types\nexport type Location = typeof locations.$inferSelect;\nexport type InsertLocation = z.infer<typeof insertLocationSchema>;\n\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\n\nexport type Asset = typeof assets.$inferSelect;\nexport type InsertAsset = z.infer<typeof insertAssetSchema>;\n\nexport type AssetAssignmentHistory = typeof assetAssignmentHistory.$inferSelect;\nexport type InsertAssetAssignmentHistory = z.infer<typeof insertAssetAssignmentHistorySchema>;\n\nexport type AssetMaintenance = typeof assetMaintenance.$inferSelect;\nexport type InsertAssetMaintenance = z.infer<typeof insertAssetMaintenanceSchema>;\n\nexport type CctvSystem = typeof cctvSystems.$inferSelect;\nexport type InsertCctvSystem = z.infer<typeof insertCctvSystemSchema>;\n\nexport type BiometricSystem = typeof biometricSystems.$inferSelect;\nexport type InsertBiometricSystem = z.infer<typeof insertBiometricSystemSchema>;\n\nexport type Backup = typeof backups.$inferSelect;\nexport type InsertBackup = z.infer<typeof insertBackupSchema>;\n\nexport type ReportExecution = typeof reportExecutions.$inferSelect;\nexport type InsertReportExecution = z.infer<typeof insertReportExecutionSchema>;\n\n// Legacy types for compatibility (can be removed once storage.ts is updated)\nexport type User = Employee;\nexport type InsertUser = InsertEmployee;\n","size_bytes":10059},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Assets from \"@/pages/assets\";\nimport Employees from \"@/pages/employees\";\nimport Assignments from \"@/pages/assignments\";\nimport Locations from \"@/pages/locations\";\nimport Maintenance from \"@/pages/maintenance\";\nimport Warranty from \"@/pages/warranty\";\nimport Compliance from \"@/pages/compliance\";\nimport ComplianceAnalytics from \"@/pages/compliance-analytics\";\nimport CCTV from \"@/pages/cctv\";\nimport Biometric from \"@/pages/biometric\";\nimport Reports from \"@/pages/reports\";\nimport Settings from \"@/pages/settings\";\nimport FinancialOverview from \"@/pages/financial-overview\";\nimport Login from \"@/pages/login\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ProtectedRoute({ component: Component, ...rest }: any) {\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const response = await fetch('/api/auth/me');\n        if (!response.ok) {\n          setLocation('/login');\n        }\n      } catch (error) {\n        setLocation('/login');\n      }\n    };\n\n    checkAuth();\n  }, [setLocation]);\n\n  return <Component {...rest} />;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/\">\n        {(params) => <ProtectedRoute component={Dashboard} {...params} />}\n      </Route>\n      <Route path=\"/assets\">\n        {(params) => <ProtectedRoute component={Assets} {...params} />}\n      </Route>\n      <Route path=\"/employees\">\n        {(params) => <ProtectedRoute component={Employees} {...params} />}\n      </Route>\n      <Route path=\"/assignments\">\n        {(params) => <ProtectedRoute component={Assignments} {...params} />}\n      </Route>\n      <Route path=\"/locations\">\n        {(params) => <ProtectedRoute component={Locations} {...params} />}\n      </Route>\n      <Route path=\"/maintenance\">\n        {(params) => <ProtectedRoute component={Maintenance} {...params} />}\n      </Route>\n      <Route path=\"/warranty\">\n        {(params) => <ProtectedRoute component={Warranty} {...params} />}\n      </Route>\n      <Route path=\"/compliance\">\n        {(params) => <ProtectedRoute component={Compliance} {...params} />}\n      </Route>\n      <Route path=\"/compliance-analytics\">\n        {(params) => <ProtectedRoute component={ComplianceAnalytics} {...params} />}\n      </Route>\n      <Route path=\"/cctv\">\n        {(params) => <ProtectedRoute component={CCTV} {...params} />}\n      </Route>\n      <Route path=\"/biometric\">\n        {(params) => <ProtectedRoute component={Biometric} {...params} />}\n      </Route>\n      <Route path=\"/reports\">\n        {(params) => <ProtectedRoute component={Reports} {...params} />}\n      </Route>\n      <Route path=\"/financial\">\n        {(params) => <ProtectedRoute component={FinancialOverview} {...params} />}\n      </Route>\n      <Route path=\"/settings\">\n        {(params) => <ProtectedRoute component={Settings} {...params} />}\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  const [location] = useLocation();\n  const isLoginPage = location === '/login';\n\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  if (isLoginPage) {\n    return <Router />;\n  }\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full relative overflow-hidden\">\n        {/* Animated Gradient Background */}\n        <div className=\"fixed inset-0 glass-bg -z-10\"></div>\n        \n        {/* Animated Background Shapes */}\n        <div className=\"fixed inset-0 overflow-hidden pointer-events-none -z-10\">\n          <div className=\"absolute top-20 left-10 w-72 h-72 bg-purple-500/20 rounded-full blur-3xl animate-float-slow\"></div>\n          <div className=\"absolute bottom-20 right-10 w-96 h-96 bg-blue-500/20 rounded-full blur-3xl animate-float-slower\"></div>\n          <div className=\"absolute top-1/2 left-1/2 w-64 h-64 bg-teal-500/10 rounded-full blur-3xl animate-pulse-slow\"></div>\n        </div>\n\n        <AppSidebar />\n        <main className=\"flex-1 overflow-auto\">\n          <Router />\n        </main>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"bodycraft-theme\">\n        <TooltipProvider>\n          <AppContent />\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":5012},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* BODYCRAFT GLASSMORPHISM DESIGN SYSTEM */\n:root {\n  /* Glassmorphism Color Palette */\n  --glass-gradient-start: #0f172a;\n  --glass-gradient-mid: #1e293b;\n  --glass-gradient-end: #6366f1;\n  \n  --glass-purple: #a855f7;\n  --glass-pink: #ec4899;\n  --glass-blue: #3b82f6;\n  --glass-teal: #14b8a6;\n  \n  /* Glass Surface Colors */\n  --glass-bg: rgba(255, 255, 255, 0.13);\n  --glass-bg-hover: rgba(255, 255, 255, 0.18);\n  --glass-border: rgba(255, 255, 255, 0.1);\n  --glass-shadow: rgba(8, 7, 16, 0.6);\n  \n  /* Text Colors */\n  --glass-text-primary: #e0e7ff;\n  --glass-text-secondary: rgba(255, 255, 255, 0.7);\n  --glass-text-muted: rgba(255, 255, 255, 0.5);\n  \n  /* Button Outline & Badges */\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  /* Scrollbar compensation for stable layout */\n  --scrollbar-size: 14px;\n\n  --background: 0 0% 98%;\n  --foreground: 222 20% 15%;\n  --border: 0 0% 88%;\n  --card: 0 0% 100%;\n  --card-foreground: 222 20% 15%;\n  --card-border: 0 0% 94%;\n  \n  --sidebar: 0 0% 96%;\n  --sidebar-foreground: 222 20% 15%;\n  --sidebar-border: 0 0% 92%;\n  --sidebar-primary: 264 100% 50%;\n  --sidebar-primary-foreground: 0 0% 98%;\n  --sidebar-accent: 0 0% 90%;\n  --sidebar-accent-foreground: 222 20% 15%;\n  --sidebar-ring: 264 100% 50%;\n  \n  --popover: 0 0% 99%;\n  --popover-foreground: 222 20% 15%;\n  --popover-border: 0 0% 92%;\n  \n  --primary: 264 100% 50%;\n  --primary-foreground: 0 0% 98%;\n  --secondary: 0 0% 92%;\n  --secondary-foreground: 222 20% 15%;\n  --muted: 0 0% 94%;\n  --muted-foreground: 222 15% 40%;\n  --accent: 0 0% 93%;\n  --accent-foreground: 222 20% 15%;\n  --destructive: 0 84% 60%;\n  --destructive-foreground: 0 0% 98%;\n  \n  --input: 0 0% 80%;\n  --ring: 264 100% 50%;\n  --chart-1: 264 100% 50%;\n  --chart-2: 142 76% 45%;\n  --chart-3: 24 100% 50%;\n  --chart-4: 198 88% 48%;\n  --chart-5: 330 81% 60%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.02);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.03);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.03), 0px 1px 2px -1px hsl(0 0% 0% / 0.05);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.03), 0px 1px 2px -1px hsl(0 0% 0% / 0.05);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.04), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.04), 0px 4px 6px -1px hsl(0 0% 0% / 0.07);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.05), 0px 8px 10px -1px hsl(0 0% 0% / 0.08);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.06);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n  --opaque-button-border-intensity: 9;\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 20% 12%;\n  --foreground: 210 40% 85%;\n  --border: 220 15% 18%;\n  --card: 220 15% 16%;\n  --card-foreground: 210 40% 85%;\n  --card-border: 220 15% 22%;\n  \n  --sidebar: 222 18% 14%;\n  --sidebar-foreground: 210 40% 85%;\n  --sidebar-border: 220 15% 20%;\n  --sidebar-primary: 264 100% 60%;\n  --sidebar-primary-foreground: 222 20% 12%;\n  --sidebar-accent: 220 15% 20%;\n  --sidebar-accent-foreground: 210 40% 85%;\n  --sidebar-ring: 264 100% 60%;\n  \n  --popover: 220 15% 18%;\n  --popover-foreground: 210 40% 85%;\n  --popover-border: 220 15% 24%;\n  --primary: 264 100% 60%;\n  --primary-foreground: 222 20% 12%;\n  --secondary: 220 15% 22%;\n  --secondary-foreground: 210 40% 85%;\n  --muted: 220 15% 20%;\n  --muted-foreground: 210 30% 65%;\n  --accent: 220 15% 21%;\n  --accent-foreground: 210 40% 85%;\n  --destructive: 0 84% 55%;\n  --destructive-foreground: 222 20% 12%;\n  --input: 220 15% 25%;\n  --ring: 264 100% 60%;\n  --chart-1: 264 100% 65%;\n  --chart-2: 142 76% 55%;\n  --chart-3: 24 100% 60%;\n  --chart-4: 198 88% 58%;\n  --chart-5: 330 81% 70%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.15);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.20);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.25);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.25);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.25), 0px 2px 4px -1px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.25), 0px 4px 6px -1px hsl(0 0% 0% / 0.35);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.30), 0px 8px 10px -1px hsl(0 0% 0% / 0.40);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.35);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* GLASSMORPHISM ANIMATIONS */\n@keyframes gradient-shift {\n  0%, 100% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n}\n\n@keyframes float-slow {\n  0%, 100% { transform: translateY(0) translateX(0); }\n  50% { transform: translateY(-20px) translateX(20px); }\n}\n\n@keyframes float-slower {\n  0%, 100% { transform: translateY(0) translateX(0); }\n  50% { transform: translateY(20px) translateX(-20px); }\n}\n\n@keyframes pulse-slow {\n  0%, 100% { opacity: 0.3; transform: scale(1); }\n  50% { opacity: 0.5; transform: scale(1.1); }\n}\n\n@keyframes fade-in {\n  from { opacity: 0; transform: translateY(-10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes slide-up {\n  from { opacity: 0; transform: translateY(30px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes shake {\n  0%, 100% { transform: translateX(0); }\n  25% { transform: translateX(-5px); }\n  75% { transform: translateX(5px); }\n}\n\n@layer utilities {\n  /* Hide ugly search cancel button in Chrome */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* Glassmorphism Utilities */\n  .glass-bg {\n    background: linear-gradient(to bottom right, var(--glass-gradient-start), var(--glass-gradient-mid), var(--glass-gradient-end));\n    background-size: 200% 200%;\n    animation: gradient-shift 15s ease infinite;\n  }\n  \n  .glass-card {\n    background: var(--glass-bg);\n    backdrop-filter: blur(16px);\n    -webkit-backdrop-filter: blur(16px);\n    border: 1px solid var(--glass-border);\n    box-shadow: 0 8px 32px 0 var(--glass-shadow),\n                0 0 0 1px rgba(255, 255, 255, 0.05) inset;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  .glass-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 12px 40px 0 var(--glass-shadow),\n                0 0 0 1px rgba(255, 255, 255, 0.08) inset;\n  }\n  \n  .glass-card-hover:hover {\n    background: var(--glass-bg-hover);\n  }\n  \n  .glass-input {\n    background: rgba(255, 255, 255, 0.07);\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    color: var(--glass-text-primary);\n  }\n  \n  .glass-input:focus {\n    background: rgba(255, 255, 255, 0.15) !important;\n    border-color: var(--glass-purple);\n  }\n  \n  .glass-gradient-text {\n    background: linear-gradient(135deg, var(--glass-purple) 0%, var(--glass-pink) 50%, var(--glass-blue) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n  \n  .animate-gradient-shift {\n    animation: gradient-shift 15s ease infinite;\n  }\n  \n  .animate-float-slow {\n    animation: float-slow 8s ease-in-out infinite;\n  }\n  \n  .animate-float-slower {\n    animation: float-slower 10s ease-in-out infinite;\n  }\n  \n  .animate-pulse-slow {\n    animation: pulse-slow 6s ease-in-out infinite;\n  }\n  \n  .animate-fade-in {\n    animation: fade-in 0.6s ease-out;\n  }\n  \n  .animate-slide-up {\n    animation: slide-up 0.8s ease-out;\n  }\n  \n  .animate-shake {\n    animation: shake 0.4s ease-in-out;\n  }\n  \n  /* Auto-fill styling */\n  input:-webkit-autofill,\n  input:-webkit-autofill:hover,\n  input:-webkit-autofill:focus {\n    -webkit-text-fill-color: var(--glass-text-primary) !important;\n    -webkit-box-shadow: 0 0 0px 1000px rgba(255, 255, 255, 0.1) inset !important;\n    transition: background-color 5000s ease-in-out 0s;\n  }\n\n  /* Elevation system */\n  .no-default-hover-elevate {}\n  .no-default-active-elevate {}\n\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after {\n    inset: -1px;\n  }\n  \n  /* Reduced motion support */\n  @media (prefers-reduced-motion: reduce) {\n    .animate-gradient-shift,\n    .animate-float-slow,\n    .animate-float-slower,\n    .animate-pulse-slow {\n      animation: none;\n    }\n  }\n  \n  /* Enhanced Professional Sidebar Styling */\n  [data-testid=\"sidebar-main\"] {\n    background: rgba(15, 23, 42, 0.4) !important;\n    backdrop-filter: blur(20px) !important;\n    -webkit-backdrop-filter: blur(20px) !important;\n    border-right: 1px solid rgba(255, 255, 255, 0.08) !important;\n  }\n  \n  /* Sidebar menu buttons */\n  [data-testid=\"sidebar-main\"] button,\n  [data-testid=\"sidebar-main\"] a {\n    color: rgba(255, 255, 255, 0.8);\n    transition: all 0.2s ease;\n  }\n  \n  [data-testid=\"sidebar-main\"] button:hover,\n  [data-testid=\"sidebar-main\"] a:hover {\n    background: rgba(255, 255, 255, 0.1) !important;\n    color: rgba(255, 255, 255, 1);\n  }\n  \n  /* Active menu item */\n  [data-testid=\"sidebar-main\"] [data-active=\"true\"],\n  [data-testid=\"sidebar-main\"] .bg-sidebar-accent {\n    background: linear-gradient(135deg, rgba(168, 85, 247, 0.2), rgba(59, 130, 246, 0.2)) !important;\n    color: rgba(255, 255, 255, 1) !important;\n    border-left: 3px solid var(--glass-purple);\n  }\n  \n  /* Sidebar group labels */\n  [data-testid=\"sidebar-main\"] [class*=\"SidebarGroupLabel\"] {\n    color: rgba(255, 255, 255, 0.7);\n    font-weight: 600;\n    letter-spacing: 0.05em;\n    text-transform: uppercase;\n    font-size: 0.75rem;\n    padding-top: 1.5rem;\n    padding-bottom: 0.5rem;\n  }\n  \n  /* Sidebar icons */\n  [data-testid=\"sidebar-main\"] svg {\n    color: rgba(168, 85, 247, 0.8);\n    transition: all 0.2s ease;\n  }\n  \n  [data-testid=\"sidebar-main\"] button:hover svg,\n  [data-testid=\"sidebar-main\"] a:hover svg {\n    color: var(--glass-purple);\n    transform: scale(1.1);\n  }\n  \n  /* Logout button special styling */\n  [data-testid=\"button-logout\"] {\n    margin-top: 0.5rem;\n    border-top: 1px solid rgba(255, 255, 255, 0.1);\n    padding-top: 0.75rem !important;\n  }\n  \n  [data-testid=\"button-logout\"]:hover {\n    background: rgba(239, 68, 68, 0.1) !important;\n    color: rgba(248, 113, 113, 1) !important;\n  }\n  \n  [data-testid=\"button-logout\"]:hover svg {\n    color: rgba(248, 113, 113, 1) !important;\n  }\n  \n  /* Enhanced Glossy Table Styling */\n  table {\n    background: rgba(255, 255, 255, 0.03);\n    backdrop-filter: blur(12px);\n    -webkit-backdrop-filter: blur(12px);\n  }\n  \n  table thead tr {\n    background: rgba(168, 85, 247, 0.08);\n    backdrop-filter: blur(16px);\n    -webkit-backdrop-filter: blur(16px);\n    border-bottom: 2px solid rgba(168, 85, 247, 0.2);\n  }\n  \n  table tbody tr {\n    background: rgba(255, 255, 255, 0.02);\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.05);\n  }\n  \n  table tbody tr:hover {\n    background: rgba(168, 85, 247, 0.05);\n    box-shadow: 0 4px 16px rgba(168, 85, 247, 0.1);\n    transform: translateX(4px);\n  }\n  \n  table tbody tr.bg-muted\\/10 {\n    background: rgba(168, 85, 247, 0.06) !important;\n    backdrop-filter: blur(20px) !important;\n    -webkit-backdrop-filter: blur(20px) !important;\n  }\n  \n  /* Enhanced Card Glossy Effect */\n  .rounded-lg.border {\n    backdrop-filter: blur(12px);\n    -webkit-backdrop-filter: blur(12px);\n    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.1),\n                0 0 0 1px rgba(255, 255, 255, 0.05) inset;\n  }\n  \n  /* Enhanced Button Glossy Effect */\n  button {\n    backdrop-filter: blur(8px);\n    -webkit-backdrop-filter: blur(8px);\n    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  button:hover {\n    box-shadow: 0 4px 12px rgba(168, 85, 247, 0.2);\n  }\n  \n  /* Enhanced Input Glossy Effect */\n  input, select, textarea {\n    backdrop-filter: blur(8px);\n    -webkit-backdrop-filter: blur(8px);\n    background: rgba(255, 255, 255, 0.05);\n    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  input:focus, select:focus, textarea:focus {\n    background: rgba(255, 255, 255, 0.08);\n    box-shadow: 0 0 0 2px rgba(168, 85, 247, 0.3),\n                0 4px 12px rgba(168, 85, 247, 0.2);\n  }\n  \n  /* Enhanced Badge Glossy Effect */\n  [class*=\"badge\"] {\n    backdrop-filter: blur(8px);\n    -webkit-backdrop-filter: blur(8px);\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  }\n  \n  /* Dialog/Modal Glossy Effect */\n  [role=\"dialog\"] {\n    backdrop-filter: blur(16px);\n    -webkit-backdrop-filter: blur(16px);\n    background: rgba(15, 23, 42, 0.6);\n    box-shadow: 0 24px 48px rgba(0, 0, 0, 0.3),\n                0 0 0 1px rgba(255, 255, 255, 0.1) inset;\n  }\n}\n\n/* Table Container - No Scrollbar */\n.table-container-stable {\n  overflow-x: auto;\n  position: relative;\n}\n\n/* Hide scrollbar for WebKit browsers (Chrome, Safari, Edge) */\n.table-container-stable::-webkit-scrollbar {\n  display: none;\n}\n\n/* Hide scrollbar for Firefox */\n.table-container-stable {\n  scrollbar-width: none;\n}\n\n/* Hide scrollbar for IE/Edge */\n.table-container-stable {\n  -ms-overflow-style: none;\n}\n","size_bytes":16483},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/types/session.d.ts":{"content":"import 'express-session';\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId: number;\n    username: string;\n    role: string;\n  }\n}\n","size_bytes":154},"AutoDesignPro/client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Assets from \"@/pages/assets\";\nimport Employees from \"@/pages/employees\";\nimport Assignments from \"@/pages/assignments\";\nimport Locations from \"@/pages/locations\";\nimport Maintenance from \"@/pages/maintenance\";\nimport Compliance from \"@/pages/compliance\";\nimport CCTV from \"@/pages/cctv\";\nimport Biometric from \"@/pages/biometric\";\nimport Reports from \"@/pages/reports\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/assets\" component={Assets} />\n      <Route path=\"/employees\" component={Employees} />\n      <Route path=\"/assignments\" component={Assignments} />\n      <Route path=\"/locations\" component={Locations} />\n      <Route path=\"/maintenance\" component={Maintenance} />\n      <Route path=\"/compliance\" component={Compliance} />\n      <Route path=\"/cctv\" component={CCTV} />\n      <Route path=\"/biometric\" component={Biometric} />\n      <Route path=\"/reports\" component={Reports} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  // Custom sidebar width for MDM application\n  const style = {\n    \"--sidebar-width\": \"20rem\",       // 320px for better content\n    \"--sidebar-width-icon\": \"4rem\",   // default icon width\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"bodycraft-theme\">\n        <TooltipProvider>\n          <SidebarProvider style={style as React.CSSProperties}>\n            <div className=\"flex h-screen w-full\">\n              <AppSidebar />\n              <div className=\"flex flex-col flex-1\">\n                <header className=\"flex items-center justify-between p-2 border-b bg-background\">\n                  <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                  <div className=\"flex items-center gap-2\">\n                    <ThemeToggle />\n                  </div>\n                </header>\n                <main className=\"flex-1 overflow-auto bg-background\">\n                  <Router />\n                </main>\n              </div>\n            </div>\n          </SidebarProvider>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":2843},"AutoDesignPro/client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 222 20% 15%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 222 20% 15%;\n\n  --card-border: 0 0% 94%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 222 20% 15%;\n\n  --sidebar-border: 0 0% 92%;\n\n  --sidebar-primary: 264 100% 50%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 0 0% 90%;\n\n  --sidebar-accent-foreground: 222 20% 15%;\n\n  --sidebar-ring: 264 100% 50%;\n\n  --popover: 0 0% 99%;\n\n  --popover-foreground: 222 20% 15%;\n\n  --popover-border: 0 0% 92%;\n\n  --primary: 264 100% 50%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 92%;\n\n  --secondary-foreground: 222 20% 15%;\n\n  --muted: 0 0% 94%;\n\n  --muted-foreground: 222 15% 40%;\n\n  --accent: 0 0% 93%;\n\n  --accent-foreground: 222 20% 15%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 80%;\n  --ring: 264 100% 50%;\n  --chart-1: 264 100% 50%;\n  --chart-2: 142 76% 45%;\n  --chart-3: 24 100% 50%;\n  --chart-4: 198 88% 48%;\n  --chart-5: 330 81% 60%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.02);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.03);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.03), 0px 1px 2px -1px hsl(0 0% 0% / 0.05);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.03), 0px 1px 2px -1px hsl(0 0% 0% / 0.05);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.04), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.04), 0px 4px 6px -1px hsl(0 0% 0% / 0.07);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.05), 0px 8px 10px -1px hsl(0 0% 0% / 0.08);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.06);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 20% 12%;\n\n  --foreground: 210 40% 85%;\n\n  --border: 220 15% 18%;\n\n  --card: 220 15% 16%;\n\n  --card-foreground: 210 40% 85%;\n\n  --card-border: 220 15% 22%;\n\n  --sidebar: 222 18% 14%;\n\n  --sidebar-foreground: 210 40% 85%;\n\n  --sidebar-border: 220 15% 20%;\n\n  --sidebar-primary: 264 100% 60%;\n\n  --sidebar-primary-foreground: 222 20% 12%;\n\n  --sidebar-accent: 220 15% 20%;\n\n  --sidebar-accent-foreground: 210 40% 85%;\n\n  --sidebar-ring: 264 100% 60%;\n\n  --popover: 220 15% 18%;\n\n  --popover-foreground: 210 40% 85%;\n\n  --popover-border: 220 15% 24%;\n\n  --primary: 264 100% 60%;\n\n  --primary-foreground: 222 20% 12%;\n\n  --secondary: 220 15% 22%;\n\n  --secondary-foreground: 210 40% 85%;\n\n  --muted: 220 15% 20%;\n\n  --muted-foreground: 210 30% 65%;\n\n  --accent: 220 15% 21%;\n\n  --accent-foreground: 210 40% 85%;\n\n  --destructive: 0 84% 55%;\n\n  --destructive-foreground: 222 20% 12%;\n\n  --input: 220 15% 25%;\n  --ring: 264 100% 60%;\n  --chart-1: 264 100% 65%;\n  --chart-2: 142 76% 55%;\n  --chart-3: 24 100% 60%;\n  --chart-4: 198 88% 58%;\n  --chart-5: 330 81% 70%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.15);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.20);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.25);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.25);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.25), 0px 2px 4px -1px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.25), 0px 4px 6px -1px hsl(0 0% 0% / 0.35);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.30), 0px 8px 10px -1px hsl(0 0% 0% / 0.40);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.35);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9734},"AutoDesignPro/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/app-sidebar.tsx":{"content":"import { Building2, Users, Laptop, MapPin, BarChart3, Cable, Fingerprint, Calendar, Settings, Wrench, Shield, LogOut } from \"lucide-react\"\nimport { Link, useLocation } from \"wouter\"\nimport { apiRequest, queryClient } from \"@/lib/queryClient\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\"\n\n// Main navigation items for BODYCRAFT MDM System\nconst navigationItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: BarChart3,\n  },\n  {\n    title: \"Assets\",\n    url: \"/assets\",\n    icon: Laptop,\n  },\n  {\n    title: \"Employees\",\n    url: \"/employees\", \n    icon: Users,\n  },\n  {\n    title: \"Assignments\",\n    url: \"/assignments\",\n    icon: Calendar,\n  },\n  {\n    title: \"Locations\",\n    url: \"/locations\",\n    icon: MapPin,\n  },\n  {\n    title: \"Maintenance\",\n    url: \"/maintenance\",\n    icon: Wrench,\n  },\n  {\n    title: \"Warranty\",\n    url: \"/warranty\",\n    icon: Shield,\n  },\n]\n\n// Integration management items\nconst integrationItems = [\n  {\n    title: \"CCTV Systems\",\n    url: \"/cctv\",\n    icon: Cable,\n  },\n  {\n    title: \"Biometric Systems\", \n    url: \"/biometric\",\n    icon: Fingerprint,\n  },\n]\n\n// Reports and settings\nconst systemItems = [\n  {\n    title: \"Reports\",\n    url: \"/reports\",\n    icon: BarChart3,\n  },\n  {\n    title: \"Settings\",\n    url: \"/settings\",\n    icon: Settings,\n  },\n]\n\nexport function AppSidebar() {\n  const [location, setLocation] = useLocation()\n  const { toast } = useToast()\n\n  const handleLogout = async () => {\n    try {\n      await apiRequest(\"POST\", \"/api/auth/logout\")\n      \n      queryClient.clear()\n      \n      toast({\n        title: \"Logged out successfully\",\n        description: \"You have been logged out of the system\",\n      })\n      \n      setLocation(\"/login\")\n    } catch (error) {\n      toast({\n        title: \"Logout failed\",\n        description: \"An error occurred while logging out\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  return (\n    <Sidebar data-testid=\"sidebar-main\" className=\"border-0 bg-transparent backdrop-blur-xl\">\n      <SidebarContent className=\"bg-transparent backdrop-blur-xl\">\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-lg font-semibold flex items-center gap-2 text-white/90\">\n            <Building2 className=\"h-5 w-5 text-purple-400\" />\n            <span className=\"glass-gradient-text\">BODYCRAFT</span>\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {navigationItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-white/70\">Integrations</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {integrationItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-white/70\">System</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {systemItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n              <SidebarMenuItem>\n                <SidebarMenuButton onClick={handleLogout} data-testid=\"button-logout\">\n                  <LogOut className=\"h-4 w-4\" />\n                  <span>Logout</span>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  )\n}","size_bytes":5028},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}","size_bytes":1577},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\"\nimport { useTheme } from \"./theme-provider\"\nimport { Button } from \"@/components/ui/button\"\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme()\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  )\n}","size_bytes":688},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/excel.ts":{"content":"import * as XLSX from 'xlsx'\nimport { saveAs } from 'file-saver'\n\n// Excel export utility functions\nexport class ExcelExporter {\n  // Export any data array to Excel file\n  static exportToExcel(data: any[], filename: string, worksheetName: string = 'Sheet1') {\n    const worksheet = XLSX.utils.json_to_sheet(data)\n    const workbook = XLSX.utils.book_new()\n    XLSX.utils.book_append_sheet(workbook, worksheet, worksheetName)\n    \n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' })\n    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' })\n    \n    saveAs(blob, `${filename}_${new Date().toISOString().split('T')[0]}.xlsx`)\n  }\n\n  // Export assets data with proper formatting\n  static exportAssets(assets: any[], locations: any[]) {\n    const formattedData = assets.map(asset => {\n      const location = locations.find(l => l.id === asset.locationId)\n      return {\n        'Asset ID': asset.assetId,\n        'Brand': asset.brand,\n        'Model': asset.modelName,\n        'Type': asset.assetType,\n        'Service Tag': asset.serviceTag || '',\n        'Purchase Date': asset.purchaseDate ? new Date(asset.purchaseDate).toISOString().split('T')[0] : '',\n        'Warranty Expiry': asset.warrantyExpiry ? new Date(asset.warrantyExpiry).toISOString().split('T')[0] : '',\n        'Status': asset.status,\n        'Condition': asset.condition || 'good',\n        'Location ID': asset.locationId || '',\n        'Location Name': location ? `${location.outletName}, ${location.city}` : ''\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Assets', 'Assets')\n  }\n\n  // Export employees data with proper formatting\n  static exportEmployees(employees: any[], locations: any[], assignments: any[], assets: any[]) {\n    const formattedData = employees.map(employee => {\n      const location = locations.find(l => l.id === employee.locationId)\n      const activeAssignment = assignments.find(a => a.employeeId === employee.id && !a.returnedDate)\n      const assignedAsset = activeAssignment ? assets.find(a => a.assetId === activeAssignment.assetId) : null\n      \n      return {\n        'Employee Code': employee.employeeCode,\n        'First Name': employee.firstName,\n        'Last Name': employee.lastName,\n        'Department': employee.department,\n        'Position': employee.position || 'N/A',\n        'Email': employee.email || 'N/A',\n        'Phone': employee.phone || 'N/A',\n        'Join Date': employee.joinDate ? new Date(employee.joinDate).toLocaleDateString() : 'N/A',\n        'Status': employee.status,\n        'Location': location ? `${location.outletName}, ${location.city}` : 'No Location',\n        'Assigned Asset': assignedAsset ? `${assignedAsset.assetId} - ${assignedAsset.brand} ${assignedAsset.modelName}` : 'No Asset',\n        'Created': new Date(employee.createdAt).toLocaleDateString(),\n        'Updated': new Date(employee.updatedAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Employees', 'Employees')\n  }\n\n  // Export assignments data with proper formatting\n  static exportAssignments(assignments: any[], employees: any[], assets: any[], locations: any[]) {\n    const formattedData = assignments.map(assignment => {\n      const employee = employees.find(e => e.id === assignment.employeeId)\n      const asset = assets.find(a => a.assetId === assignment.assetId)\n      const location = locations.find(l => l.id === asset?.locationId)\n      \n      return {\n        'Asset ID': assignment.assetId,\n        'Asset Details': asset ? `${asset.brand} ${asset.modelName}` : 'Unknown Asset',\n        'Employee Code': employee?.employeeCode || 'Unknown',\n        'Employee Name': employee ? `${employee.firstName} ${employee.lastName}` : 'Unknown Employee',\n        'Department': employee?.department || 'N/A',\n        'Location': location ? `${location.outletName}, ${location.city}` : 'No Location',\n        'Assigned Date': new Date(assignment.assignedDate).toLocaleDateString(),\n        'Returned Date': assignment.returnedDate ? new Date(assignment.returnedDate).toLocaleDateString() : 'Still Assigned',\n        'Assignment Condition': assignment.assignmentCondition || 'N/A',\n        'Return Condition': assignment.returnCondition || 'N/A',\n        'Assignment Reason': assignment.assignmentReason || 'N/A',\n        'Return Reason': assignment.returnReason || 'N/A',\n        'Backup Details': assignment.backupDetails || 'N/A',\n        'Status': assignment.returnedDate ? 'Returned' : 'Active',\n        'Created': new Date(assignment.createdAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Assignments', 'Assignments')\n  }\n\n  // Export locations data with analytics\n  static exportLocations(locations: any[], assets: any[], employees: any[], assignments: any[]) {\n    const formattedData = locations.map(location => {\n      const locationAssets = assets.filter(a => a.locationId === location.id)\n      const locationEmployees = employees.filter(e => e.locationId === location.id)\n      const activeAssignments = assignments.filter(a => {\n        const employee = employees.find(e => e.id === a.employeeId)\n        return employee?.locationId === location.id && !a.returnedDate\n      })\n      \n      return {\n        'Outlet Name': location.outletName,\n        'City': location.city,\n        'State': location.state,\n        'Address': location.address,\n        'Manager Name': location.managerName,\n        'Contact Details': location.contactDetails,\n        'Total Assets': locationAssets.length,\n        'Available Assets': locationAssets.filter(a => a.status === 'available').length,\n        'Assigned Assets': locationAssets.filter(a => a.status === 'assigned').length,\n        'Maintenance Assets': locationAssets.filter(a => a.status === 'maintenance').length,\n        'Total Employees': locationEmployees.length,\n        'Active Employees': locationEmployees.filter(e => e.status === 'active').length,\n        'Active Assignments': activeAssignments.length,\n        'Created': new Date(location.createdAt).toLocaleDateString(),\n        'Updated': new Date(location.updatedAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Locations', 'Locations')\n  }\n\n  // Export maintenance data with cost analysis\n  static exportMaintenance(maintenance: any[], assets: any[], locations: any[]) {\n    const formattedData = maintenance.map(record => {\n      const asset = assets.find(a => a.assetId === record.assetId)\n      const location = locations.find(l => l.id === asset?.locationId)\n      \n      return {\n        'Asset ID': record.assetId,\n        'Asset Details': asset ? `${asset.brand} ${asset.modelName}` : 'Unknown Asset',\n        'Location': location ? `${location.outletName}, ${location.city}` : 'No Location',\n        'Maintenance Type': record.maintenanceType.charAt(0).toUpperCase() + record.maintenanceType.slice(1),\n        'Description': record.description,\n        'Scheduled Date': new Date(record.scheduledDate).toLocaleDateString(),\n        'Completed Date': record.completedDate ? new Date(record.completedDate).toLocaleDateString() : 'Not Completed',\n        'Status': record.completedDate ? 'Completed' : 'Pending',\n        'Cost': record.cost ? `₹${record.cost.toFixed(2)}` : 'Not Specified',\n        'Technician': record.technicianName || 'Not Assigned',\n        'Parts Replaced': record.partsReplaced || 'None',\n        'Created': new Date(record.createdAt).toLocaleDateString(),\n        'Updated': new Date(record.updatedAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Maintenance', 'Maintenance')\n  }\n\n  // Export compliance data with audit trail\n  static exportCompliance(compliance: any[], assets: any[], locations: any[]) {\n    const formattedData = compliance.map(record => {\n      const asset = record.assetId ? assets.find(a => a.assetId === record.assetId) : null\n      const location = locations.find(l => l.id === record.locationId)\n      \n      return {\n        'Task Type': record.type.replace('_', ' ').charAt(0).toUpperCase() + record.type.replace('_', ' ').slice(1),\n        'Category': record.category.replace('_', ' ').charAt(0).toUpperCase() + record.category.replace('_', ' ').slice(1),\n        'Title': record.title,\n        'Description': record.description,\n        'Related Asset': asset ? `${asset.assetId} - ${asset.brand} ${asset.modelName}` : 'N/A',\n        'Location': location ? `${location.outletName}, ${location.city}` : 'All Locations',\n        'Due Date': new Date(record.dueDate).toLocaleDateString(),\n        'Completed Date': record.completedDate ? new Date(record.completedDate).toLocaleDateString() : 'Not Completed',\n        'Status': record.status.charAt(0).toUpperCase() + record.status.slice(1),\n        'Assigned To': record.assignedTo,\n        'Evidence': record.evidenceUrl ? 'Available' : 'Not Provided',\n        'Evidence URL': record.evidenceUrl || 'N/A',\n        'Compliance Notes': record.complianceNotes || 'None',\n        'Created': new Date(record.createdAt).toLocaleDateString(),\n        'Updated': new Date(record.updatedAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Compliance', 'Compliance')\n  }\n}\n\n// Excel import utility functions\nexport class ExcelImporter {\n  // Parse uploaded Excel file\n  static async parseExcelFile(file: File): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader()\n      \n      reader.onload = (e) => {\n        try {\n          const data = e.target?.result\n          const workbook = XLSX.read(data, { type: 'binary', cellDates: true, dateNF: 'yyyy-mm-dd' })\n          const sheetName = workbook.SheetNames[0]\n          const worksheet = workbook.Sheets[sheetName]\n          const jsonData = XLSX.utils.sheet_to_json(worksheet, { raw: false, dateNF: 'yyyy-mm-dd' })\n          \n          resolve(jsonData)\n        } catch (error) {\n          reject(error)\n        }\n      }\n      \n      reader.onerror = () => reject(new Error('Failed to read file'))\n      reader.readAsBinaryString(file)\n    })\n  }\n\n  // Validate and transform asset data\n  static validateAssetData(data: any[]): { valid: any[], errors: string[] } {\n    const valid: any[] = []\n    const errors: string[] = []\n\n    data.forEach((row, index) => {\n      const rowNumber = index + 2 // +2 because Excel rows start at 1 and we skip header\n\n      // Required fields validation\n      if (!row['Asset ID']?.toString().trim()) {\n        errors.push(`Row ${rowNumber}: Asset ID is required`)\n        return\n      }\n      if (!row['Brand']?.toString().trim()) {\n        errors.push(`Row ${rowNumber}: Brand is required`)\n        return\n      }\n      if (!row['Model']?.toString().trim()) {\n        errors.push(`Row ${rowNumber}: Model is required`)\n        return\n      }\n      if (!row['Type']?.toString().trim()) {\n        errors.push(`Row ${rowNumber}: Type is required`)\n        return\n      }\n\n      // Helper function to parse dates safely\n      const parseDate = (dateValue: any): string | null => {\n        if (!dateValue) return null\n        \n        // If it's already a Date object (from cellDates: true)\n        if (dateValue instanceof Date) {\n          return dateValue.toISOString().split('T')[0]\n        }\n        \n        // If it's a string in YYYY-MM-DD format\n        if (typeof dateValue === 'string') {\n          const parsed = new Date(dateValue)\n          if (!isNaN(parsed.getTime())) {\n            return parsed.toISOString().split('T')[0]\n          }\n        }\n        \n        return null\n      }\n\n      // Helper function to parse numbers safely\n      const parseNumber = (value: any): number | null => {\n        if (!value) return null\n        const num = typeof value === 'number' ? value : parseFloat(value.toString().replace(/[^0-9.-]/g, ''))\n        return isNaN(num) ? null : num\n      }\n\n      // Parse location ID\n      const locationId = row['Location ID'] ? parseNumber(row['Location ID']) : null\n\n      // Transform to API format\n      const transformedRow = {\n        assetId: row['Asset ID'].toString().trim(),\n        brand: row['Brand'].toString().trim(),\n        modelName: row['Model'].toString().trim(),\n        assetType: row['Type'].toString().trim(),\n        serviceTag: row['Service Tag']?.toString().trim() || null,\n        purchaseDate: parseDate(row['Purchase Date']),\n        warrantyExpiry: parseDate(row['Warranty Expiry']),\n        status: row['Status']?.toString().trim() || 'available',\n        condition: row['Condition']?.toString().trim() || 'good',\n        locationId: locationId\n      }\n\n      valid.push(transformedRow)\n    })\n\n    return { valid, errors }\n  }\n\n  // Validate and transform employee data\n  static validateEmployeeData(data: any[]): { valid: any[], errors: string[] } {\n    const valid: any[] = []\n    const errors: string[] = []\n\n    data.forEach((row, index) => {\n      const rowNumber = index + 2\n\n      // Required fields validation\n      if (!row['Employee Code']) {\n        errors.push(`Row ${rowNumber}: Employee Code is required`)\n        return\n      }\n      if (!row['First Name']) {\n        errors.push(`Row ${rowNumber}: First Name is required`)\n        return\n      }\n      if (!row['Last Name']) {\n        errors.push(`Row ${rowNumber}: Last Name is required`)\n        return\n      }\n      if (!row['Department']) {\n        errors.push(`Row ${rowNumber}: Department is required`)\n        return\n      }\n\n      // Transform to API format\n      const transformedRow = {\n        employeeCode: row['Employee Code'],\n        firstName: row['First Name'],\n        lastName: row['Last Name'],\n        department: row['Department'],\n        position: row['Position'] || null,\n        email: row['Email'] || null,\n        phone: row['Phone'] || null,\n        joinDate: row['Join Date'] ? new Date(row['Join Date']).toISOString() : null,\n        status: row['Status'] || 'active',\n      }\n\n      valid.push(transformedRow)\n    })\n\n    return { valid, errors }\n  }\n\n  // Download template files\n  static downloadAssetTemplate() {\n    const templateData = [\n      {\n        'Asset ID': 'BFC001',\n        'Brand': 'Lenovo',\n        'Model': 'ThinkPad E15',\n        'Type': 'Laptop',\n        'Service Tag': 'SN123456789',\n        'Purchase Date': '2024-01-15',\n        'Warranty Expiry': '2027-01-15',\n        'Status': 'available',\n        'Condition': 'excellent',\n        'Location ID': '1',\n        'Location Name': 'Corporate HQ, Bangalore (for reference only)'\n      }\n    ]\n    this.exportToExcel(templateData, 'Asset_Import_Template', 'Assets')\n  }\n\n  static downloadEmployeeTemplate() {\n    const templateData = [\n      {\n        'Employee Code': 'BFC2024001',\n        'First Name': 'John',\n        'Last Name': 'Doe', \n        'Department': 'IT',\n        'Position': 'System Administrator',\n        'Email': 'john.doe@bodycraft.com',\n        'Phone': '+91 9876543210',\n        'Join Date': '2024-01-15',\n        'Status': 'active'\n      }\n    ]\n    this.exportToExcel(templateData, 'Employee_Import_Template', 'Employees')\n  }\n\n  static downloadAssignmentTemplate() {\n    const templateData = [\n      {\n        'Asset ID': 'BFC001',\n        'Employee ID': '1',\n        'Assigned Date': '2024-01-15',\n        'Assignment Condition': 'excellent',\n        'Assignment Reason': 'New hire onboarding',\n        'Backup Details': 'Data backed up to NAS'\n      }\n    ]\n    this.exportToExcel(templateData, 'Assignment_Import_Template', 'Assignments')\n  }\n\n  static downloadMaintenanceTemplate() {\n    const templateData = [\n      {\n        'Asset ID': 'BFC001',\n        'Maintenance Type': 'preventive',\n        'Description': 'Regular maintenance check',\n        'Scheduled Date': '2024-01-15',\n        'Cost': '500',\n        'Technician Name': 'John Doe',\n        'Expected Parts': 'Thermal paste, cleaning materials'\n      }\n    ]\n    this.exportToExcel(templateData, 'Maintenance_Import_Template', 'Maintenance')\n  }\n\n  static downloadLocationTemplate() {\n    const templateData = [\n      {\n        'Outlet Name': 'BODYCRAFT Indiranagar',\n        'City': 'Bangalore',\n        'State': 'Karnataka',\n        'Address': '100 Feet Road, Indiranagar',\n        'Manager Name': 'John Doe',\n        'Contact Details': '+91 9876543210'\n      }\n    ]\n    this.exportToExcel(templateData, 'Location_Import_Template', 'Locations')\n  }\n\n  // Validate and transform assignment data\n  static validateAssignmentData(data: any[]): { valid: any[], errors: string[] } {\n    const valid: any[] = []\n    const errors: string[] = []\n\n    data.forEach((row, index) => {\n      const rowNumber = index + 2\n\n      if (!row['Asset ID']) {\n        errors.push(`Row ${rowNumber}: Asset ID is required`)\n        return\n      }\n      if (!row['Employee ID']) {\n        errors.push(`Row ${rowNumber}: Employee ID is required`)\n        return\n      }\n      if (!row['Assigned Date']) {\n        errors.push(`Row ${rowNumber}: Assigned Date is required`)\n        return\n      }\n\n      const transformedRow = {\n        assetId: row['Asset ID'].toString().trim(),\n        employeeId: parseInt(row['Employee ID']),\n        assignedDate: new Date(row['Assigned Date']).toISOString(),\n        assignmentCondition: row['Assignment Condition'] || 'good',\n        assignmentReason: row['Assignment Reason'] || '',\n        backupDetails: row['Backup Details'] || ''\n      }\n\n      valid.push(transformedRow)\n    })\n\n    return { valid, errors }\n  }\n\n  // Validate and transform maintenance data\n  static validateMaintenanceData(data: any[]): { valid: any[], errors: string[] } {\n    const valid: any[] = []\n    const errors: string[] = []\n\n    data.forEach((row, index) => {\n      const rowNumber = index + 2\n\n      if (!row['Asset ID']) {\n        errors.push(`Row ${rowNumber}: Asset ID is required`)\n        return\n      }\n      if (!row['Maintenance Type']) {\n        errors.push(`Row ${rowNumber}: Maintenance Type is required`)\n        return\n      }\n      if (!row['Description']) {\n        errors.push(`Row ${rowNumber}: Description is required`)\n        return\n      }\n      if (!row['Scheduled Date']) {\n        errors.push(`Row ${rowNumber}: Scheduled Date is required`)\n        return\n      }\n\n      const transformedRow = {\n        assetId: row['Asset ID'].toString().trim(),\n        maintenanceType: row['Maintenance Type'].toLowerCase(),\n        description: row['Description'],\n        scheduledDate: new Date(row['Scheduled Date']).toISOString().split('T')[0],\n        cost: row['Cost'] ? parseFloat(row['Cost']) : null,\n        technicianName: row['Technician Name'] || null,\n        expectedParts: row['Expected Parts'] || null\n      }\n\n      valid.push(transformedRow)\n    })\n\n    return { valid, errors }\n  }\n\n  // Validate and transform location data\n  static validateLocationData(data: any[]): { valid: any[], errors: string[] } {\n    const valid: any[] = []\n    const errors: string[] = []\n\n    data.forEach((row, index) => {\n      const rowNumber = index + 2\n\n      if (!row['Outlet Name']) {\n        errors.push(`Row ${rowNumber}: Outlet Name is required`)\n        return\n      }\n      if (!row['City']) {\n        errors.push(`Row ${rowNumber}: City is required`)\n        return\n      }\n      if (!row['State']) {\n        errors.push(`Row ${rowNumber}: State is required`)\n        return\n      }\n      if (!row['Manager Name']) {\n        errors.push(`Row ${rowNumber}: Manager Name is required`)\n        return\n      }\n\n      const transformedRow = {\n        outletName: row['Outlet Name'],\n        city: row['City'],\n        state: row['State'],\n        address: row['Address'] || '',\n        managerName: row['Manager Name'],\n        contactDetails: row['Contact Details'] || ''\n      }\n\n      valid.push(transformedRow)\n    })\n\n    return { valid, errors }\n  }\n\n  private static exportToExcel(data: any[], filename: string, worksheetName: string) {\n    const worksheet = XLSX.utils.json_to_sheet(data)\n    const workbook = XLSX.utils.book_new()\n    XLSX.utils.book_append_sheet(workbook, worksheet, worksheetName)\n    \n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' })\n    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' })\n    \n    saveAs(blob, `${filename}.xlsx`)\n  }\n}","size_bytes":20403},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/assets.tsx":{"content":"import { useState, useEffect } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { useLocation } from \"wouter\"\nimport { \n  Laptop, \n  Monitor, \n  Smartphone, \n  Plus, \n  Search, \n  Filter, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Package,\n  MapPin,\n  User,\n  Calendar,\n  AlertCircle,\n  CheckCircle,\n  Clock,\n  XCircle,\n  Computer,\n  ChevronDown,\n  ChevronUp,\n  X,\n  SlidersHorizontal,\n  Building2,\n  FileText\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { ExcelExporter, ExcelImporter } from \"@/lib/excel\"\nimport { SidebarTrigger } from \"@/components/ui/sidebar\"\n\n// Asset type icons mapping\nconst assetTypeIcons: Record<string, any> = {\n  Laptop: Laptop,\n  Desktop: Computer,\n  Monitor: Monitor,\n  Mobile: Smartphone,\n  Tablet: Smartphone,\n  Router: Package,\n  Switch: Package,\n  Printer: Package,\n  UPS: Package,\n  default: Package\n}\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  available: \"bg-green-400\",\n  assigned: \"bg-blue-400\", \n  maintenance: \"bg-yellow-400\",\n  retired: \"bg-red-400\"\n}\n\n// Condition color mapping\nconst conditionColors: Record<string, string> = {\n  excellent: \"bg-green-400\",\n  good: \"bg-blue-400\",\n  fair: \"bg-yellow-400\", \n  poor: \"bg-red-400\"\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  serviceTag: string | null\n  assetType: string\n  purchaseDate: string | null\n  warrantyExpiry: string | null\n  status: \"available\" | \"assigned\" | \"maintenance\" | \"retired\"\n  condition: \"excellent\" | \"good\" | \"fair\" | \"poor\"\n  locationId: number | null\n  departmentId: number | null\n  physicalLocation: string | null\n  floor: string | null\n  ownershipType: \"company\" | \"rented\" | \"personal\"\n  assignmentType: \"person\" | \"outlet\"\n  currentUserId: number | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\ninterface Employee {\n  id: number\n  employeeCode: string\n  firstName: string\n  lastName: string\n  department: string\n}\n\nexport default function AssetsPage() {\n  const [location] = useLocation()\n  \n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [conditionFilter, setConditionFilter] = useState<string>(\"all\")\n  const [ownershipFilter, setOwnershipFilter] = useState<string>(\"all\")\n  const [departmentFilter, setDepartmentFilter] = useState<string>(\"all\")\n  \n  // Update filters when URL changes\n  useEffect(() => {\n    const handleUrlChange = () => {\n      const params = new URLSearchParams(window.location.search)\n      const newType = params.get('type')\n      const newStatus = params.get('status')\n      const action = params.get('action')\n      \n      if (newStatus) {\n        setStatusFilter(newStatus)\n      } else if (params.toString() === '' || !params.has('status')) {\n        setStatusFilter(\"all\")\n      }\n      \n      if (newType) {\n        setTypeFilter(newType)\n      } else if (params.toString() === '' || !params.has('type')) {\n        setTypeFilter(\"all\")\n      }\n\n      // Open create dialog if action=create\n      if (action === 'create') {\n        setIsCreateDialogOpen(true)\n        // Clean up URL without reloading, preserving other params\n        params.delete('action')\n        const newUrl = params.toString() \n          ? `${window.location.pathname}?${params.toString()}`\n          : window.location.pathname\n        window.history.replaceState({}, '', newUrl)\n      }\n    }\n    \n    handleUrlChange()\n    window.addEventListener('popstate', handleUrlChange)\n    \n    return () => {\n      window.removeEventListener('popstate', handleUrlChange)\n    }\n  }, [location])\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false)\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedAsset, setSelectedAsset] = useState<Asset | null>(null)\n  const [expandedAssetId, setExpandedAssetId] = useState<string | null>(null)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [isImportDialogOpen, setIsImportDialogOpen] = useState(false)\n  const [importFile, setImportFile] = useState<File | null>(null)\n  const [importErrors, setImportErrors] = useState<string[]>([])\n  const [isImporting, setIsImporting] = useState(false)\n  \n  // Form state for create dialog\n  const [newAsset, setNewAsset] = useState({\n    assetId: '',\n    assetType: '',\n    brand: '',\n    modelName: '',\n    serviceTag: '',\n    locationId: '',\n    departmentId: '',\n    physicalLocation: '',\n    floor: '',\n    ownershipType: 'company',\n    assignmentType: 'person',\n    purchaseDate: '',\n    warrantyExpiry: '',\n    status: 'available',\n    condition: 'good'\n  })\n\n  // Form state for edit dialog\n  const [editAsset, setEditAsset] = useState({\n    assetType: '',\n    brand: '',\n    modelName: '',\n    serviceTag: '',\n    locationId: '',\n    departmentId: '',\n    physicalLocation: '',\n    floor: '',\n    ownershipType: 'company',\n    assignmentType: 'person',\n    purchaseDate: '',\n    warrantyExpiry: '',\n    status: 'available',\n    condition: 'good'\n  })\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Populate editAsset when selectedAsset changes\n  useEffect(() => {\n    if (selectedAsset && isEditDialogOpen) {\n      setEditAsset({\n        assetType: selectedAsset.assetType,\n        brand: selectedAsset.brand,\n        modelName: selectedAsset.modelName,\n        serviceTag: selectedAsset.serviceTag || '',\n        locationId: selectedAsset.locationId?.toString() || '',\n        departmentId: selectedAsset.departmentId?.toString() || '',\n        physicalLocation: selectedAsset.physicalLocation || '',\n        floor: selectedAsset.floor || '',\n        ownershipType: selectedAsset.ownershipType || 'company',\n        assignmentType: selectedAsset.assignmentType || 'person',\n        purchaseDate: selectedAsset.purchaseDate || '',\n        warrantyExpiry: selectedAsset.warrantyExpiry || '',\n        status: selectedAsset.status,\n        condition: selectedAsset.condition\n      })\n    }\n  }, [selectedAsset, isEditDialogOpen])\n\n  // Fetch data\n  const { data: assets, isLoading: assetsLoading } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  const { data: departments } = useQuery<any[]>({\n    queryKey: [\"/api/departments\"],\n  })\n\n  const { data: employees } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  })\n\n  // Get unique asset types for filter\n  const assetTypes = Array.from(new Set(assets?.map(asset => asset.assetType) || []))\n\n  // Filter assets\n  const filteredAssets = assets?.filter(asset => {\n    const matchesSearch = \n      asset.assetId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.modelName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (asset.serviceTag?.toLowerCase().includes(searchTerm.toLowerCase()) || false)\n    \n    const matchesStatus = statusFilter === \"all\" || asset.status === statusFilter\n    const matchesType = typeFilter === \"all\" || asset.assetType === typeFilter\n    const matchesLocation = locationFilter === \"all\" || asset.locationId?.toString() === locationFilter\n    const matchesCondition = conditionFilter === \"all\" || asset.condition === conditionFilter\n    const matchesOwnership = ownershipFilter === \"all\" || asset.ownershipType === ownershipFilter\n    const matchesDepartment = departmentFilter === \"all\" || asset.departmentId?.toString() === departmentFilter\n    \n    return matchesSearch && matchesStatus && matchesType && matchesLocation && matchesCondition && matchesOwnership && matchesDepartment\n  }) || []\n  \n  // Count active filters\n  const activeFiltersCount = [\n    statusFilter !== \"all\" ? 1 : 0,\n    typeFilter !== \"all\" ? 1 : 0,\n    locationFilter !== \"all\" ? 1 : 0,\n    conditionFilter !== \"all\" ? 1 : 0,\n    ownershipFilter !== \"all\" ? 1 : 0,\n    departmentFilter !== \"all\" ? 1 : 0,\n    searchTerm !== \"\" ? 1 : 0\n  ].reduce((sum, val) => sum + val, 0)\n  \n  // Reset all filters\n  const resetAllFilters = () => {\n    setSearchTerm(\"\")\n    setStatusFilter(\"all\")\n    setTypeFilter(\"all\")\n    setLocationFilter(\"all\")\n    setConditionFilter(\"all\")\n    setOwnershipFilter(\"all\")\n    setDepartmentFilter(\"all\")\n  }\n\n  // Create asset mutation\n  const createAssetMutation = useMutation({\n    mutationFn: async (assetData: any) => {\n      const response = await fetch('/api/assets', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(assetData),\n        credentials: 'include'\n      })\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(error.message || 'Failed to create asset')\n      }\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset created successfully\" })\n      resetNewAssetForm()\n      setIsCreateDialogOpen(false)\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to create asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Update asset mutation  \n  const updateAssetMutation = useMutation({\n    mutationFn: async ({ assetId, data }: { assetId: string, data: any }) => {\n      const response = await fetch(`/api/assets/${assetId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      })\n      if (!response.ok) throw new Error('Failed to update asset')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset updated successfully\" })\n      setIsEditDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Delete asset mutation\n  const deleteAssetMutation = useMutation({\n    mutationFn: async (assetId: string) => {\n      const response = await fetch(`/api/assets/${assetId}`, {\n        method: 'DELETE',\n      })\n      if (!response.ok) throw new Error('Failed to delete asset')\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset deleted successfully\" })\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Helper functions\n  const getLocationName = (locationId: number | null) => {\n    if (!locationId) return \"No location\"\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown location\"\n  }\n\n  const getEmployeeName = (employeeId: number | null) => {\n    if (!employeeId) return \"Unassigned\"\n    const employee = employees?.find(emp => emp.id === employeeId)\n    return employee ? `${employee.firstName} ${employee.lastName}` : \"Unknown employee\"\n  }\n\n  const getAssetIcon = (assetType: string) => {\n    const IconComponent = assetTypeIcons[assetType] || assetTypeIcons.default\n    return <IconComponent className=\"h-4 w-4\" />\n  }\n\n  const handleCreateAsset = (event: React.FormEvent) => {\n    event.preventDefault()\n    \n    // Validate required fields\n    if (!newAsset.assetId?.trim() || !newAsset.assetType?.trim() || !newAsset.brand?.trim() || !newAsset.modelName?.trim()) {\n      toast({ \n        title: \"Validation Error\", \n        description: \"Please fill in all required fields (Asset ID, Asset Type, Brand, Model Name)\", \n        variant: \"destructive\" \n      })\n      return\n    }\n    \n    const assetData = {\n      assetId: newAsset.assetId.trim(),\n      modelName: newAsset.modelName.trim(),\n      brand: newAsset.brand.trim(),\n      serviceTag: newAsset.serviceTag?.trim() || null,\n      assetType: newAsset.assetType,\n      purchaseDate: newAsset.purchaseDate || null,\n      warrantyExpiry: newAsset.warrantyExpiry || null,\n      status: newAsset.status,\n      condition: newAsset.condition,\n      locationId: newAsset.locationId ? parseInt(newAsset.locationId) : null,\n      departmentId: newAsset.departmentId ? parseInt(newAsset.departmentId) : null,\n      physicalLocation: newAsset.physicalLocation?.trim() || null,\n      floor: newAsset.floor?.trim() || null,\n      ownershipType: newAsset.ownershipType,\n      assignmentType: newAsset.assignmentType,\n    }\n\n    createAssetMutation.mutate(assetData)\n  }\n  \n  const resetNewAssetForm = () => {\n    setNewAsset({\n      assetId: '',\n      assetType: '',\n      brand: '',\n      modelName: '',\n      serviceTag: '',\n      locationId: '',\n      departmentId: '',\n      physicalLocation: '',\n      floor: '',\n      ownershipType: 'company',\n      assignmentType: 'person',\n      purchaseDate: '',\n      warrantyExpiry: '',\n      status: 'available',\n      condition: 'good'\n    })\n  }\n\n  const handleUpdateAsset = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedAsset) return\n    \n    // Validate required fields\n    if (!editAsset.assetType?.trim() || !editAsset.brand?.trim() || !editAsset.modelName?.trim()) {\n      toast({ \n        title: \"Validation Error\", \n        description: \"Please fill in all required fields (Asset Type, Brand, Model Name)\", \n        variant: \"destructive\" \n      })\n      return\n    }\n    \n    const assetData = {\n      modelName: editAsset.modelName.trim(),\n      brand: editAsset.brand.trim(),\n      serviceTag: editAsset.serviceTag?.trim() || null,\n      assetType: editAsset.assetType,\n      purchaseDate: editAsset.purchaseDate || null,\n      warrantyExpiry: editAsset.warrantyExpiry || null,\n      status: editAsset.status,\n      condition: editAsset.condition,\n      locationId: editAsset.locationId ? parseInt(editAsset.locationId) : null,\n      departmentId: editAsset.departmentId ? parseInt(editAsset.departmentId) : null,\n      physicalLocation: editAsset.physicalLocation?.trim() || null,\n      floor: editAsset.floor?.trim() || null,\n      ownershipType: editAsset.ownershipType,\n      assignmentType: editAsset.assignmentType,\n    }\n\n    updateAssetMutation.mutate({ assetId: selectedAsset.assetId, data: assetData })\n  }\n\n  // Excel Export Handler\n  const handleExportAssets = () => {\n    if (!filteredAssets || !locations) {\n      toast({ title: \"Error\", description: \"No data available to export\", variant: \"destructive\" })\n      return\n    }\n    \n    ExcelExporter.exportAssets(filteredAssets, locations)\n    toast({ title: \"Success\", description: `Exported ${filteredAssets.length} assets to Excel` })\n  }\n\n  // Excel Import Handler\n  const handleImportAssets = async () => {\n    if (!importFile) {\n      toast({ title: \"Error\", description: \"Please select a file to import\", variant: \"destructive\" })\n      return\n    }\n\n    setIsImporting(true)\n    setImportErrors([])\n\n    try {\n      // Parse Excel file\n      const data = await ExcelImporter.parseExcelFile(importFile)\n      \n      if (data.length === 0) {\n        toast({ title: \"Error\", description: \"The Excel file is empty\", variant: \"destructive\" })\n        setIsImporting(false)\n        return\n      }\n\n      // Validate data\n      const { valid, errors } = ExcelImporter.validateAssetData(data)\n      \n      if (errors.length > 0) {\n        setImportErrors(errors)\n        setIsImporting(false)\n        return\n      }\n\n      // Import valid assets\n      let successCount = 0\n      let errorCount = 0\n      \n      for (const assetData of valid) {\n        try {\n          const response = await fetch('/api/assets', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(assetData),\n          })\n          \n          if (response.ok) {\n            successCount++\n          } else {\n            errorCount++\n            const errorData = await response.json()\n            setImportErrors(prev => [...prev, `Asset ${assetData.assetId}: ${errorData.message || 'Import failed'}`])\n          }\n        } catch (error) {\n          errorCount++\n          setImportErrors(prev => [...prev, `Asset ${assetData.assetId}: Network error`])\n        }\n      }\n\n      // Refresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n\n      if (successCount > 0) {\n        toast({ \n          title: \"Import Complete\", \n          description: `Successfully imported ${successCount} assets${errorCount > 0 ? `, ${errorCount} failed` : ''}` \n        })\n        \n        if (errorCount === 0) {\n          setIsImportDialogOpen(false)\n          setImportFile(null)\n        }\n      } else {\n        toast({ title: \"Import Failed\", description: \"No assets were imported\", variant: \"destructive\" })\n      }\n\n    } catch (error) {\n      toast({ title: \"Error\", description: \"Failed to parse Excel file\", variant: \"destructive\" })\n      setImportErrors(['Failed to parse Excel file. Please ensure it\\'s a valid Excel file.'])\n    } finally {\n      setIsImporting(false)\n    }\n  }\n\n  if (assetsLoading) {\n    return (\n      <div className=\"p-6 space-y-6 animate-fade-in\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6 animate-fade-in\">\n      <SidebarTrigger data-testid=\"button-sidebar-toggle\" className=\"mb-4 text-white/80 hover:text-white hover:bg-white/10 rounded-md\" />\n      \n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight text-white\">Assets</h1>\n          <p className=\"text-white/70\">\n            Comprehensive inventory management and lifecycle tracking for enterprise resources\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={isImportDialogOpen} onOpenChange={setIsImportDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" className=\"gap-2\">\n                <Upload className=\"h-4 w-4\" />\n                Import Excel\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Import Assets from Excel</DialogTitle>\n                <DialogDescription>\n                  Bulk import enterprise resources using standardized Excel templates for efficient data onboarding\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"flex gap-2\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => ExcelImporter.downloadAssetTemplate()}\n                    className=\"gap-2\"\n                  >\n                    <Download className=\"h-4 w-4\" />\n                    Download Template\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"excel-file\">Excel File *</Label>\n                  <Input\n                    id=\"excel-file\"\n                    type=\"file\"\n                    accept=\".xlsx,.xls\"\n                    onChange={(e) => {\n                      const file = e.target.files?.[0]\n                      if (file) {\n                        setImportFile(file)\n                        setImportErrors([])\n                      }\n                    }}\n                  />\n                </div>\n                \n                {importErrors.length > 0 && (\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-red-600\">Import Errors:</Label>\n                    <div className=\"bg-red-50 p-3 rounded max-h-32 overflow-y-auto\">\n                      {importErrors.map((error, index) => (\n                        <div key={index} className=\"text-sm text-red-600\">• {error}</div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n              <DialogFooter>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsImportDialogOpen(false)\n                    setImportFile(null)\n                    setImportErrors([])\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleImportAssets}\n                  disabled={!importFile || isImporting}\n                >\n                  {isImporting ? \"Importing...\" : \"Import Assets\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n          <Button \n            variant=\"outline\" \n            className=\"gap-2\"\n            onClick={handleExportAssets}\n          >\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Asset\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Asset</DialogTitle>\n                <DialogDescription>\n                  Add enterprise resources with complete lifecycle tracking and warranty information\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateAsset} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assetId\">Asset ID *</Label>\n                    <Input\n                      id=\"assetId\"\n                      placeholder=\"BFC001\"\n                      required\n                      value={newAsset.assetId}\n                      onChange={(e) => setNewAsset({...newAsset, assetId: e.target.value})}\n                      data-testid=\"input-asset-id\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assetType\">Asset Type *</Label>\n                    <Select \n                      value={newAsset.assetType} \n                      onValueChange={(value) => setNewAsset({...newAsset, assetType: value})}\n                      required\n                    >\n                      <SelectTrigger data-testid=\"select-asset-type\">\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Laptop\">Laptop</SelectItem>\n                        <SelectItem value=\"Desktop\">Desktop</SelectItem>\n                        <SelectItem value=\"Monitor\">Monitor</SelectItem>\n                        <SelectItem value=\"Mobile\">Mobile</SelectItem>\n                        <SelectItem value=\"Tablet\">Tablet</SelectItem>\n                        <SelectItem value=\"Router\">Router</SelectItem>\n                        <SelectItem value=\"Switch\">Switch</SelectItem>\n                        <SelectItem value=\"Printer\">Printer</SelectItem>\n                        <SelectItem value=\"UPS\">UPS</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"brand\">Brand *</Label>\n                    <Input\n                      id=\"brand\"\n                      placeholder=\"Dell, HP, Lenovo...\"\n                      required\n                      value={newAsset.brand}\n                      onChange={(e) => setNewAsset({...newAsset, brand: e.target.value})}\n                      data-testid=\"input-brand\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"modelName\">Model Name *</Label>\n                    <Input\n                      id=\"modelName\"\n                      placeholder=\"ThinkPad E15, OptiPlex 3080...\"\n                      required\n                      value={newAsset.modelName}\n                      onChange={(e) => setNewAsset({...newAsset, modelName: e.target.value})}\n                      data-testid=\"input-model-name\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serviceTag\">Service Tag</Label>\n                    <Input\n                      id=\"serviceTag\"\n                      placeholder=\"Manufacturer service tag\"\n                      value={newAsset.serviceTag}\n                      onChange={(e) => setNewAsset({...newAsset, serviceTag: e.target.value})}\n                      data-testid=\"input-service-tag\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"locationId\">Location</Label>\n                    <Select \n                      value={newAsset.locationId} \n                      onValueChange={(value) => setNewAsset({...newAsset, locationId: value})}\n                    >\n                      <SelectTrigger data-testid=\"select-location\">\n                        <SelectValue placeholder=\"Select location\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {locations?.map(location => (\n                          <SelectItem key={location.id} value={location.id.toString()}>\n                            {location.outletName}, {location.city}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"departmentId\">Department</Label>\n                    <Select \n                      value={newAsset.departmentId} \n                      onValueChange={(value) => setNewAsset({...newAsset, departmentId: value})}\n                    >\n                      <SelectTrigger data-testid=\"select-department\">\n                        <SelectValue placeholder=\"Select department\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {departments?.filter(d => d.isActive).map(dept => (\n                          <SelectItem key={dept.id} value={dept.id.toString()}>\n                            {dept.name} ({dept.type})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"physicalLocation\">Physical Location</Label>\n                    <Input\n                      id=\"physicalLocation\"\n                      placeholder=\"Reception, Front Desk, Room 1...\"\n                      value={newAsset.physicalLocation}\n                      onChange={(e) => setNewAsset({...newAsset, physicalLocation: e.target.value})}\n                      data-testid=\"input-physical-location\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"floor\">Floor</Label>\n                    <Input\n                      id=\"floor\"\n                      placeholder=\"Ground Floor, 1st Floor...\"\n                      value={newAsset.floor}\n                      onChange={(e) => setNewAsset({...newAsset, floor: e.target.value})}\n                      data-testid=\"input-floor\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"ownershipType\">Ownership Type</Label>\n                    <Select \n                      value={newAsset.ownershipType} \n                      onValueChange={(value) => setNewAsset({...newAsset, ownershipType: value})}\n                    >\n                      <SelectTrigger data-testid=\"select-ownership-type\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"company\">Company Owned</SelectItem>\n                        <SelectItem value=\"rented\">Rented</SelectItem>\n                        <SelectItem value=\"personal\">Personal</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assignmentType\">Assignment Type</Label>\n                    <Select \n                      value={newAsset.assignmentType} \n                      onValueChange={(value) => setNewAsset({...newAsset, assignmentType: value})}\n                    >\n                      <SelectTrigger data-testid=\"select-assignment-type\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"person\">Assigned to Person</SelectItem>\n                        <SelectItem value=\"outlet\">Assigned to Outlet</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"purchaseDate\">Purchase Date</Label>\n                    <Input\n                      id=\"purchaseDate\"\n                      type=\"date\"\n                      value={newAsset.purchaseDate}\n                      onChange={(e) => setNewAsset({...newAsset, purchaseDate: e.target.value})}\n                      data-testid=\"input-purchase-date\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"warrantyExpiry\">Warranty Expiry</Label>\n                    <Input\n                      id=\"warrantyExpiry\"\n                      type=\"date\"\n                      value={newAsset.warrantyExpiry}\n                      onChange={(e) => setNewAsset({...newAsset, warrantyExpiry: e.target.value})}\n                      data-testid=\"input-warranty-expiry\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"status\">Status</Label>\n                    <Select \n                      value={newAsset.status} \n                      onValueChange={(value) => setNewAsset({...newAsset, status: value})}\n                    >\n                      <SelectTrigger data-testid=\"select-status\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"available\">Available</SelectItem>\n                        <SelectItem value=\"assigned\">Assigned</SelectItem>\n                        <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                        <SelectItem value=\"retired\">Retired</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"condition\">Condition</Label>\n                    <Select \n                      value={newAsset.condition} \n                      onValueChange={(value) => setNewAsset({...newAsset, condition: value})}\n                    >\n                      <SelectTrigger data-testid=\"select-condition\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"excellent\">Excellent</SelectItem>\n                        <SelectItem value=\"good\">Good</SelectItem>\n                        <SelectItem value=\"fair\">Fair</SelectItem>\n                        <SelectItem value=\"poor\">Poor</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => {\n                      resetNewAssetForm()\n                      setIsCreateDialogOpen(false)\n                    }}\n                    data-testid=\"button-cancel-create\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={\n                      createAssetMutation.isPending || \n                      !newAsset.assetId?.trim() || \n                      !newAsset.assetType?.trim() || \n                      !newAsset.brand?.trim() || \n                      !newAsset.modelName?.trim()\n                    }\n                    data-testid=\"button-submit-create\"\n                  >\n                    {createAssetMutation.isPending ? \"Creating...\" : \"Create Asset\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Assets</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{assets?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across {locations?.length || 0} locations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Available</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">\n              {assets?.filter(a => a.status === 'available').length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Ready for assignment\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Assigned</CardTitle>\n            <User className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">\n              {assets?.filter(a => a.status === 'assigned').length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently in use\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Maintenance</CardTitle>\n            <Clock className=\"h-4 w-4 text-yellow-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">\n              {assets?.filter(a => a.status === 'maintenance').length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Under service\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Advanced Search & Filters */}\n      <Card className=\"glass-card border-0\">\n        <CardContent className=\"p-6 space-y-6\">\n          {/* Search Bar with Clear */}\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground/60\" />\n              <Input\n                placeholder=\"Search by Asset ID, Model, Brand, Service Tag, or Location...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-12 pr-12 h-12 text-base bg-background/50 backdrop-blur-sm border-border/40 focus:border-primary/50 transition-all\"\n                data-testid=\"input-search-assets\"\n              />\n              {searchTerm && (\n                <button\n                  onClick={() => setSearchTerm(\"\")}\n                  className=\"absolute right-4 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors\"\n                  data-testid=\"button-clear-search\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </button>\n              )}\n            </div>\n            \n            <Button\n              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n              variant=\"outline\"\n              className=\"h-12 gap-2 min-w-[180px] backdrop-blur-sm border-border/40 hover:border-primary/50 transition-all\"\n              data-testid=\"button-toggle-advanced-filters\"\n            >\n              <SlidersHorizontal className=\"h-4 w-4\" />\n              Advanced Filters\n              {activeFiltersCount > 0 && (\n                <Badge variant=\"default\" className=\"ml-1 px-2 py-0.5 text-xs\">\n                  {activeFiltersCount}\n                </Badge>\n              )}\n            </Button>\n          </div>\n\n          {/* Quick Filters */}\n          <div className=\"flex flex-wrap gap-2\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-[160px] backdrop-blur-sm border-border/40 hover:border-primary/50 transition-all\" data-testid=\"select-filter-status\">\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n                  <SelectValue placeholder=\"Status\" />\n                </div>\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"available\">✓ Available</SelectItem>\n                <SelectItem value=\"assigned\">👤 Assigned</SelectItem>\n                <SelectItem value=\"maintenance\">🔧 Maintenance</SelectItem>\n                <SelectItem value=\"retired\">❌ Retired</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-[160px] backdrop-blur-sm border-border/40 hover:border-primary/50 transition-all\" data-testid=\"select-filter-type\">\n                <div className=\"flex items-center gap-2\">\n                  <Package className=\"h-4 w-4 text-muted-foreground\" />\n                  <SelectValue placeholder=\"Type\" />\n                </div>\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                {assetTypes.map(type => (\n                  <SelectItem key={type} value={type}>{type}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={locationFilter} onValueChange={setLocationFilter}>\n              <SelectTrigger className=\"w-[200px] backdrop-blur-sm border-border/40 hover:border-primary/50 transition-all\" data-testid=\"select-filter-location\">\n                <div className=\"flex items-center gap-2\">\n                  <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n                  <SelectValue placeholder=\"Location\" />\n                </div>\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Locations</SelectItem>\n                {locations?.map(location => (\n                  <SelectItem key={location.id} value={location.id.toString()}>\n                    {location.outletName}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            {activeFiltersCount > 0 && (\n              <Button\n                onClick={resetAllFilters}\n                variant=\"ghost\"\n                className=\"gap-2 text-muted-foreground hover:text-foreground backdrop-blur-sm\"\n                data-testid=\"button-reset-filters\"\n              >\n                <X className=\"h-4 w-4\" />\n                Clear All\n              </Button>\n            )}\n          </div>\n\n          {/* Advanced Filters Panel */}\n          {showAdvancedFilters && (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 p-4 rounded-lg bg-muted/10 backdrop-blur-sm border border-border/40 animate-fade-in\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <Filter className=\"h-4 w-4 text-primary\" />\n                  Condition\n                </label>\n                <Select value={conditionFilter} onValueChange={setConditionFilter}>\n                  <SelectTrigger className=\"backdrop-blur-sm border-border/40\" data-testid=\"select-filter-condition\">\n                    <SelectValue placeholder=\"All Conditions\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Conditions</SelectItem>\n                    <SelectItem value=\"excellent\">⭐ Excellent</SelectItem>\n                    <SelectItem value=\"good\">👍 Good</SelectItem>\n                    <SelectItem value=\"fair\">⚠️ Fair</SelectItem>\n                    <SelectItem value=\"poor\">❗ Poor</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <FileText className=\"h-4 w-4 text-primary\" />\n                  Ownership\n                </label>\n                <Select value={ownershipFilter} onValueChange={setOwnershipFilter}>\n                  <SelectTrigger className=\"backdrop-blur-sm border-border/40\" data-testid=\"select-filter-ownership\">\n                    <SelectValue placeholder=\"All Types\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Ownership</SelectItem>\n                    <SelectItem value=\"company\">🏢 Company Owned</SelectItem>\n                    <SelectItem value=\"rented\">📋 Rented</SelectItem>\n                    <SelectItem value=\"personal\">👤 Personal</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <User className=\"h-4 w-4 text-primary\" />\n                  Department\n                </label>\n                <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n                  <SelectTrigger className=\"backdrop-blur-sm border-border/40\" data-testid=\"select-filter-department\">\n                    <SelectValue placeholder=\"All Departments\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Departments</SelectItem>\n                    {departments?.map(dept => (\n                      <SelectItem key={dept.id} value={dept.id.toString()}>\n                        {dept.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n\n          {/* Results Summary */}\n          <div className=\"flex items-center justify-between pt-2 border-t border-border/20\">\n            <div className=\"text-sm text-muted-foreground\">\n              Showing {filteredAssets.length} of {assets?.length || 0} assets\n            </div>\n            \n            {activeFiltersCount > 0 && (\n              <div className=\"flex gap-1\">\n                {statusFilter !== \"all\" && (\n                  <Badge variant=\"secondary\" className=\"gap-1\">\n                    Status: {statusFilter}\n                    <X className=\"h-3 w-3 cursor-pointer\" onClick={() => setStatusFilter(\"all\")} />\n                  </Badge>\n                )}\n                {typeFilter !== \"all\" && (\n                  <Badge variant=\"secondary\" className=\"gap-1\">\n                    Type: {typeFilter}\n                    <X className=\"h-3 w-3 cursor-pointer\" onClick={() => setTypeFilter(\"all\")} />\n                  </Badge>\n                )}\n                {locationFilter !== \"all\" && (\n                  <Badge variant=\"secondary\" className=\"gap-1\">\n                    Location: {locations?.find(l => l.id.toString() === locationFilter)?.outletName}\n                    <X className=\"h-3 w-3 cursor-pointer\" onClick={() => setLocationFilter(\"all\")} />\n                  </Badge>\n                )}\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Assets Table */}\n      <Card className=\"glass-card border-0 glass-card border-0\">\n        <CardContent className=\"p-0 table-container-stable\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Asset Details</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Assigned To</TableHead>\n              </TableRow>\n            </TableHeader>\n              <TableBody>\n                {filteredAssets && filteredAssets.length > 0 ? filteredAssets.flatMap((asset) => {\n                  const isExpanded = expandedAssetId === asset.assetId\n                  const rows = [\n                    <TableRow \n                      key={`main-${asset.assetId}`}\n                      onClick={() => setExpandedAssetId(isExpanded ? null : asset.assetId)}\n                      className=\"hover:bg-muted/20 transition-all duration-150 border-b border-border/30 group cursor-pointer\"\n                      data-testid={`row-asset-${asset.assetId}`}\n                    >\n                        {/* Asset Details with Chevron */}\n                        <TableCell className=\"py-3 px-4\">\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"flex items-center justify-center w-8 h-8 bg-muted/50 rounded-full group-hover:bg-muted transition-colors\">\n                              {isExpanded ? (\n                                <ChevronUp className=\"h-4 w-4\" />\n                              ) : (\n                                <ChevronDown className=\"h-4 w-4\" />\n                              )}\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"p-2 rounded-lg bg-primary/10 text-primary flex-shrink-0 group-hover:bg-primary/15 transition-colors\">\n                                {getAssetIcon(asset.assetType)}\n                              </div>\n                              <div className=\"min-w-0\">\n                                <div className=\"font-semibold text-sm text-foreground\" data-testid={`text-asset-id-${asset.assetId}`}>\n                                  {asset.assetId}\n                                </div>\n                                <p className=\"text-sm text-muted-foreground truncate\">\n                                  {asset.brand} {asset.modelName}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n\n                        {/* Asset Type */}\n                        <TableCell className=\"py-3 px-3\">\n                          <span className=\"text-sm font-medium\" data-testid={`badge-type-${asset.assetId}`}>\n                            {asset.assetType}\n                          </span>\n                        </TableCell>\n\n                        {/* Status */}\n                        <TableCell className=\"py-3 px-3\">\n                          <div className=\"flex items-center gap-2\">\n                            <div className={`w-2 h-2 rounded-full ${statusColors[asset.status]}`} />\n                            <span className=\"text-sm font-medium capitalize\" data-testid={`text-status-${asset.assetId}`}>\n                              {asset.status}\n                            </span>\n                          </div>\n                        </TableCell>\n\n                        {/* Location */}\n                        <TableCell className=\"py-3 px-3\">\n                          <div className=\"flex items-center gap-2\">\n                            <MapPin className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n                            <span className=\"text-sm truncate\" data-testid={`text-location-${asset.assetId}`}>\n                              {getLocationName(asset.locationId)}\n                            </span>\n                          </div>\n                        </TableCell>\n\n                        {/* Assigned To */}\n                        <TableCell className=\"py-3 px-3\">\n                          <div className=\"flex items-center gap-2\">\n                            <User className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n                            <span className=\"text-sm truncate\" data-testid={`text-assigned-${asset.assetId}`}>\n                              {asset.assignmentType === 'outlet' \n                                ? getLocationName(asset.locationId) \n                                : getEmployeeName(asset.currentUserId)}\n                            </span>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                  ];\n\n                  if (isExpanded) {\n                    rows.push(\n                      <TableRow key={`expanded-${asset.assetId}`} className=\"bg-muted/10 hover:bg-muted/10\">\n                        <TableCell colSpan={5} className=\"p-6\">\n                            <div className=\"grid grid-cols-3 gap-6\">\n                              {/* Column 1 - Basic Info */}\n                              <div className=\"space-y-4\">\n                                <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Basic Information</h4>\n                                  <div>\n                                    <Label className=\"text-xs text-muted-foreground\">Asset Type</Label>\n                                    <p className=\"text-sm font-medium mt-1\">{asset.assetType}</p>\n                                  </div>\n                                  <div>\n                                    <Label className=\"text-xs text-muted-foreground\">Brand</Label>\n                                    <p className=\"text-sm font-medium mt-1\">{asset.brand}</p>\n                                  </div>\n                                  <div>\n                                    <Label className=\"text-xs text-muted-foreground\">Model</Label>\n                                    <p className=\"text-sm font-medium mt-1\">{asset.modelName}</p>\n                                  </div>\n                                  <div>\n                                    <Label className=\"text-xs text-muted-foreground\">Service Tag</Label>\n                                    <p className=\"text-sm font-mono font-medium mt-1\">{asset.serviceTag || \"—\"}</p>\n                                  </div>\n                                  <div>\n                                    <Label className=\"text-xs text-muted-foreground\">Ownership Type</Label>\n                                    <p className=\"text-sm font-medium mt-1\">\n                                      {asset.ownershipType === 'company' ? 'Company Owned' : \n                                       asset.ownershipType === 'rented' ? 'Rented' : \n                                       asset.ownershipType === 'personal' ? 'Personal' : '—'}\n                                    </p>\n                                  </div>\n                                </div>\n\n                                {/* Column 2 - Status & Location */}\n                                <div className=\"space-y-4\">\n                                  <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Status & Location</h4>\n                                  <div>\n                                    <Label className=\"text-xs text-muted-foreground\">Status</Label>\n                                    <div className=\"flex items-center gap-2 mt-1\">\n                                      <div className={`w-2 h-2 rounded-full ${statusColors[asset.status]}`} />\n                                      <span className=\"text-sm font-medium capitalize\">{asset.status}</span>\n                                    </div>\n                                  </div>\n                                  <div>\n                                    <Label className=\"text-xs text-muted-foreground\">Condition</Label>\n                                    <div className=\"flex items-center gap-2 mt-1\">\n                                      <div className={`w-2 h-2 rounded-full ${conditionColors[asset.condition]}`} />\n                                      <span className=\"text-sm font-medium capitalize\">{asset.condition}</span>\n                                    </div>\n                                  </div>\n                                  <div>\n                                    <Label className=\"text-xs text-muted-foreground\">Outlet Location</Label>\n                                    <p className=\"text-sm font-medium mt-1\">{getLocationName(asset.locationId)}</p>\n                                  </div>\n                                  <div>\n                                    <Label className=\"text-xs text-muted-foreground\">Physical Location</Label>\n                                    <p className=\"text-sm font-medium mt-1\">{asset.physicalLocation || \"—\"}</p>\n                                  </div>\n                                  <div>\n                                    <Label className=\"text-xs text-muted-foreground\">Floor</Label>\n                                    <p className=\"text-sm font-medium mt-1\">{asset.floor || \"—\"}</p>\n                                  </div>\n                                </div>\n\n                                {/* Column 3 - Assignment & Dates */}\n                                <div className=\"space-y-4\">\n                                  <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Assignment & Timeline</h4>\n                                  <div>\n                                    <Label className=\"text-xs text-muted-foreground\">Department</Label>\n                                    <p className=\"text-sm font-medium mt-1\">\n                                      {asset.departmentId \n                                        ? departments?.find(d => d.id === asset.departmentId)?.name || \"—\"\n                                        : \"—\"}\n                                    </p>\n                                  </div>\n                                  <div>\n                                    <Label className=\"text-xs text-muted-foreground\">Assignment Type</Label>\n                                    <p className=\"text-sm font-medium mt-1\">\n                                      {asset.assignmentType === 'person' ? 'Assigned to Person' : 'Assigned to Outlet'}\n                                    </p>\n                                  </div>\n                                  <div>\n                                    <Label className=\"text-xs text-muted-foreground\">Assigned To</Label>\n                                    <p className=\"text-sm font-medium mt-1\">\n                                      {asset.assignmentType === 'outlet' \n                                        ? getLocationName(asset.locationId) \n                                        : getEmployeeName(asset.currentUserId)}\n                                    </p>\n                                  </div>\n                                  <div>\n                                    <Label className=\"text-xs text-muted-foreground\">Purchase Date</Label>\n                                    <p className=\"text-sm font-medium mt-1\">{asset.purchaseDate || \"—\"}</p>\n                                  </div>\n                                  <div>\n                                    <Label className=\"text-xs text-muted-foreground\">Warranty Expiry</Label>\n                                    <p className=\"text-sm font-medium mt-1\">{asset.warrantyExpiry || \"—\"}</p>\n                                  </div>\n                                </div>\n                              </div>\n\n                            <div className=\"flex gap-2 mt-6 pt-4 border-t border-border/50\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.stopPropagation()\n                                  setSelectedAsset(asset)\n                                  setIsEditDialogOpen(true)\n                                }}\n                                data-testid={`button-edit-asset-${asset.assetId}`}\n                              >\n                                <Edit className=\"mr-2 h-4 w-4\" />\n                                Edit Asset\n                              </Button>\n                              <Button\n                                variant=\"destructive\"\n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.stopPropagation()\n                                  if (window.confirm(`Are you sure you want to delete asset ${asset.assetId}? This action cannot be undone.`)) {\n                                    deleteAssetMutation.mutate(asset.assetId)\n                                  }\n                                }}\n                                data-testid={`button-delete-asset-${asset.assetId}`}\n                              >\n                                <Trash2 className=\"mr-2 h-4 w-4\" />\n                                Delete Asset\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                    )\n                  }\n\n                  return rows\n                }) : (\n                  <TableRow>\n                    <TableCell colSpan={5} className=\"text-center py-12 text-muted-foreground\">\n                      <Package className=\"mx-auto h-12 w-12 mb-4 opacity-40\" />\n                      <p className=\"text-lg font-medium mb-1\">No assets found</p>\n                      <p className=\"text-sm\">Try adjusting your filters or create a new asset</p>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n        </CardContent>\n      </Card>\n\n      {/* Edit Asset Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Asset</DialogTitle>\n            <DialogDescription>\n              Modify specifications, status, warranty details, and location assignment for {selectedAsset?.assetId}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedAsset && (\n            <form onSubmit={handleUpdateAsset} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-assetType\">Asset Type *</Label>\n                  <Select value={editAsset.assetType} onValueChange={(value) => setEditAsset({ ...editAsset, assetType: value })} required>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Laptop\">Laptop</SelectItem>\n                      <SelectItem value=\"Desktop\">Desktop</SelectItem>\n                      <SelectItem value=\"Monitor\">Monitor</SelectItem>\n                      <SelectItem value=\"Mobile\">Mobile</SelectItem>\n                      <SelectItem value=\"Tablet\">Tablet</SelectItem>\n                      <SelectItem value=\"Router\">Router</SelectItem>\n                      <SelectItem value=\"Switch\">Switch</SelectItem>\n                      <SelectItem value=\"Printer\">Printer</SelectItem>\n                      <SelectItem value=\"UPS\">UPS</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-brand\">Brand *</Label>\n                  <Input\n                    id=\"edit-brand\"\n                    value={editAsset.brand}\n                    onChange={(e) => setEditAsset({ ...editAsset, brand: e.target.value })}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-modelName\">Model Name *</Label>\n                  <Input\n                    id=\"edit-modelName\"\n                    value={editAsset.modelName}\n                    onChange={(e) => setEditAsset({ ...editAsset, modelName: e.target.value })}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-serviceTag\">Service Tag</Label>\n                  <Input\n                    id=\"edit-serviceTag\"\n                    value={editAsset.serviceTag}\n                    onChange={(e) => setEditAsset({ ...editAsset, serviceTag: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-locationId\">Location</Label>\n                  <Select value={editAsset.locationId} onValueChange={(value) => setEditAsset({ ...editAsset, locationId: value })}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select location\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {locations?.map(location => (\n                        <SelectItem key={location.id} value={location.id.toString()}>\n                          {location.outletName}, {location.city}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-purchaseDate\">Purchase Date</Label>\n                  <Input\n                    id=\"edit-purchaseDate\"\n                    type=\"date\"\n                    value={editAsset.purchaseDate}\n                    onChange={(e) => setEditAsset({ ...editAsset, purchaseDate: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-warrantyExpiry\">Warranty Expiry</Label>\n                  <Input\n                    id=\"edit-warrantyExpiry\"\n                    type=\"date\"\n                    value={editAsset.warrantyExpiry}\n                    onChange={(e) => setEditAsset({ ...editAsset, warrantyExpiry: e.target.value })}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-status\">Status</Label>\n                  <Select value={editAsset.status} onValueChange={(value: any) => setEditAsset({ ...editAsset, status: value })}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"available\">Available</SelectItem>\n                      <SelectItem value=\"assigned\">Assigned</SelectItem>\n                      <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                      <SelectItem value=\"retired\">Retired</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-condition\">Condition</Label>\n                <Select value={editAsset.condition} onValueChange={(value: any) => setEditAsset({ ...editAsset, condition: value })}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"excellent\">Excellent</SelectItem>\n                    <SelectItem value=\"good\">Good</SelectItem>\n                    <SelectItem value=\"fair\">Fair</SelectItem>\n                    <SelectItem value=\"poor\">Poor</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-departmentId\">Department</Label>\n                <Select value={editAsset.departmentId} onValueChange={(value) => setEditAsset({ ...editAsset, departmentId: value })}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select department\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {departments?.filter(d => d.isActive).map(dept => (\n                      <SelectItem key={dept.id} value={dept.id.toString()}>\n                        {dept.name} ({dept.type})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-physicalLocation\">Physical Location</Label>\n                  <Input\n                    id=\"edit-physicalLocation\"\n                    placeholder=\"Reception, Front Desk, Room 1...\"\n                    value={editAsset.physicalLocation}\n                    onChange={(e) => setEditAsset({ ...editAsset, physicalLocation: e.target.value })}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-floor\">Floor</Label>\n                  <Input\n                    id=\"edit-floor\"\n                    placeholder=\"Ground Floor, 1st Floor...\"\n                    value={editAsset.floor}\n                    onChange={(e) => setEditAsset({ ...editAsset, floor: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-ownershipType\">Ownership Type</Label>\n                  <Select value={editAsset.ownershipType} onValueChange={(value: any) => setEditAsset({ ...editAsset, ownershipType: value })}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"company\">Company Owned</SelectItem>\n                      <SelectItem value=\"rented\">Rented</SelectItem>\n                      <SelectItem value=\"personal\">Personal</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-assignmentType\">Assignment Type</Label>\n                  <Select value={editAsset.assignmentType} onValueChange={(value: any) => setEditAsset({ ...editAsset, assignmentType: value })}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"person\">Assigned to Person</SelectItem>\n                      <SelectItem value=\"outlet\">Assigned to Outlet</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsEditDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateAssetMutation.isPending}>\n                  {updateAssetMutation.isPending ? \"Updating...\" : \"Update Asset\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":71400},"client/src/pages/assignments.tsx":{"content":"import { useState, useEffect } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Calendar,\n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  User,\n  Laptop,\n  ArrowRightLeft,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Undo,\n  Package,\n  MapPin,\n  AlertTriangle,\n  ChevronDown,\n  ChevronUp,\n  X,\n  SlidersHorizontal,\n  Filter\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { SidebarTrigger } from \"@/components/ui/sidebar\"\nimport { useUser } from \"@/hooks/use-user\"\nimport { ExcelExporter, ExcelImporter } from \"@/lib/excel\"\n\ninterface Assignment {\n  assetId: string\n  employeeId: number\n  assignedDate: string\n  returnedDate: string | null\n  assignmentReason: string\n  returnReason: string | null\n  conditionOnAssignment: \"excellent\" | \"good\" | \"fair\" | \"poor\"\n  conditionOnReturn: \"excellent\" | \"good\" | \"fair\" | \"poor\" | null\n  backupDetails: string | null\n  createdBy: number\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  assetType: string\n  status: \"available\" | \"assigned\" | \"maintenance\" | \"retired\"\n  condition: \"excellent\" | \"good\" | \"fair\" | \"poor\"\n  locationId: number | null\n  currentUserId: number | null\n}\n\ninterface Employee {\n  id: number\n  employeeCode: string\n  firstName: string\n  lastName: string\n  department: string\n  designation: string\n  status: \"active\" | \"inactive\" | \"on_leave\"\n  locationId: number | null\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\nexport default function AssignmentsPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [assetTypeFilter, setAssetTypeFilter] = useState<string>(\"all\")\n  const [departmentFilter, setDepartmentFilter] = useState<string>(\"all\")\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false)\n  const [isAssignDialogOpen, setIsAssignDialogOpen] = useState(false)\n  const [isReturnDialogOpen, setIsReturnDialogOpen] = useState(false)\n  const [isTransferDialogOpen, setIsTransferDialogOpen] = useState(false)\n  const [selectedAssignment, setSelectedAssignment] = useState<Assignment | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [expandedAssignmentId, setExpandedAssignmentId] = useState<string | null>(null)\n  const [isImportDialogOpen, setIsImportDialogOpen] = useState(false)\n  const [importFile, setImportFile] = useState<File | null>(null)\n  const [isImporting, setIsImporting] = useState(false)\n\n  // Form state for Assign Asset dialog\n  const [assignForm, setAssignForm] = useState({\n    assetId: '',\n    employeeId: '',\n    assignmentReason: '',\n    conditionOnAssignment: ''\n  })\n\n  // Form state for Return Asset dialog\n  const [returnForm, setReturnForm] = useState({\n    returnReason: '',\n    conditionOnReturn: ''\n  })\n\n  // Form state for Transfer Asset dialog\n  const [transferForm, setTransferForm] = useState({\n    toEmployeeId: '',\n    returnReason: '',\n    conditionOnReturn: '',\n    newAssignmentReason: '',\n    conditionOnNewAssignment: ''\n  })\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Reset assign form when dialog opens\n  useEffect(() => {\n    if (isAssignDialogOpen) {\n      setAssignForm({\n        assetId: '',\n        employeeId: '',\n        assignmentReason: '',\n        conditionOnAssignment: ''\n      })\n    }\n  }, [isAssignDialogOpen])\n\n  // Check URL params to auto-open create dialog\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search)\n    if (params.get('action') === 'create') {\n      setIsAssignDialogOpen(true)\n      // Clean up URL without reloading, preserving other params\n      params.delete('action')\n      const newUrl = params.toString() \n        ? `${window.location.pathname}?${params.toString()}`\n        : window.location.pathname\n      window.history.replaceState({}, '', newUrl)\n    }\n  }, [])\n\n  // Populate return form when selectedAssignment changes\n  useEffect(() => {\n    if (selectedAssignment && isReturnDialogOpen) {\n      setReturnForm({\n        returnReason: '',\n        conditionOnReturn: ''\n      })\n    }\n  }, [selectedAssignment, isReturnDialogOpen])\n\n  // Populate transfer form when selectedAssignment changes\n  useEffect(() => {\n    if (selectedAssignment && isTransferDialogOpen) {\n      setTransferForm({\n        toEmployeeId: '',\n        returnReason: '',\n        conditionOnReturn: '',\n        newAssignmentReason: '',\n        conditionOnNewAssignment: ''\n      })\n    }\n  }, [selectedAssignment, isTransferDialogOpen])\n  const { data: currentUser } = useUser()\n\n  // Fetch data\n  const { data: assignments, isLoading: assignmentsLoading } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n  })\n\n  const { data: assets } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: employees } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  })\n\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Get unique asset types and departments for filters\n  const assetTypes = Array.from(new Set(assets?.map(a => a.assetType) || []))\n  const departments = Array.from(new Set(employees?.map(e => e.department) || []))\n\n  // Filter assignments\n  const filteredAssignments = assignments?.filter(assignment => {\n    const asset = assets?.find(a => a.assetId === assignment.assetId)\n    const employee = employees?.find(e => e.id === assignment.employeeId)\n    \n    const matchesSearch = \n      assignment.assetId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee?.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee?.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee?.employeeCode.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset?.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset?.modelName.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const isActive = !assignment.returnedDate\n    const isReturned = assignment.returnedDate !== null\n    \n    const matchesStatus = \n      statusFilter === \"all\" || \n      (statusFilter === \"active\" && isActive) ||\n      (statusFilter === \"returned\" && isReturned)\n      \n    const matchesLocation = locationFilter === \"all\" || employee?.locationId?.toString() === locationFilter\n    const matchesAssetType = assetTypeFilter === \"all\" || asset?.assetType === assetTypeFilter\n    const matchesDepartment = departmentFilter === \"all\" || employee?.department === departmentFilter\n    \n    return matchesSearch && matchesStatus && matchesLocation && matchesAssetType && matchesDepartment\n  }) || []\n\n  // Count active filters\n  const activeFiltersCount = [\n    locationFilter !== \"all\",\n    assetTypeFilter !== \"all\",\n    departmentFilter !== \"all\"\n  ].filter(Boolean).length\n\n  // Available assets for assignment (not currently assigned)\n  const availableAssets = assets?.filter(asset => \n    asset.status === \"available\" && \n    !assignments?.some(assignment => \n      assignment.assetId === asset.assetId && !assignment.returnedDate\n    )\n  ) || []\n\n  // Active employees for assignment\n  const activeEmployees = employees?.filter(emp => emp.status === \"active\") || []\n\n  // Assign asset mutation\n  const assignAssetMutation = useMutation({\n    mutationFn: async (assignmentData: any) => {\n      const response = await fetch('/api/assignments', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(assignmentData),\n      })\n      if (!response.ok) throw new Error('Failed to assign asset')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assignments'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset assigned successfully\" })\n      setIsAssignDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to assign asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Return asset mutation\n  const returnAssetMutation = useMutation({\n    mutationFn: async (returnData: any) => {\n      const response = await fetch(`/api/assignments/${returnData.assetId}/${returnData.employeeId}/return`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(returnData),\n      })\n      if (!response.ok) throw new Error('Failed to return asset')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assignments'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset returned successfully\" })\n      setIsReturnDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to return asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Delete assignment mutation\n  const deleteAssignmentMutation = useMutation({\n    mutationFn: async (data: { assetId: string, employeeId: number }) => {\n      const response = await fetch(`/api/assignments/${data.assetId}/${data.employeeId}`, {\n        method: 'DELETE',\n      })\n      if (!response.ok) throw new Error('Failed to delete assignment')\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] })\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets\"] })\n      toast({ title: \"Success\", description: \"Assignment deleted successfully\" })\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete assignment\", variant: \"destructive\" })\n    }\n  })\n\n  // Excel Export Handler\n  const handleExport = () => {\n    if (!assignments || !employees || !assets || !locations) {\n      toast({ title: \"Error\", description: \"Data not loaded yet\", variant: \"destructive\" })\n      return\n    }\n    \n    try {\n      ExcelExporter.exportAssignments(assignments, employees, assets, locations)\n      toast({ title: \"Success\", description: \"Assignments exported successfully\" })\n    } catch (error) {\n      toast({ title: \"Error\", description: \"Failed to export assignments\", variant: \"destructive\" })\n    }\n  }\n\n  // Excel Import Handler\n  const handleImport = async () => {\n    if (!importFile) {\n      toast({ title: \"Error\", description: \"Please select a file\", variant: \"destructive\" })\n      return\n    }\n\n    setIsImporting(true)\n\n    try {\n      const data = await ExcelImporter.parseExcelFile(importFile)\n      const { valid, errors } = ExcelImporter.validateAssignmentData(data)\n\n      if (errors.length > 0) {\n        toast({ \n          title: \"Validation Errors\", \n          description: `${errors.length} errors found. First error: ${errors[0]}`,\n          variant: \"destructive\" \n        })\n        setIsImporting(false)\n        return\n      }\n\n      for (const assignmentData of valid) {\n        await assignAssetMutation.mutateAsync(assignmentData)\n      }\n\n      toast({ \n        title: \"Success\", \n        description: `Successfully imported ${valid.length} assignments` \n      })\n      setIsImportDialogOpen(false)\n      setImportFile(null)\n    } catch (error) {\n      toast({ \n        title: \"Error\", \n        description: \"Failed to import assignments\", \n        variant: \"destructive\" \n      })\n    } finally {\n      setIsImporting(false)\n    }\n  }\n\n  // Transfer asset mutation (return + new assignment in one operation)\n  const transferAssetMutation = useMutation({\n    mutationFn: async (transferData: any) => {\n      const response = await fetch(`/api/assignments/${transferData.assetId}/transfer`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(transferData),\n      })\n      if (!response.ok) throw new Error('Failed to transfer asset')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assignments'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset transferred successfully\" })\n      setIsTransferDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to transfer asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Helper functions\n  const getAssetInfo = (assetId: string) => {\n    return assets?.find(asset => asset.assetId === assetId)\n  }\n\n  const getEmployeeInfo = (employeeId: number) => {\n    return employees?.find(employee => employee.id === employeeId)\n  }\n\n  const getLocationName = (locationId: number | null) => {\n    if (!locationId) return \"No location\"\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown\"\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const handleAssignAsset = (event: React.FormEvent) => {\n    event.preventDefault()\n    \n    if (!currentUser?.user?.id) {\n      toast({\n        title: \"Authentication Error\",\n        description: \"User not authenticated. Please refresh the page and try again.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    // Validate required fields\n    if (!assignForm.assetId || !assignForm.employeeId || !assignForm.conditionOnAssignment) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields (Asset, Employee, Condition)\",\n        variant: \"destructive\",\n      })\n      return\n    }\n    \n    const assignmentData = {\n      assetId: assignForm.assetId,\n      employeeId: parseInt(assignForm.employeeId),\n      assignmentReason: assignForm.assignmentReason?.trim() || null,\n      conditionOnAssignment: assignForm.conditionOnAssignment,\n      backupDetails: null,\n      createdBy: currentUser.user.id,\n    }\n\n    assignAssetMutation.mutate(assignmentData)\n  }\n\n  const handleReturnAsset = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedAssignment) return\n\n    // Validate required fields\n    if (!returnForm.conditionOnReturn) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please select the condition on return\",\n        variant: \"destructive\",\n      })\n      return\n    }\n    \n    const returnData = {\n      assetId: selectedAssignment.assetId,\n      employeeId: selectedAssignment.employeeId,\n      returnReason: returnForm.returnReason?.trim() || null,\n      conditionOnReturn: returnForm.conditionOnReturn,\n    }\n\n    returnAssetMutation.mutate(returnData)\n  }\n\n  const handleTransferAsset = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedAssignment) return\n\n    // Validate required fields\n    if (!transferForm.toEmployeeId || !transferForm.conditionOnReturn || !transferForm.conditionOnNewAssignment) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      })\n      return\n    }\n    \n    const transferData = {\n      assetId: selectedAssignment.assetId,\n      fromEmployeeId: selectedAssignment.employeeId,\n      toEmployeeId: parseInt(transferForm.toEmployeeId),\n      returnReason: transferForm.returnReason?.trim() || null,\n      conditionOnReturn: transferForm.conditionOnReturn,\n      newAssignmentReason: transferForm.newAssignmentReason?.trim() || null,\n      conditionOnNewAssignment: transferForm.conditionOnNewAssignment,\n    }\n\n    transferAssetMutation.mutate(transferData)\n  }\n\n  if (assignmentsLoading) {\n    return (\n      <div className=\"p-6 space-y-6 animate-fade-in\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6 animate-fade-in\">\n      <SidebarTrigger data-testid=\"button-sidebar-toggle\" className=\"mb-4 text-white/80 hover:text-white hover:bg-white/10 rounded-md\" />\n      \n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight text-white\">Assignments</h1>\n          <p className=\"text-white/70\">\n            Manage asset assignments with complete history preservation\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={isImportDialogOpen} onOpenChange={setIsImportDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" className=\"gap-2\" data-testid=\"button-import-excel\">\n                <Upload className=\"h-4 w-4\" />\n                Import Excel\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Import Assignments from Excel</DialogTitle>\n                <DialogDescription>\n                  Upload an Excel file to import assignments. Download the template for the correct format.\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"import-file\">Excel File</Label>\n                  <Input\n                    id=\"import-file\"\n                    type=\"file\"\n                    accept=\".xlsx,.xls\"\n                    onChange={(e) => setImportFile(e.target.files?.[0] || null)}\n                    data-testid=\"input-import-file\"\n                  />\n                </div>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => ExcelImporter.downloadAssignmentTemplate()}\n                  data-testid=\"button-download-template\"\n                >\n                  Download Template\n                </Button>\n              </div>\n              <DialogFooter>\n                <Button variant=\"outline\" onClick={() => setIsImportDialogOpen(false)} data-testid=\"button-cancel-import\">\n                  Cancel\n                </Button>\n                <Button onClick={handleImport} disabled={!importFile || isImporting} data-testid=\"button-confirm-import\">\n                  {isImporting ? \"Importing...\" : \"Import\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n          <Button variant=\"outline\" className=\"gap-2\" onClick={handleExport} data-testid=\"button-export\">\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n          <Dialog open={isAssignDialogOpen} onOpenChange={setIsAssignDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Assign Asset\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Assign Asset to Employee</DialogTitle>\n                <DialogDescription>\n                  Allocate enterprise resources to personnel with full accountability, condition tracking, and audit trail\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleAssignAsset} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assetId\">Asset *</Label>\n                    <Select value={assignForm.assetId} onValueChange={(value) => setAssignForm({ ...assignForm, assetId: value })} required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select asset\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {availableAssets.map(asset => (\n                          <SelectItem key={asset.assetId} value={asset.assetId}>\n                            {asset.assetId} - {asset.brand} {asset.modelName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"employeeId\">Employee *</Label>\n                    <Select value={assignForm.employeeId} onValueChange={(value) => setAssignForm({ ...assignForm, employeeId: value })} required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select employee\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {activeEmployees.map(employee => (\n                          <SelectItem key={employee.id} value={employee.id.toString()}>\n                            {employee.firstName} {employee.lastName} ({employee.employeeCode})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"assignmentReason\">Assignment Reason *</Label>\n                  <Input\n                    id=\"assignmentReason\"\n                    value={assignForm.assignmentReason}\n                    onChange={(e) => setAssignForm({ ...assignForm, assignmentReason: e.target.value })}\n                    placeholder=\"Enter assignment reason\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"conditionOnAssignment\">Condition on Assignment *</Label>\n                  <Select value={assignForm.conditionOnAssignment} onValueChange={(value) => setAssignForm({ ...assignForm, conditionOnAssignment: value })} required>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select condition\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"excellent\">Excellent</SelectItem>\n                      <SelectItem value=\"good\">Good</SelectItem>\n                      <SelectItem value=\"fair\">Fair</SelectItem>\n                      <SelectItem value=\"poor\">Poor</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"backupDetails\">Backup Details</Label>\n                  <Textarea\n                    id=\"backupDetails\"\n                    name=\"backupDetails\"\n                    placeholder=\"Previous user data backup information (if applicable)\"\n                    rows={3}\n                  />\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsAssignDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={assignAssetMutation.isPending}>\n                    {assignAssetMutation.isPending ? \"Assigning...\" : \"Assign Asset\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Assignments</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{assignments?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Complete history preserved\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Assignments</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">\n              {assignments?.filter(a => !a.returnedDate).length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently assigned\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Returned Assets</CardTitle>\n            <Undo className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">\n              {assignments?.filter(a => a.returnedDate).length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Successfully returned\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Available for Assignment</CardTitle>\n            <Package className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{availableAssets.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Ready to assign\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"glass-card border-0 glass-card border-0\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Assignments</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-4 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none z-10\" />\n              <Input\n                placeholder=\"Search by Asset ID, Employee Name, Employee Code...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"h-12 pl-12 pr-12 backdrop-blur-sm border-border/40 focus:border-primary/50 transition-all\"\n                data-testid=\"input-search-assignments\"\n              />\n              {searchTerm && (\n                <button\n                  onClick={() => setSearchTerm(\"\")}\n                  className=\"absolute right-4 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors\"\n                  data-testid=\"button-clear-search\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </button>\n              )}\n            </div>\n            \n            <Button\n              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n              variant=\"outline\"\n              className=\"h-12 gap-2 min-w-[180px] backdrop-blur-sm border-border/40 hover:border-primary/50 transition-all\"\n              data-testid=\"button-toggle-advanced-filters\"\n            >\n              <SlidersHorizontal className=\"h-4 w-4\" />\n              Advanced Filters\n              {activeFiltersCount > 0 && (\n                <Badge variant=\"default\" className=\"ml-1 px-2 py-0.5 text-xs\">\n                  {activeFiltersCount}\n                </Badge>\n              )}\n            </Button>\n          </div>\n\n          {/* Quick Filters */}\n          <div className=\"flex flex-wrap gap-2\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-[140px] backdrop-blur-sm border-border/40\" data-testid=\"select-filter-status\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Assignments</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"returned\">Returned</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {(locationFilter !== \"all\" || assetTypeFilter !== \"all\" || departmentFilter !== \"all\") && (\n              <Button\n                onClick={() => {\n                  setLocationFilter(\"all\")\n                  setAssetTypeFilter(\"all\")\n                  setDepartmentFilter(\"all\")\n                }}\n                variant=\"ghost\"\n                className=\"gap-2 text-muted-foreground hover:text-foreground backdrop-blur-sm\"\n                data-testid=\"button-reset-filters\"\n              >\n                <X className=\"h-4 w-4\" />\n                Clear All\n              </Button>\n            )}\n          </div>\n\n          {/* Advanced Filters Panel */}\n          {showAdvancedFilters && (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 p-4 rounded-lg bg-muted/10 backdrop-blur-sm border border-border/40 animate-fade-in\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <Filter className=\"h-4 w-4 text-primary\" />\n                  Asset Type\n                </label>\n                <Select value={assetTypeFilter} onValueChange={setAssetTypeFilter}>\n                  <SelectTrigger className=\"backdrop-blur-sm border-border/40\" data-testid=\"select-filter-asset-type\">\n                    <SelectValue placeholder=\"All Asset Types\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Asset Types</SelectItem>\n                    {assetTypes.map(type => (\n                      <SelectItem key={type} value={type}>{type}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <Filter className=\"h-4 w-4 text-primary\" />\n                  Location\n                </label>\n                <Select value={locationFilter} onValueChange={setLocationFilter}>\n                  <SelectTrigger className=\"backdrop-blur-sm border-border/40\" data-testid=\"select-filter-location\">\n                    <SelectValue placeholder=\"All Locations\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Locations</SelectItem>\n                    {locations?.map(location => (\n                      <SelectItem key={location.id} value={location.id.toString()}>\n                        {location.outletName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <Filter className=\"h-4 w-4 text-primary\" />\n                  Department\n                </label>\n                <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n                  <SelectTrigger className=\"backdrop-blur-sm border-border/40\" data-testid=\"select-filter-department\">\n                    <SelectValue placeholder=\"All Departments\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Departments</SelectItem>\n                    {departments.map(dept => (\n                      <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredAssignments.length} of {assignments?.length || 0} assignments\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Assignments Table */}\n      <Card className=\"glass-card border-0 glass-card border-0\">\n        <CardContent className=\"p-0 table-container-stable\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Asset</TableHead>\n                <TableHead>Employee</TableHead>\n                <TableHead>Assigned Date</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Condition</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Reason</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredAssignments.flatMap((assignment, index) => {\n                const asset = getAssetInfo(assignment.assetId)\n                const employee = getEmployeeInfo(assignment.employeeId)\n                const isActive = !assignment.returnedDate\n                const assignmentId = `${assignment.assetId}-${assignment.employeeId}-${assignment.assignedDate}`\n                const isExpanded = expandedAssignmentId === assignmentId\n                const rows = [\n                  <TableRow \n                    key={`main-${assignmentId}`}\n                    onClick={() => setExpandedAssignmentId(isExpanded ? null : assignmentId)}\n                    className=\"hover:bg-muted/20 transition-all duration-150 border-b border-border/30 group cursor-pointer\"\n                    data-testid={`row-assignment-${assignmentId}`}\n                  >\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"flex items-center justify-center w-8 h-8 bg-muted/50 rounded-full group-hover:bg-muted transition-colors\">\n                          {isExpanded ? (\n                            <ChevronUp className=\"h-4 w-4\" />\n                          ) : (\n                            <ChevronDown className=\"h-4 w-4\" />\n                          )}\n                        </div>\n                        <Laptop className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">{assignment.assetId}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {asset?.brand} {asset?.modelName}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <User className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">\n                            {employee?.firstName} {employee?.lastName}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground font-mono\">\n                            {employee?.employeeCode}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                        {formatDate(assignment.assignedDate)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        {isActive ? (\n                          <>\n                            <div className=\"w-2 h-2 rounded-full bg-green-400\" />\n                            <span>Active</span>\n                          </>\n                        ) : (\n                          <>\n                            <div className=\"w-2 h-2 rounded-full bg-blue-400\" />\n                            <span>Returned</span>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {formatDate(assignment.returnedDate!)}\n                            </div>\n                          </>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div className={`w-2 h-2 rounded-full ${\n                          assignment.conditionOnAssignment === 'excellent' ? 'bg-green-400' :\n                          assignment.conditionOnAssignment === 'good' ? 'bg-blue-400' :\n                          assignment.conditionOnAssignment === 'fair' ? 'bg-yellow-400' : 'bg-red-400'\n                        }`} />\n                        <span className=\"capitalize\">{assignment.conditionOnAssignment}</span>\n                        {assignment.conditionOnReturn && (\n                          <>\n                            <span className=\"text-white/70\">→</span>\n                            <div className={`w-2 h-2 rounded-full ${\n                              assignment.conditionOnReturn === 'excellent' ? 'bg-green-400' :\n                              assignment.conditionOnReturn === 'good' ? 'bg-blue-400' :\n                              assignment.conditionOnReturn === 'fair' ? 'bg-yellow-400' : 'bg-red-400'\n                            }`} />\n                            <span className=\"capitalize text-sm\">{assignment.conditionOnReturn}</span>\n                          </>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"h-3 w-3 text-muted-foreground\" />\n                        {getLocationName(employee?.locationId ?? null)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {assignment.assignmentReason}\n                      </Badge>\n                    </TableCell>\n                  </TableRow>\n                ]\n\n                if (isExpanded) {\n                  rows.push(\n                    <TableRow key={`expanded-${assignmentId}`} className=\"bg-muted/10 hover:bg-muted/10\">\n                      <TableCell colSpan={7} className=\"p-6\">\n                        <div className=\"grid grid-cols-3 gap-6\">\n                          <div className=\"space-y-4\">\n                            <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Assignment Timeline</h4>\n                            <div className=\"space-y-3\">\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Assigned Date</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <Calendar className=\"h-3 w-3\" />\n                                  {formatDate(assignment.assignedDate)}\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Return Date</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <Calendar className=\"h-3 w-3\" />\n                                  {assignment.returnedDate ? formatDate(assignment.returnedDate) : 'Still Active'}\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Assignment Status</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <div className={`w-2 h-2 rounded-full ${isActive ? 'bg-green-400' : 'bg-blue-400'}`} />\n                                  {isActive ? 'Active' : 'Returned'}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"space-y-4\">\n                            <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Asset & Employee</h4>\n                            <div className=\"space-y-3\">\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Asset ID</div>\n                                <div className=\"text-sm mt-1 font-mono\">{assignment.assetId}</div>\n                                <div className=\"text-xs text-muted-foreground mt-1\">\n                                  {asset?.brand} {asset?.modelName} ({asset?.assetType})\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Employee</div>\n                                <div className=\"text-sm mt-1\">{employee?.firstName} {employee?.lastName}</div>\n                                <div className=\"text-xs text-muted-foreground font-mono mt-1\">\n                                  {employee?.employeeCode}\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Location</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <MapPin className=\"h-3 w-3\" />\n                                  {getLocationName(employee?.locationId ?? null)}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"space-y-4\">\n                            <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Condition & Notes</h4>\n                            <div className=\"space-y-3\">\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Condition on Assignment</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <div className={`w-2 h-2 rounded-full ${\n                                    assignment.conditionOnAssignment === 'excellent' ? 'bg-green-400' :\n                                    assignment.conditionOnAssignment === 'good' ? 'bg-blue-400' :\n                                    assignment.conditionOnAssignment === 'fair' ? 'bg-yellow-400' : 'bg-red-400'\n                                  }`} />\n                                  <span className=\"capitalize\">{assignment.conditionOnAssignment}</span>\n                                </div>\n                              </div>\n                              {assignment.conditionOnReturn && (\n                                <div>\n                                  <div className=\"text-xs text-muted-foreground\">Condition on Return</div>\n                                  <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                    <div className={`w-2 h-2 rounded-full ${\n                                      assignment.conditionOnReturn === 'excellent' ? 'bg-green-400' :\n                                      assignment.conditionOnReturn === 'good' ? 'bg-blue-400' :\n                                      assignment.conditionOnReturn === 'fair' ? 'bg-yellow-400' : 'bg-red-400'\n                                    }`} />\n                                    <span className=\"capitalize\">{assignment.conditionOnReturn}</span>\n                                  </div>\n                                </div>\n                              )}\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Assignment Reason</div>\n                                <div className=\"text-sm mt-1\">{assignment.assignmentReason}</div>\n                              </div>\n                              {assignment.returnReason && (\n                                <div>\n                                  <div className=\"text-xs text-muted-foreground\">Return Reason</div>\n                                  <div className=\"text-sm mt-1\">{assignment.returnReason}</div>\n                                </div>\n                              )}\n                              {assignment.backupDetails && (\n                                <div>\n                                  <div className=\"text-xs text-muted-foreground\">Backup Details</div>\n                                  <div className=\"text-sm mt-1 p-2 bg-muted/30 rounded\">\n                                    {assignment.backupDetails}\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex gap-2 mt-6 pt-4 border-t border-border/50\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              setSelectedAssignment(assignment)\n                              setIsViewDialogOpen(true)\n                            }}\n                            data-testid={`button-view-details-${assignmentId}`}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Full Details\n                          </Button>\n                          {isActive && (\n                            <>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.stopPropagation()\n                                  setSelectedAssignment(assignment)\n                                  setIsReturnDialogOpen(true)\n                                }}\n                                data-testid={`button-return-${assignmentId}`}\n                              >\n                                <Undo className=\"mr-2 h-4 w-4\" />\n                                Return Asset\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.stopPropagation()\n                                  setSelectedAssignment(assignment)\n                                  setIsTransferDialogOpen(true)\n                                }}\n                                data-testid={`button-transfer-${assignmentId}`}\n                              >\n                                <ArrowRightLeft className=\"mr-2 h-4 w-4\" />\n                                Transfer Asset\n                              </Button>\n                            </>\n                          )}\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              if (window.confirm(`Are you sure you want to delete this assignment record? This action cannot be undone.`)) {\n                                deleteAssignmentMutation.mutate({ assetId: assignment.assetId, employeeId: assignment.employeeId })\n                              }\n                            }}\n                            data-testid={`button-delete-assignment-${assignmentId}`}\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete Assignment\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  )\n                }\n\n                return rows\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Assignment Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Assignment Details</DialogTitle>\n            <DialogDescription>\n              View assignment timeline, condition reports, backup records, and complete responsibility chain\n            </DialogDescription>\n          </DialogHeader>\n          {selectedAssignment && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Asset</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAssignment.assetId}\n                    <div className=\"text-xs text-muted-foreground\">\n                      {getAssetInfo(selectedAssignment.assetId)?.brand} {getAssetInfo(selectedAssignment.assetId)?.modelName}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Employee</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getEmployeeInfo(selectedAssignment.employeeId)?.firstName} {getEmployeeInfo(selectedAssignment.employeeId)?.lastName}\n                    <div className=\"text-xs text-muted-foreground font-mono\">\n                      {getEmployeeInfo(selectedAssignment.employeeId)?.employeeCode}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Assigned Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDate(selectedAssignment.assignedDate)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Return Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAssignment.returnedDate ? formatDate(selectedAssignment.returnedDate) : \"Not returned\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Assignment Reason</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAssignment.assignmentReason}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Return Reason</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAssignment.returnReason || \"Not applicable\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Condition on Assignment</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded capitalize\">\n                    {selectedAssignment.conditionOnAssignment}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Condition on Return</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded capitalize\">\n                    {selectedAssignment.conditionOnReturn || \"Not applicable\"}\n                  </div>\n                </div>\n              </div>\n\n              {selectedAssignment.backupDetails && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Backup Details</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAssignment.backupDetails}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Return Asset Dialog */}\n      <Dialog open={isReturnDialogOpen} onOpenChange={setIsReturnDialogOpen}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Return Asset</DialogTitle>\n            <DialogDescription>\n              Process asset return with condition assessment and closure documentation for {selectedAssignment?.assetId}\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleReturnAsset} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"returnReason\">Return Reason</Label>\n              <Input\n                id=\"returnReason\"\n                value={returnForm.returnReason}\n                onChange={(e) => setReturnForm({ ...returnForm, returnReason: e.target.value })}\n                placeholder=\"Enter return reason (optional)\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"conditionOnReturn\">Condition on Return *</Label>\n              <Select value={returnForm.conditionOnReturn} onValueChange={(value) => setReturnForm({ ...returnForm, conditionOnReturn: value })} required>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select condition\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"excellent\">Excellent</SelectItem>\n                  <SelectItem value=\"good\">Good</SelectItem>\n                  <SelectItem value=\"fair\">Fair</SelectItem>\n                  <SelectItem value=\"poor\">Poor</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <DialogFooter>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setIsReturnDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={returnAssetMutation.isPending}>\n                {returnAssetMutation.isPending ? \"Processing...\" : \"Return Asset\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Transfer Asset Dialog */}\n      <Dialog open={isTransferDialogOpen} onOpenChange={setIsTransferDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Transfer Asset</DialogTitle>\n            <DialogDescription>\n              Reassign resource ownership with seamless handover documentation and continuous tracking for {selectedAssignment?.assetId}\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleTransferAsset} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"toEmployeeId\">Transfer to Employee *</Label>\n              <Select value={transferForm.toEmployeeId} onValueChange={(value) => setTransferForm({ ...transferForm, toEmployeeId: value })} required>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select new assignee\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {activeEmployees.filter(emp => emp.id !== selectedAssignment?.employeeId).map(employee => (\n                    <SelectItem key={employee.id} value={employee.id.toString()}>\n                      {employee.firstName} {employee.lastName} ({employee.employeeCode})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"returnReason\">Return Reason</Label>\n                <Input\n                  id=\"returnReason\"\n                  value={transferForm.returnReason}\n                  onChange={(e) => setTransferForm({ ...transferForm, returnReason: e.target.value })}\n                  placeholder=\"Transfer reason (optional)\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"conditionOnReturn\">Condition on Return *</Label>\n                <Select value={transferForm.conditionOnReturn} onValueChange={(value) => setTransferForm({ ...transferForm, conditionOnReturn: value })} required>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Condition\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"excellent\">Excellent</SelectItem>\n                    <SelectItem value=\"good\">Good</SelectItem>\n                    <SelectItem value=\"fair\">Fair</SelectItem>\n                    <SelectItem value=\"poor\">Poor</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"newAssignmentReason\">New Assignment Reason</Label>\n                <Input\n                  id=\"newAssignmentReason\"\n                  value={transferForm.newAssignmentReason}\n                  onChange={(e) => setTransferForm({ ...transferForm, newAssignmentReason: e.target.value })}\n                  placeholder=\"Assignment reason (optional)\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"conditionOnNewAssignment\">Condition for New Assignment *</Label>\n                <Select value={transferForm.conditionOnNewAssignment} onValueChange={(value) => setTransferForm({ ...transferForm, conditionOnNewAssignment: value })} required>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Condition\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"excellent\">Excellent</SelectItem>\n                    <SelectItem value=\"good\">Good</SelectItem>\n                    <SelectItem value=\"fair\">Fair</SelectItem>\n                    <SelectItem value=\"poor\">Poor</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <DialogFooter>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setIsTransferDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={transferAssetMutation.isPending}>\n                {transferAssetMutation.isPending ? \"Processing...\" : \"Transfer Asset\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":61114},"client/src/pages/biometric.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Fingerprint, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Monitor,\n  Scan,\n  Shield,\n  MapPin,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Settings,\n  Power,\n  User,\n  Users,\n  Key\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { SidebarTrigger } from \"@/components/ui/sidebar\"\n\ninterface BiometricSystem {\n  id: number\n  systemName: string\n  systemType: \"fingerprint_scanner\" | \"face_recognition\" | \"iris_scanner\" | \"palm_scanner\" | \"access_controller\"\n  brand: string\n  model: string\n  serialNumber: string | null\n  ipAddress: string | null\n  macAddress: string | null\n  locationId: number\n  installationDate: string\n  warrantyUntil: string | null\n  status: \"active\" | \"inactive\" | \"maintenance\" | \"fault\"\n  enrolledUsers: number | null\n  maxUsers: number | null\n  accessLevel: \"entry_only\" | \"full_access\" | \"restricted\"\n  integrationSystem: string | null\n  firmwareVersion: string | null\n  lastSyncDate: string | null\n  maintenanceContract: string | null\n  notes: string | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  active: \"bg-green-400\",\n  inactive: \"bg-gray-500\",\n  maintenance: \"bg-yellow-400\",\n  fault: \"bg-red-400\"\n}\n\n// System type icons\nconst systemTypeIcons: Record<string, any> = {\n  fingerprint_scanner: Fingerprint,\n  face_recognition: Scan,\n  iris_scanner: Eye,\n  palm_scanner: User,\n  access_controller: Key\n}\n\nexport default function BiometricPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedSystem, setSelectedSystem] = useState<BiometricSystem | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Mock biometric data - In real app, this would come from API\n  const mockBiometricData: BiometricSystem[] = [\n    {\n      id: 1,\n      systemName: \"Main Entrance Fingerprint Scanner\",\n      systemType: \"fingerprint_scanner\",\n      brand: \"ZKTeco\",\n      model: \"F18\",\n      serialNumber: \"ZK123456789\",\n      ipAddress: \"192.168.1.110\",\n      macAddress: \"00:11:22:33:44:99\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2027-01-15\",\n      status: \"active\",\n      enrolledUsers: 85,\n      maxUsers: 3000,\n      accessLevel: \"full_access\",\n      integrationSystem: \"HRMS Integration\",\n      firmwareVersion: \"6.60.5.9\",\n      lastSyncDate: \"2024-01-20T08:00:00Z\",\n      maintenanceContract: \"BiometricTech Solutions\",\n      notes: \"Primary attendance and access control for all employees\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-20T08:30:00Z\"\n    },\n    {\n      id: 2,\n      systemName: \"Manager Cabin Face Recognition\",\n      systemType: \"face_recognition\",\n      brand: \"Hikvision\",\n      model: \"DS-K1T341AMF\",\n      serialNumber: \"HV987654321\",\n      ipAddress: \"192.168.1.111\",\n      macAddress: \"00:11:22:33:44:AA\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2026-01-15\",\n      status: \"active\",\n      enrolledUsers: 12,\n      maxUsers: 500,\n      accessLevel: \"restricted\",\n      integrationSystem: \"Access Control System\",\n      firmwareVersion: \"2.2.25\",\n      lastSyncDate: \"2024-01-20T06:00:00Z\",\n      maintenanceContract: \"SecureTech Solutions\",\n      notes: \"Restricted access for management and senior staff only\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-20T06:15:00Z\"\n    },\n    {\n      id: 3,\n      systemName: \"Store Exit Fingerprint Reader\",\n      systemType: \"fingerprint_scanner\",\n      brand: \"eSSL\",\n      model: \"X990\",\n      serialNumber: \"ES555666777\",\n      ipAddress: \"192.168.1.112\",\n      macAddress: \"00:11:22:33:44:BB\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2025-01-15\",\n      status: \"maintenance\",\n      enrolledUsers: 85,\n      maxUsers: 2000,\n      accessLevel: \"entry_only\",\n      integrationSystem: \"Attendance System\",\n      firmwareVersion: \"3.4.1\",\n      lastSyncDate: \"2024-01-18T17:00:00Z\",\n      maintenanceContract: \"Local Tech Services\",\n      notes: \"Exit scanner for attendance tracking. Under maintenance for sensor cleaning\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-18T17:30:00Z\"\n    },\n    {\n      id: 4,\n      systemName: \"Koramangala Access Controller\",\n      systemType: \"access_controller\",\n      brand: \"ZKTeco\",\n      model: \"inBio160\",\n      serialNumber: \"ZK888999000\",\n      ipAddress: \"192.168.2.110\",\n      macAddress: \"00:11:22:33:44:CC\",\n      locationId: 2,\n      installationDate: \"2023-12-01\",\n      warrantyUntil: \"2025-12-01\",\n      status: \"active\",\n      enrolledUsers: 45,\n      maxUsers: 30000,\n      accessLevel: \"full_access\",\n      integrationSystem: \"Door Control + CCTV\",\n      firmwareVersion: \"4.4.8\",\n      lastSyncDate: \"2024-01-19T09:00:00Z\",\n      maintenanceContract: \"ZKTeco Service\",\n      notes: \"Central access control system managing multiple doors and entry points\",\n      createdAt: \"2023-12-01T00:00:00Z\",\n      updatedAt: \"2024-01-19T09:30:00Z\"\n    },\n    {\n      id: 5,\n      systemName: \"Staff Room Palm Scanner\",\n      systemType: \"palm_scanner\",\n      brand: \"Fujitsu\",\n      model: \"PalmSecure-F Pro\",\n      serialNumber: \"FJ111222333\",\n      ipAddress: \"192.168.1.113\",\n      macAddress: \"00:11:22:33:44:DD\",\n      locationId: 1,\n      installationDate: \"2024-02-01\",\n      warrantyUntil: \"2027-02-01\",\n      status: \"active\",\n      enrolledUsers: 25,\n      maxUsers: 1000,\n      accessLevel: \"restricted\",\n      integrationSystem: \"Staff Management System\",\n      firmwareVersion: \"1.2.3\",\n      lastSyncDate: \"2024-01-20T07:30:00Z\",\n      maintenanceContract: \"Fujitsu Support\",\n      notes: \"High-security palm scanner for staff room and sensitive areas access\",\n      createdAt: \"2024-02-01T00:00:00Z\",\n      updatedAt: \"2024-01-20T07:45:00Z\"\n    }\n  ]\n\n  // Fetch data\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Use mock data for biometric systems\n  const biometricSystems = mockBiometricData\n\n  // Filter biometric systems\n  const filteredSystems = biometricSystems?.filter(system => {\n    const location = locations?.find(l => l.id === system.locationId)\n    \n    const matchesSearch = \n      system.systemName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.model.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.serialNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.ipAddress?.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === \"all\" || system.status === statusFilter\n    const matchesType = typeFilter === \"all\" || system.systemType === typeFilter\n    const matchesLocation = locationFilter === \"all\" || system.locationId.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesType && matchesLocation\n  }) || []\n\n  // Helper functions\n  const getLocationName = (locationId: number) => {\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown\"\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const formatDateTime = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  }\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status) {\n      case \"active\": return \"bg-green-100 text-green-800\"\n      case \"inactive\": return \"bg-gray-100 text-gray-800\"\n      case \"maintenance\": return \"bg-yellow-100 text-yellow-800\"\n      case \"fault\": return \"bg-red-100 text-red-800\"\n      default: return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  const getAccessLevelBadgeColor = (level: string) => {\n    switch (level) {\n      case \"full_access\": return \"bg-blue-100 text-blue-800\"\n      case \"restricted\": return \"bg-orange-100 text-orange-800\"\n      case \"entry_only\": return \"bg-gray-100 text-gray-800\"\n      default: return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  const getSystemTypeIcon = (type: string) => {\n    return systemTypeIcons[type] || Settings\n  }\n\n  const getSystemTypeLabel = (type: string) => {\n    switch (type) {\n      case \"fingerprint_scanner\": return \"Fingerprint Scanner\"\n      case \"face_recognition\": return \"Face Recognition\"\n      case \"iris_scanner\": return \"Iris Scanner\"\n      case \"palm_scanner\": return \"Palm Scanner\"\n      case \"access_controller\": return \"Access Controller\"\n      default: return type.charAt(0).toUpperCase() + type.slice(1)\n    }\n  }\n\n  const getAccessLevelLabel = (level: string) => {\n    switch (level) {\n      case \"full_access\": return \"Full Access\"\n      case \"restricted\": return \"Restricted\"\n      case \"entry_only\": return \"Entry Only\"\n      default: return level.charAt(0).toUpperCase() + level.slice(1)\n    }\n  }\n\n  // Calculate system metrics\n  const totalSystems = biometricSystems.length\n  const activeSystems = biometricSystems.filter(s => s.status === \"active\").length\n  const totalEnrolledUsers = biometricSystems.reduce((sum, s) => sum + (s.enrolledUsers || 0), 0)\n  const totalCapacity = biometricSystems.reduce((sum, s) => sum + (s.maxUsers || 0), 0)\n  const utilizationRate = totalCapacity > 0 ? Math.round((totalEnrolledUsers / totalCapacity) * 100) : 0\n\n  return (\n    <div className=\"p-6 space-y-6 animate-fade-in\">\n      <SidebarTrigger data-testid=\"button-sidebar-toggle\" className=\"mb-4 text-white/80 hover:text-white hover:bg-white/10 rounded-md\" />\n      \n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight text-white\">Biometric Systems</h1>\n          <p className=\"text-white/70\">\n            Manage access control and attendance systems across all BODYCRAFT locations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Systems\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export Report\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Biometric System\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Add Biometric System</DialogTitle>\n                <DialogDescription>\n                  Deploy new biometric authentication infrastructure with access controls and attendance integration\n                </DialogDescription>\n              </DialogHeader>\n              <form className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"systemName\">System Name *</Label>\n                    <Input\n                      id=\"systemName\"\n                      name=\"systemName\"\n                      placeholder=\"Main Entrance Scanner\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"systemType\">System Type *</Label>\n                    <Select name=\"systemType\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"fingerprint_scanner\">Fingerprint Scanner</SelectItem>\n                        <SelectItem value=\"face_recognition\">Face Recognition</SelectItem>\n                        <SelectItem value=\"iris_scanner\">Iris Scanner</SelectItem>\n                        <SelectItem value=\"palm_scanner\">Palm Scanner</SelectItem>\n                        <SelectItem value=\"access_controller\">Access Controller</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"brand\">Brand *</Label>\n                    <Input\n                      id=\"brand\"\n                      name=\"brand\"\n                      placeholder=\"ZKTeco, Hikvision, eSSL\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"model\">Model *</Label>\n                    <Input\n                      id=\"model\"\n                      name=\"model\"\n                      placeholder=\"F18, X990, inBio160\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serialNumber\">Serial Number</Label>\n                    <Input\n                      id=\"serialNumber\"\n                      name=\"serialNumber\"\n                      placeholder=\"ZK123456789\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"locationId\">Location *</Label>\n                    <Select name=\"locationId\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select location\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {locations?.map(location => (\n                          <SelectItem key={location.id} value={location.id.toString()}>\n                            {location.outletName}, {location.city}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"ipAddress\">IP Address</Label>\n                    <Input\n                      id=\"ipAddress\"\n                      name=\"ipAddress\"\n                      placeholder=\"192.168.1.110\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"maxUsers\">Max Users Capacity</Label>\n                    <Input\n                      id=\"maxUsers\"\n                      name=\"maxUsers\"\n                      type=\"number\"\n                      placeholder=\"3000\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"accessLevel\">Access Level *</Label>\n                    <Select name=\"accessLevel\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select level\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"full_access\">Full Access</SelectItem>\n                        <SelectItem value=\"restricted\">Restricted</SelectItem>\n                        <SelectItem value=\"entry_only\">Entry Only</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"installationDate\">Installation Date *</Label>\n                    <Input\n                      id=\"installationDate\"\n                      name=\"installationDate\"\n                      type=\"date\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"integrationSystem\">Integration System</Label>\n                  <Input\n                    id=\"integrationSystem\"\n                    name=\"integrationSystem\"\n                    placeholder=\"HRMS, Access Control, Attendance System\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notes\">Notes</Label>\n                  <Textarea\n                    id=\"notes\"\n                    name=\"notes\"\n                    placeholder=\"Additional notes about the biometric system\"\n                    rows={3}\n                  />\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">\n                    Add Biometric System\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Systems</CardTitle>\n            <Fingerprint className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{totalSystems}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Biometric access systems\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Systems</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{activeSystems}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently operational\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Enrolled Users</CardTitle>\n            <Users className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{totalEnrolledUsers}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Total user registrations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Utilization</CardTitle>\n            <Shield className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{utilizationRate}%</div>\n            <div className=\"mt-2\">\n              <Progress value={utilizationRate} className=\"h-2\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"glass-card border-0 glass-card border-0\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Systems</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by System Name, Brand, Model, Serial Number, IP Address...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"fault\">Fault</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"fingerprint_scanner\">Fingerprint</SelectItem>\n                  <SelectItem value=\"face_recognition\">Face Recognition</SelectItem>\n                  <SelectItem value=\"iris_scanner\">Iris Scanner</SelectItem>\n                  <SelectItem value=\"palm_scanner\">Palm Scanner</SelectItem>\n                  <SelectItem value=\"access_controller\">Access Controller</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredSystems.length} of {biometricSystems?.length || 0} biometric systems\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Biometric Systems Table */}\n      <Card className=\"glass-card border-0 glass-card border-0\">\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>System</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Brand/Model</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Users</TableHead>\n                <TableHead>Access Level</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredSystems.map((system) => {\n                const SystemIcon = getSystemTypeIcon(system.systemType)\n                const utilizationPercent = system.maxUsers && system.enrolledUsers \n                  ? Math.round((system.enrolledUsers / system.maxUsers) * 100)\n                  : 0\n                \n                return (\n                  <TableRow key={system.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <SystemIcon className=\"h-8 w-8 p-1.5 bg-muted rounded-full\" />\n                        <div>\n                          <div className=\"font-medium\">{system.systemName}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {system.serialNumber || \"No serial number\"}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {getSystemTypeLabel(system.systemType)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{system.brand}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {system.model}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"h-3 w-3 text-muted-foreground\" />\n                        {getLocationName(system.locationId)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {system.enrolledUsers && system.maxUsers ? (\n                          <div>\n                            <div className=\"font-medium\">{system.enrolledUsers} / {system.maxUsers}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {utilizationPercent}% used\n                            </div>\n                          </div>\n                        ) : (\n                          \"Not specified\"\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"secondary\" \n                        className={getAccessLevelBadgeColor(system.accessLevel)}\n                      >\n                        {getAccessLevelLabel(system.accessLevel)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"secondary\" \n                        className={getStatusBadgeColor(system.status)}\n                      >\n                        {system.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedSystem(system)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit System\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Users className=\"mr-2 h-4 w-4\" />\n                            Manage Users\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Settings className=\"mr-2 h-4 w-4\" />\n                            Configure\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem className=\"text-red-600\">\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Remove System\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View System Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Biometric System Details</DialogTitle>\n            <DialogDescription>\n              View authentication system specifications, enrolled user count, access permissions, and synchronization status\n            </DialogDescription>\n          </DialogHeader>\n          {selectedSystem && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">System Name</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded font-medium\">\n                    {selectedSystem.systemName}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">System Type</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getSystemTypeLabel(selectedSystem.systemType)}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Brand</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.brand}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Model</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.model}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Serial Number</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.serialNumber || \"Not specified\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Location</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getLocationName(selectedSystem.locationId)}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">IP Address</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.ipAddress || \"Not configured\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Access Level</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    <Badge className={getAccessLevelBadgeColor(selectedSystem.accessLevel)}>\n                      {getAccessLevelLabel(selectedSystem.accessLevel)}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Enrolled Users</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.enrolledUsers || \"0\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Max Capacity</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.maxUsers || \"N/A\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Utilization</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.maxUsers && selectedSystem.enrolledUsers \n                      ? `${Math.round((selectedSystem.enrolledUsers / selectedSystem.maxUsers) * 100)}%`\n                      : \"N/A\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Installation Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDate(selectedSystem.installationDate)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Warranty Until</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.warrantyUntil ? formatDate(selectedSystem.warrantyUntil) : \"No warranty\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    <Badge className={getStatusBadgeColor(selectedSystem.status)}>\n                      {selectedSystem.status}\n                    </Badge>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Firmware Version</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.firmwareVersion || \"Not specified\"}\n                  </div>\n                </div>\n              </div>\n\n              {selectedSystem.integrationSystem && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Integration System</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.integrationSystem}\n                  </div>\n                </div>\n              )}\n\n              {selectedSystem.lastSyncDate && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Last Sync</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDateTime(selectedSystem.lastSyncDate)}\n                  </div>\n                </div>\n              )}\n\n              {selectedSystem.maintenanceContract && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Maintenance Contract</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.maintenanceContract}\n                  </div>\n                </div>\n              )}\n\n              {selectedSystem.notes && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Notes</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.notes}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":38066},"client/src/pages/cctv.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Camera, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Monitor,\n  HardDrive,\n  Wifi,\n  MapPin,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Settings,\n  Power,\n  Shield,\n  Video\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { SidebarTrigger } from \"@/components/ui/sidebar\"\n\ninterface CCTVSystem {\n  id: number\n  systemName: string\n  systemType: \"nvr\" | \"dvr\" | \"ip_camera\" | \"analog_camera\" | \"monitoring_station\"\n  brand: string\n  model: string\n  serialNumber: string | null\n  ipAddress: string | null\n  macAddress: string | null\n  locationId: number\n  installationDate: string\n  warrantyUntil: string | null\n  status: \"active\" | \"inactive\" | \"maintenance\" | \"fault\"\n  cameraCount: number | null\n  storageCapacity: string | null\n  recordingQuality: string | null\n  remoteAccess: boolean\n  maintenanceContract: string | null\n  lastMaintenanceDate: string | null\n  notes: string | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  active: \"bg-green-400\",\n  inactive: \"bg-gray-500\",\n  maintenance: \"bg-yellow-400\",\n  fault: \"bg-red-400\"\n}\n\n// System type icons\nconst systemTypeIcons: Record<string, any> = {\n  nvr: HardDrive,\n  dvr: HardDrive,\n  ip_camera: Camera,\n  analog_camera: Video,\n  monitoring_station: Monitor\n}\n\nexport default function CCTVPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedSystem, setSelectedSystem] = useState<CCTVSystem | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Mock CCTV data - In real app, this would come from API\n  const mockCCTVData: CCTVSystem[] = [\n    {\n      id: 1,\n      systemName: \"JP Nagar Store Main NVR\",\n      systemType: \"nvr\",\n      brand: \"Hikvision\",\n      model: \"DS-7616NI-I2/16P\",\n      serialNumber: \"HV123456789\",\n      ipAddress: \"192.168.1.100\",\n      macAddress: \"00:11:22:33:44:55\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2027-01-15\",\n      status: \"active\",\n      cameraCount: 16,\n      storageCapacity: \"8TB\",\n      recordingQuality: \"4MP\",\n      remoteAccess: true,\n      maintenanceContract: \"SecureTech Solutions\",\n      lastMaintenanceDate: \"2024-01-10\",\n      notes: \"Main surveillance system for store entrance, cash counter, and storage areas\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-10T10:30:00Z\"\n    },\n    {\n      id: 2,\n      systemName: \"Entrance Camera Bank 1\",\n      systemType: \"ip_camera\",\n      brand: \"Dahua\",\n      model: \"IPC-HDBW4231E-AS\",\n      serialNumber: \"DH987654321\",\n      ipAddress: \"192.168.1.101\",\n      macAddress: \"00:11:22:33:44:66\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2026-01-15\",\n      status: \"active\",\n      cameraCount: 4,\n      storageCapacity: null,\n      recordingQuality: \"2MP\",\n      remoteAccess: true,\n      maintenanceContract: \"SecureTech Solutions\",\n      lastMaintenanceDate: \"2024-01-10\",\n      notes: \"Covers main entrance, customer parking, and loading dock\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-10T10:30:00Z\"\n    },\n    {\n      id: 3,\n      systemName: \"Koramangala DVR System\", \n      systemType: \"dvr\",\n      brand: \"CP Plus\",\n      model: \"CP-UVR-0801E1-CS\",\n      serialNumber: \"CP555666777\",\n      ipAddress: \"192.168.1.150\",\n      macAddress: \"00:11:22:33:44:77\",\n      locationId: 2,\n      installationDate: \"2023-12-01\",\n      warrantyUntil: \"2025-12-01\",\n      status: \"maintenance\",\n      cameraCount: 8,\n      storageCapacity: \"2TB\",\n      recordingQuality: \"1080p\",\n      remoteAccess: false,\n      maintenanceContract: \"Local Security Services\",\n      lastMaintenanceDate: \"2024-01-05\",\n      notes: \"Scheduled for upgrade to IP system. Current analog cameras need replacement\",\n      createdAt: \"2023-12-01T00:00:00Z\",\n      updatedAt: \"2024-01-05T14:20:00Z\"\n    },\n    {\n      id: 4,\n      systemName: \"Store Monitoring Station\",\n      systemType: \"monitoring_station\",\n      brand: \"Samsung\",\n      model: \"SRN-4000-2TB\",\n      serialNumber: \"SM111222333\",\n      ipAddress: \"192.168.1.200\",\n      macAddress: \"00:11:22:33:44:88\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2027-01-15\",\n      status: \"active\",\n      cameraCount: null,\n      storageCapacity: \"2TB\",\n      recordingQuality: null,\n      remoteAccess: true,\n      maintenanceContract: \"Samsung Care\",\n      lastMaintenanceDate: null,\n      notes: \"Central monitoring workstation for security personnel\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-01T00:00:00Z\"\n    }\n  ]\n\n  // Fetch data\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Use mock data for CCTV systems\n  const cctvSystems = mockCCTVData\n\n  // Filter CCTV systems\n  const filteredSystems = cctvSystems?.filter(system => {\n    const location = locations?.find(l => l.id === system.locationId)\n    \n    const matchesSearch = \n      system.systemName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.model.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.serialNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.ipAddress?.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === \"all\" || system.status === statusFilter\n    const matchesType = typeFilter === \"all\" || system.systemType === typeFilter\n    const matchesLocation = locationFilter === \"all\" || system.locationId.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesType && matchesLocation\n  }) || []\n\n  // Helper functions\n  const getLocationName = (locationId: number) => {\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown\"\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status) {\n      case \"active\": return \"bg-green-100 text-green-800\"\n      case \"inactive\": return \"bg-gray-100 text-gray-800\"\n      case \"maintenance\": return \"bg-yellow-100 text-yellow-800\"\n      case \"fault\": return \"bg-red-100 text-red-800\"\n      default: return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  const getSystemTypeIcon = (type: string) => {\n    return systemTypeIcons[type] || Settings\n  }\n\n  const getSystemTypeLabel = (type: string) => {\n    switch (type) {\n      case \"nvr\": return \"Network Video Recorder\"\n      case \"dvr\": return \"Digital Video Recorder\"\n      case \"ip_camera\": return \"IP Camera\"\n      case \"analog_camera\": return \"Analog Camera\"\n      case \"monitoring_station\": return \"Monitoring Station\"\n      default: return type.charAt(0).toUpperCase() + type.slice(1)\n    }\n  }\n\n  // Calculate system metrics\n  const totalSystems = cctvSystems.length\n  const activeSystems = cctvSystems.filter(s => s.status === \"active\").length\n  const faultySystems = cctvSystems.filter(s => s.status === \"fault\").length\n  const totalCameras = cctvSystems.reduce((sum, s) => sum + (s.cameraCount || 0), 0)\n  const systemHealth = totalSystems > 0 ? Math.round((activeSystems / totalSystems) * 100) : 0\n\n  return (\n    <div className=\"p-6 space-y-6 animate-fade-in\">\n      <SidebarTrigger data-testid=\"button-sidebar-toggle\" className=\"mb-4 text-white/80 hover:text-white hover:bg-white/10 rounded-md\" />\n      \n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight text-white\">CCTV Systems</h1>\n          <p className=\"text-white/70\">\n            Monitor and manage surveillance systems across all BODYCRAFT locations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Systems\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export Report\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add CCTV System\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Add CCTV System</DialogTitle>\n                <DialogDescription>\n                  Configure new surveillance infrastructure with network settings, capacity details, and security parameters\n                </DialogDescription>\n              </DialogHeader>\n              <form className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"systemName\">System Name *</Label>\n                    <Input\n                      id=\"systemName\"\n                      name=\"systemName\"\n                      placeholder=\"Main Store NVR\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"systemType\">System Type *</Label>\n                    <Select name=\"systemType\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"nvr\">Network Video Recorder</SelectItem>\n                        <SelectItem value=\"dvr\">Digital Video Recorder</SelectItem>\n                        <SelectItem value=\"ip_camera\">IP Camera</SelectItem>\n                        <SelectItem value=\"analog_camera\">Analog Camera</SelectItem>\n                        <SelectItem value=\"monitoring_station\">Monitoring Station</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"brand\">Brand *</Label>\n                    <Input\n                      id=\"brand\"\n                      name=\"brand\"\n                      placeholder=\"Hikvision, Dahua, CP Plus\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"model\">Model *</Label>\n                    <Input\n                      id=\"model\"\n                      name=\"model\"\n                      placeholder=\"DS-7616NI-I2/16P\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serialNumber\">Serial Number</Label>\n                    <Input\n                      id=\"serialNumber\"\n                      name=\"serialNumber\"\n                      placeholder=\"HV123456789\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"locationId\">Location *</Label>\n                    <Select name=\"locationId\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select location\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {locations?.map(location => (\n                          <SelectItem key={location.id} value={location.id.toString()}>\n                            {location.outletName}, {location.city}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"ipAddress\">IP Address</Label>\n                    <Input\n                      id=\"ipAddress\"\n                      name=\"ipAddress\"\n                      placeholder=\"192.168.1.100\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"macAddress\">MAC Address</Label>\n                    <Input\n                      id=\"macAddress\"\n                      name=\"macAddress\"\n                      placeholder=\"00:11:22:33:44:55\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"installationDate\">Installation Date *</Label>\n                    <Input\n                      id=\"installationDate\"\n                      name=\"installationDate\"\n                      type=\"date\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"warrantyUntil\">Warranty Until</Label>\n                    <Input\n                      id=\"warrantyUntil\"\n                      name=\"warrantyUntil\"\n                      type=\"date\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"cameraCount\">Camera Count</Label>\n                    <Input\n                      id=\"cameraCount\"\n                      name=\"cameraCount\"\n                      type=\"number\"\n                      placeholder=\"16\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"storageCapacity\">Storage Capacity</Label>\n                    <Input\n                      id=\"storageCapacity\"\n                      name=\"storageCapacity\"\n                      placeholder=\"8TB\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notes\">Notes</Label>\n                  <Textarea\n                    id=\"notes\"\n                    name=\"notes\"\n                    placeholder=\"Additional notes about the system configuration\"\n                    rows={3}\n                  />\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">\n                    Add CCTV System\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Systems</CardTitle>\n            <Camera className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{totalSystems}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              All surveillance systems\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Systems</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{activeSystems}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Operational systems\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Cameras</CardTitle>\n            <Video className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{totalCameras}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across all systems\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">System Health</CardTitle>\n            <Shield className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{systemHealth}%</div>\n            <div className=\"mt-2\">\n              <Progress value={systemHealth} className=\"h-2\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"glass-card border-0 glass-card border-0\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Systems</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by System Name, Brand, Model, Serial Number, IP Address...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"fault\">Fault</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"nvr\">NVR Systems</SelectItem>\n                  <SelectItem value=\"dvr\">DVR Systems</SelectItem>\n                  <SelectItem value=\"ip_camera\">IP Cameras</SelectItem>\n                  <SelectItem value=\"analog_camera\">Analog Cameras</SelectItem>\n                  <SelectItem value=\"monitoring_station\">Monitoring Stations</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredSystems.length} of {cctvSystems?.length || 0} CCTV systems\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* CCTV Systems Table */}\n      <Card className=\"glass-card border-0 glass-card border-0\">\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>System</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Brand/Model</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Network</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Cameras</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredSystems.map((system) => {\n                const SystemIcon = getSystemTypeIcon(system.systemType)\n                \n                return (\n                  <TableRow key={system.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <SystemIcon className=\"h-8 w-8 p-1.5 bg-muted rounded-full\" />\n                        <div>\n                          <div className=\"font-medium\">{system.systemName}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {system.serialNumber || \"No serial number\"}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {getSystemTypeLabel(system.systemType)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{system.brand}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {system.model}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"h-3 w-3 text-muted-foreground\" />\n                        {getLocationName(system.locationId)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {system.ipAddress ? (\n                          <div>\n                            <div>{system.ipAddress}</div>\n                            {system.remoteAccess && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                <Wifi className=\"h-2 w-2 mr-1\" />\n                                Remote\n                              </Badge>\n                            )}\n                          </div>\n                        ) : (\n                          \"No IP configured\"\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"secondary\" \n                        className={getStatusBadgeColor(system.status)}\n                      >\n                        {system.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-center\">\n                        {system.cameraCount ? (\n                          <div className=\"flex items-center gap-1\">\n                            <Camera className=\"h-3 w-3\" />\n                            {system.cameraCount}\n                          </div>\n                        ) : (\n                          \"N/A\"\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedSystem(system)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit System\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Settings className=\"mr-2 h-4 w-4\" />\n                            Configure\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem className=\"text-red-600\">\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Remove System\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View System Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>CCTV System Details</DialogTitle>\n            <DialogDescription>\n              View surveillance system specifications, network configuration, storage capacity, and operational status\n            </DialogDescription>\n          </DialogHeader>\n          {selectedSystem && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">System Name</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded font-medium\">\n                    {selectedSystem.systemName}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">System Type</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getSystemTypeLabel(selectedSystem.systemType)}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Brand</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.brand}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Model</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.model}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Serial Number</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.serialNumber || \"Not specified\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Location</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getLocationName(selectedSystem.locationId)}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">IP Address</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.ipAddress || \"Not configured\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">MAC Address</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.macAddress || \"Not specified\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Camera Count</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.cameraCount || \"N/A\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Storage</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.storageCapacity || \"N/A\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Recording Quality</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.recordingQuality || \"N/A\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Installation Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDate(selectedSystem.installationDate)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Warranty Until</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.warrantyUntil ? formatDate(selectedSystem.warrantyUntil) : \"No warranty\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    <Badge className={getStatusBadgeColor(selectedSystem.status)}>\n                      {selectedSystem.status}\n                    </Badge>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Remote Access</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.remoteAccess ? (\n                      <Badge variant=\"outline\" className=\"text-green-600\">\n                        <Wifi className=\"h-3 w-3 mr-1\" />\n                        Enabled\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"outline\" className=\"text-gray-600\">\n                        Disabled\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {selectedSystem.maintenanceContract && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Maintenance Contract</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.maintenanceContract}\n                    {selectedSystem.lastMaintenanceDate && (\n                      <div className=\"text-xs text-muted-foreground mt-1\">\n                        Last maintenance: {formatDate(selectedSystem.lastMaintenanceDate)}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {selectedSystem.notes && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Notes</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.notes}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":35268},"client/src/pages/compliance.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Shield, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Calendar,\n  FileText,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Building2,\n  HardDrive,\n  Key,\n  Monitor,\n  Camera,\n  Fingerprint,\n  Settings,\n  Archive,\n  History\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { SidebarTrigger } from \"@/components/ui/sidebar\"\nimport { ObjectUploader } from \"@/components/ObjectUploader\"\n\ninterface ComplianceRecord {\n  id: number\n  taskName: string\n  taskType: \"backup\" | \"security_audit\" | \"policy_review\" | \"system_update\" | \"data_retention\" | \"access_review\"\n  description: string\n  category: \"data_backup\" | \"security\" | \"compliance\" | \"maintenance\" | \"governance\"\n  priority: \"low\" | \"medium\" | \"high\" | \"critical\"\n  status: \"pending\" | \"in_progress\" | \"completed\" | \"overdue\" | \"exempted\"\n  assignedTo: number | null\n  assignedToName: string | null\n  locationId: number | null\n  locationName: string | null\n  dueDate: string\n  completionDate: string | null\n  evidenceFiles: string[] | null\n  complianceScore: number | null\n  riskLevel: string | null\n  regulatoryFramework: string | null\n  notes: string | null\n  createdBy: number\n  createdByName: string | null\n  createdAt: string\n  updatedAt: string\n  isOverdue: boolean\n  daysUntilDue: number\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  assetType: string\n  status: \"available\" | \"assigned\" | \"maintenance\" | \"retired\"\n  locationId: number | null\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  pending: \"bg-yellow-400\",\n  completed: \"bg-green-400\",\n  overdue: \"bg-red-400\",\n  exempted: \"bg-gray-500\"\n}\n\n// Type color mapping\nconst typeColors: Record<string, string> = {\n  backup: \"bg-blue-400\",\n  security_audit: \"bg-red-400\",\n  policy_review: \"bg-purple-400\",\n  system_update: \"bg-orange-500\",\n  data_retention: \"bg-cyan-500\",\n  access_review: \"bg-pink-500\"\n}\n\n// Category icons\nconst categoryIcons: Record<string, any> = {\n  data_backup: HardDrive,\n  security: Shield,\n  compliance: FileText,\n  maintenance: Settings,\n  governance: Building2\n}\n\nexport default function CompliancePage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\")\n  const [categoryFilter, setCategoryFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedRecord, setSelectedRecord] = useState<ComplianceRecord | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [isCompleteDialogOpen, setIsCompleteDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Fetch data from API\n  const { data: assets } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  const { data: users } = useQuery<any[]>({\n    queryKey: [\"/api/users\"],\n  })\n\n  // Fetch compliance tasks from real API\n  const { data: compliance, isLoading: isLoadingCompliance } = useQuery<any[]>({\n    queryKey: [\"/api/compliance/tasks\"],\n  })\n\n  // Create compliance task mutation\n  const createTaskMutation = useMutation({\n    mutationFn: async (taskData: any) => {\n      const response = await fetch('/api/compliance/tasks', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(taskData),\n        credentials: 'include'\n      })\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(error.error || 'Failed to create task')\n      }\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/compliance/tasks'] })\n      toast({ title: \"Success\", description: \"Compliance task created successfully\" })\n      setIsCreateDialogOpen(false)\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to create task\", \n        variant: \"destructive\" \n      })\n    }\n  })\n\n  // Update compliance task mutation\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number, data: any }) => {\n      const response = await fetch(`/api/compliance/tasks/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n        credentials: 'include'\n      })\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(error.error || 'Failed to update task')\n      }\n      return response.json()\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/compliance/tasks'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/compliance/tasks', variables.id, 'audit-trail'] })\n      toast({ title: \"Success\", description: \"Task updated successfully\" })\n      setIsEditDialogOpen(false)\n      setIsCompleteDialogOpen(false)\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to update task\", \n        variant: \"destructive\" \n      })\n    }\n  })\n\n  // Delete compliance task mutation\n  const deleteTaskMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/compliance/tasks/${id}`, {\n        method: 'DELETE',\n        credentials: 'include'\n      })\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(error.error || 'Failed to delete task')\n      }\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/compliance/tasks'] })\n      toast({ title: \"Success\", description: \"Task deleted successfully\" })\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to delete task\", \n        variant: \"destructive\" \n      })\n    }\n  })\n\n  // Evidence upload mutation\n  const uploadEvidenceMutation = useMutation({\n    mutationFn: async ({ taskId, fileName, fileUrl, fileType, fileSize }: { taskId: number, fileName: string, fileUrl: string, fileType: string, fileSize: number }) => {\n      const response = await fetch(`/api/compliance/tasks/${taskId}/evidence`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ fileName, fileUrl, fileType, fileSize }),\n        credentials: 'include'\n      })\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(error.error || 'Failed to upload evidence')\n      }\n      return response.json()\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/compliance/tasks'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/compliance/tasks', variables.taskId, 'audit-trail'] })\n      toast({ title: \"Success\", description: \"Evidence uploaded successfully\" })\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to upload evidence\", \n        variant: \"destructive\" \n      })\n    }\n  })\n\n  // Fetch audit trail for selected task\n  const { data: auditTrail } = useQuery<any[]>({\n    queryKey: ['/api/compliance/tasks', selectedRecord?.id, 'audit-trail'],\n    enabled: !!selectedRecord?.id && isViewDialogOpen,\n  })\n\n  // Function to get upload parameters for object storage\n  const getUploadParameters = async () => {\n    const response = await fetch('/api/object-storage/upload-url', {\n      method: 'POST',\n      credentials: 'include'\n    })\n    if (!response.ok) {\n      throw new Error('Failed to get upload URL')\n    }\n    const data = await response.json()\n    return {\n      method: 'PUT' as const,\n      url: data.url\n    }\n  }\n\n  // Helper function to get compliance status\n  const getComplianceStatus = (record: ComplianceRecord) => {\n    if (record.isOverdue) return \"overdue\"\n    return record.status\n  }\n\n  // Filter compliance records\n  const filteredCompliance = compliance?.filter(record => {\n    const status = record.isOverdue ? 'overdue' : record.status\n    \n    const matchesSearch = \n      record.taskName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      record.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      record.assignedToName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      record.locationName?.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === \"all\" || status === statusFilter\n    const matchesType = typeFilter === \"all\" || record.taskType === typeFilter\n    const matchesCategory = categoryFilter === \"all\" || record.category === categoryFilter\n    const matchesLocation = locationFilter === \"all\" || record.locationId?.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesType && matchesCategory && matchesLocation\n  }) || []\n\n  // Helper functions\n  const getAssetInfo = (assetId: string | null) => {\n    if (!assetId) return null\n    return assets?.find(asset => asset.assetId === assetId)\n  }\n\n  const getLocationName = (locationId: number | null) => {\n    if (!locationId) return \"All Locations\"\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown\"\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"bg-green-100 text-green-800\"\n      case \"pending\": return \"bg-yellow-100 text-yellow-800\" \n      case \"overdue\": return \"bg-red-100 text-red-800\"\n      case \"exempted\": return \"bg-gray-100 text-gray-800\"\n      default: return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"backup\": return HardDrive\n      case \"security_audit\": return Shield\n      case \"policy_review\": return FileText\n      case \"system_update\": return Monitor\n      case \"data_retention\": return Archive\n      case \"access_review\": return Key\n      default: return Settings\n    }\n  }\n\n  // Calculate compliance metrics\n  const totalRecords = compliance?.length || 0\n  const completedRecords = compliance?.filter(r => r.status === 'completed').length || 0\n  const pendingRecords = compliance?.filter(r => r.status === 'pending').length || 0\n  const overdueRecords = compliance?.filter(r => r.isOverdue).length || 0\n  const complianceRate = totalRecords > 0 ? Math.round((completedRecords / totalRecords) * 100) : 0\n\n  return (\n    <div className=\"p-6 space-y-6 animate-fade-in\">\n      <SidebarTrigger data-testid=\"button-sidebar-toggle\" className=\"mb-4 text-white/80 hover:text-white hover:bg-white/10 rounded-md\" />\n      \n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight text-white\">Backup & Compliance</h1>\n          <p className=\"text-white/70\">\n            Monitor compliance activities and backup verification across all locations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Tasks\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export Report\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Compliance Task\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create Compliance Task</DialogTitle>\n                <DialogDescription>\n                  Add a new compliance monitoring task or backup verification\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={(e) => {\n                e.preventDefault()\n                const formData = new FormData(e.currentTarget)\n                const data = {\n                  taskName: formData.get('taskName') as string,\n                  taskType: formData.get('taskType') as string,\n                  category: formData.get('category') as string,\n                  description: formData.get('description') as string,\n                  priority: formData.get('priority') as string,\n                  locationId: parseInt(formData.get('locationId') as string),\n                  dueDate: formData.get('dueDate') as string,\n                  assignedTo: formData.get('assignedTo') ? parseInt(formData.get('assignedTo') as string) : null,\n                }\n                createTaskMutation.mutate(data)\n              }} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"taskType\">Task Type *</Label>\n                    <Select name=\"taskType\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select task type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"backup\">Backup Verification</SelectItem>\n                        <SelectItem value=\"security_audit\">Security Audit</SelectItem>\n                        <SelectItem value=\"policy_review\">Policy Review</SelectItem>\n                        <SelectItem value=\"system_update\">System Update</SelectItem>\n                        <SelectItem value=\"data_retention\">Data Retention</SelectItem>\n                        <SelectItem value=\"access_review\">Access Review</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"category\">Category *</Label>\n                    <Select name=\"category\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select category\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"data_backup\">Data Backup</SelectItem>\n                        <SelectItem value=\"security\">Security</SelectItem>\n                        <SelectItem value=\"compliance\">Compliance</SelectItem>\n                        <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                        <SelectItem value=\"governance\">Governance</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"taskName\">Task Title *</Label>\n                  <Input\n                    id=\"taskName\"\n                    name=\"taskName\"\n                    placeholder=\"Weekly backup verification\"\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Description *</Label>\n                  <Textarea\n                    id=\"description\"\n                    name=\"description\"\n                    placeholder=\"Detailed description of the compliance task\"\n                    rows={3}\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"priority\">Priority *</Label>\n                    <Select name=\"priority\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select priority\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                        <SelectItem value=\"critical\">Critical</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"locationId\">Location *</Label>\n                    <Select name=\"locationId\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select location\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {locations?.map(location => (\n                          <SelectItem key={location.id} value={location.id.toString()}>\n                            {location.outletName}, {location.city}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"dueDate\">Due Date *</Label>\n                    <Input\n                      id=\"dueDate\"\n                      name=\"dueDate\"\n                      type=\"date\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assignedTo\">Assigned To</Label>\n                    <Select name=\"assignedTo\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select user (optional)\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                        {users?.map(user => (\n                          <SelectItem key={user.id} value={user.id.toString()}>\n                            {user.fullName} ({user.role})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                    disabled={createTaskMutation.isPending}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createTaskMutation.isPending}>\n                    {createTaskMutation.isPending ? \"Creating...\" : \"Create Compliance Task\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Tasks</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{totalRecords}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              All compliance tasks\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Completed</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{completedRecords}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Tasks completed\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Overdue</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{overdueRecords}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Past due date\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Compliance Rate</CardTitle>\n            <Shield className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{complianceRate}%</div>\n            <div className=\"mt-2\">\n              <Progress value={complianceRate} className=\"h-2\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"glass-card border-0 glass-card border-0\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Compliance</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by Title, Description, Asset ID, Assigned Person...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"overdue\">Overdue</SelectItem>\n                  <SelectItem value=\"exempted\">Exempted</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"backup\">Backup</SelectItem>\n                  <SelectItem value=\"security_audit\">Security Audit</SelectItem>\n                  <SelectItem value=\"policy_review\">Policy Review</SelectItem>\n                  <SelectItem value=\"system_update\">System Update</SelectItem>\n                  <SelectItem value=\"data_retention\">Data Retention</SelectItem>\n                  <SelectItem value=\"access_review\">Access Review</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"data_backup\">Data Backup</SelectItem>\n                  <SelectItem value=\"security\">Security</SelectItem>\n                  <SelectItem value=\"compliance\">Compliance</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"governance\">Governance</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredCompliance.length} of {compliance?.length || 0} compliance records\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Compliance Table */}\n      <Card className=\"glass-card border-0 glass-card border-0\">\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Task</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Asset/Location</TableHead>\n                <TableHead>Due Date</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Assigned To</TableHead>\n                <TableHead>Evidence</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredCompliance.map((record) => {\n                const status = getComplianceStatus(record)\n                const TypeIcon = getTypeIcon(record.taskType)\n                \n                return (\n                  <TableRow key={record.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <TypeIcon className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">{record.taskName}</div>\n                          <div className=\"text-sm text-muted-foreground truncate max-w-xs\">\n                            {record.description}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className={`w-2 h-2 rounded-full ${typeColors[record.taskType]}`}\n                        />\n                        <span className=\"capitalize\">{record.taskType.replace('_', ' ')}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {record.locationName || \"All Locations\"}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                        {formatDate(record.dueDate)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"secondary\" \n                        className={getStatusBadgeColor(status)}\n                      >\n                        {status}\n                      </Badge>\n                      {record.completionDate && (\n                        <div className=\"text-xs text-muted-foreground mt-1\">\n                          Completed: {formatDate(record.completionDate)}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {record.assignedToName || \"Unassigned\"}\n                    </TableCell>\n                    <TableCell>\n                      {record.evidenceFiles && record.evidenceFiles.length > 0 ? (\n                        <div className=\"flex items-center gap-1 text-green-600\">\n                          <CheckCircle className=\"h-3 w-3\" />\n                          <span className=\"text-xs\">{record.evidenceFiles.length} file(s)</span>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center gap-1 text-gray-400\">\n                          <XCircle className=\"h-3 w-3\" />\n                          <span className=\"text-xs\">No evidence</span>\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedRecord(record)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedRecord(record)\n                              setIsEditDialogOpen(true)\n                            }}\n                          >\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit Task\n                          </DropdownMenuItem>\n                          {!record.completionDate && (\n                            <DropdownMenuItem\n                              onClick={() => {\n                                setSelectedRecord(record)\n                                setIsCompleteDialogOpen(true)\n                              }}\n                            >\n                              <CheckCircle className=\"mr-2 h-4 w-4\" />\n                              Mark Complete\n                            </DropdownMenuItem>\n                          )}\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem \n                            className=\"text-red-600\"\n                            onClick={() => deleteTaskMutation.mutate(record.id)}\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete Task\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Record Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Compliance Task Details</DialogTitle>\n            <DialogDescription>\n              Complete information about this compliance task\n            </DialogDescription>\n          </DialogHeader>\n          {selectedRecord && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Task Type</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded capitalize\">\n                    {selectedRecord.taskType.replace('_', ' ')}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Priority</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    <Badge variant={selectedRecord.priority === 'critical' ? 'destructive' : 'secondary'}>\n                      {selectedRecord.priority}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Task Name</Label>\n                <div className=\"text-sm p-2 bg-muted rounded font-medium\">\n                  {selectedRecord.taskName}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Description</Label>\n                <div className=\"text-sm p-2 bg-muted rounded\">\n                  {selectedRecord.description}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Due Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDate(selectedRecord.dueDate)}\n                    {selectedRecord.daysUntilDue !== undefined && (\n                      <div className=\"text-xs text-muted-foreground mt-1\">\n                        {selectedRecord.daysUntilDue >= 0 ? `${selectedRecord.daysUntilDue} days remaining` : `${Math.abs(selectedRecord.daysUntilDue)} days overdue`}\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    <Badge className={getStatusBadgeColor(getComplianceStatus(selectedRecord))}>\n                      {getComplianceStatus(selectedRecord)}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Assigned To</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedRecord.assignedToName || \"Unassigned\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Location</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedRecord.locationName || \"N/A\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-sm font-medium\">Evidence Files</Label>\n                  <ObjectUploader\n                    maxNumberOfFiles={5}\n                    maxFileSize={10485760}\n                    onGetUploadParameters={getUploadParameters}\n                    onComplete={(result) => {\n                      const file = result.successful[0];\n                      if (file && file.uploadURL) {\n                        uploadEvidenceMutation.mutate({\n                          taskId: selectedRecord.id,\n                          fileName: file.name,\n                          fileUrl: file.uploadURL.split('?')[0],\n                          fileType: file.type || 'application/octet-stream',\n                          fileSize: file.size\n                        });\n                      }\n                    }}\n                    buttonClassName=\"gap-2 h-8 text-xs\"\n                  >\n                    <Upload className=\"h-3 w-3\" />\n                    Upload Evidence\n                  </ObjectUploader>\n                </div>\n                <div className=\"border rounded-md p-3 bg-muted/50\">\n                  {selectedRecord.evidenceFiles && selectedRecord.evidenceFiles.length > 0 ? (\n                    <div className=\"space-y-2\">\n                      {selectedRecord.evidenceFiles.map((file, index) => (\n                        <div key={index} className=\"flex items-center justify-between p-2 bg-background rounded border\">\n                          <div className=\"flex items-center gap-2\">\n                            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                            <span className=\"text-sm\">{file}</span>\n                          </div>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => window.open(file, '_blank')}\n                            data-testid={`button-download-evidence-${index}`}\n                          >\n                            <Download className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-sm text-muted-foreground text-center py-2\">\n                      No evidence files uploaded\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {selectedRecord.notes && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Notes</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedRecord.notes}\n                  </div>\n                </div>\n              )}\n\n              <div className=\"space-y-2 border-t pt-4\">\n                <Label className=\"text-sm font-medium flex items-center gap-2\">\n                  <History className=\"h-4 w-4\" />\n                  Audit Trail\n                </Label>\n                <div className=\"border rounded-md p-3 bg-muted/50 max-h-60 overflow-y-auto\">\n                  {auditTrail && auditTrail.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {auditTrail.map((entry, index) => (\n                        <div key={index} className=\"text-sm border-l-2 border-primary/30 pl-3 pb-2\" data-testid={`audit-trail-entry-${index}`}>\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <span className=\"font-medium capitalize text-primary\">\n                              {entry.action.replace('_', ' ')}\n                            </span>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {new Date(entry.timestamp).toLocaleString('en-IN', { \n                                day: '2-digit',\n                                month: 'short', \n                                year: 'numeric',\n                                hour: '2-digit',\n                                minute: '2-digit',\n                                hour12: true\n                              })}\n                            </span>\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            by {entry.performedByName}\n                          </div>\n                          {entry.ipAddress && (\n                            <div className=\"text-xs text-muted-foreground mt-1\">\n                              IP: {entry.ipAddress}\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-sm text-muted-foreground text-center py-2\">\n                      No audit trail available\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":42208},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\"\nimport { useLocation } from \"wouter\"\nimport { SidebarTrigger } from \"@/components/ui/sidebar\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { \n  Laptop, \n  Users, \n  MapPin, \n  Wrench, \n  Clock, \n  CheckCircle, \n  AlertTriangle,\n  TrendingUp,\n  TrendingDown,\n  Camera,\n  Fingerprint,\n  Shield,\n  DollarSign,\n  Calendar,\n  Activity,\n  Server,\n  Wifi,\n  Database,\n  AlertCircle,\n  Eye\n} from \"lucide-react\"\n\n// TypeScript interfaces\ninterface Asset {\n  assetId: string\n  assetType: string\n  brand: string\n  modelName: string\n  serialNumber: string\n  purchaseDate: string\n  purchaseCost: number\n  warrantyUntil: string | null\n  status: \"assigned\" | \"available\" | \"maintenance\" | \"retired\"\n  condition: \"excellent\" | \"good\" | \"fair\" | \"poor\"\n  locationId: number | null\n}\n\ninterface Employee {\n  id: number\n  employeeCode: string\n  firstName: string\n  lastName: string\n  email: string\n  department: string\n  position: string\n  locationId: number | null\n}\n\ninterface Assignment {\n  id: number\n  assetId: string\n  employeeId: number\n  assignedDate: string\n  returnedDate: string | null\n  notes: string | null\n}\n\ninterface Maintenance {\n  id: number\n  assetId: string\n  maintenanceType: \"preventive\" | \"corrective\" | \"upgrade\"\n  description: string\n  scheduledDate: string\n  completedDate: string | null\n  cost: number | null\n  technicianName: string | null\n  partsReplaced: string | null\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n  manager: string | null\n  contactEmail: string | null\n  contactPhone: string | null\n}\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation()\n  \n  // Helper function to navigate with query parameters\n  const navigateWithParams = (path: string, params: Record<string, string>) => {\n    const queryString = new URLSearchParams(params).toString()\n    const fullPath = `${path}?${queryString}`\n    setLocation(fullPath)\n  }\n  \n  // Fetch all data for dashboard statistics\n  const { data: assets = [], isLoading: assetsLoading } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: employees = [], isLoading: employeesLoading } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  })\n\n  const { data: assignments = [], isLoading: assignmentsLoading } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n  })\n\n  const { data: maintenance = [], isLoading: maintenanceLoading } = useQuery<Maintenance[]>({\n    queryKey: [\"/api/maintenance\"],\n  })\n\n  const { data: locations = [], isLoading: locationsLoading } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Mock data for CCTV and Biometric systems (would come from API in real app)\n  const cctvSystems = 4 // Total CCTV systems\n  const cctvActive = 3 // Active systems\n  const biometricSystems = 5 // Total biometric systems\n  const biometricActive = 4 // Active systems\n  const totalCameras = 28 // Total cameras across all systems\n  const enrolledUsers = 252 // Total enrolled users in biometric systems\n\n  // Calculate comprehensive statistics\n  const totalAssets = assets.length\n  const totalEmployees = employees.length\n  const totalLocations = locations.length\n  \n  // Assignment statistics\n  const activeAssignments = assignments.filter(a => !a.returnedDate).length\n  const availableAssets = assets.filter(a => a.status === 'available').length\n  const assignedAssets = assets.filter(a => a.status === 'assigned').length\n  const assignmentRate = totalAssets > 0 ? Math.round((assignedAssets / totalAssets) * 100) : 0\n  \n  // Maintenance statistics  \n  const maintenanceDue = maintenance.filter(m => !m.completedDate).length\n  const maintenanceCompleted = maintenance.filter(m => m.completedDate).length\n  const maintenanceInProgress = maintenance.filter(m => {\n    if (m.completedDate) return false\n    const scheduledDate = new Date(m.scheduledDate)\n    const today = new Date()\n    today.setHours(0, 0, 0, 0)\n    return scheduledDate.toDateString() === today.toDateString()\n  }).length\n  \n  // Asset condition analysis\n  const assetConditions = assets.reduce((acc, asset) => {\n    acc[asset.condition] = (acc[asset.condition] || 0) + 1\n    return acc\n  }, {} as Record<string, number>)\n\n  // Asset distribution by type\n  const assetTypeDistribution = assets.reduce((acc, asset) => {\n    acc[asset.assetType] = (acc[asset.assetType] || 0) + 1\n    return acc\n  }, {} as Record<string, number>)\n\n  // Asset distribution by status\n  const assetStatusDistribution = assets.reduce((acc, asset) => {\n    acc[asset.status] = (acc[asset.status] || 0) + 1\n    return acc\n  }, {} as Record<string, number>)\n\n  // Cost analysis\n  const totalAssetValue = assets.reduce((sum, asset) => sum + (asset.purchaseCost || 0), 0)\n  const avgAssetCost = totalAssets > 0 ? totalAssetValue / totalAssets : 0\n  const maintenanceCosts = maintenance.reduce((sum, m) => sum + (m.cost || 0), 0)\n\n  // Location distribution\n  const locationDistribution = assets.reduce((acc, asset) => {\n    if (asset.locationId) {\n      const location = locations.find(l => l.id === asset.locationId)\n      if (location) {\n        const locationName = `${location.outletName}, ${location.city}`\n        acc[locationName] = (acc[locationName] || 0) + 1\n      }\n    }\n    return acc\n  }, {} as Record<string, number>)\n\n  // Recent activities (recent assignments with details)\n  const recentAssignments = assignments\n    .slice(-8)\n    .reverse()\n    .map(assignment => {\n      const asset = assets.find(a => a.assetId === assignment.assetId)\n      const employee = employees.find(e => e.id === assignment.employeeId)\n      return {\n        ...assignment,\n        asset,\n        employee\n      }\n    })\n    .filter(item => item.asset && item.employee)\n\n  // Warranty analysis\n  const currentDate = new Date()\n  const expiringSoon = assets.filter(asset => {\n    if (!asset.warrantyUntil) return false\n    const warrantyDate = new Date(asset.warrantyUntil)\n    const daysUntilExpiry = (warrantyDate.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24)\n    return daysUntilExpiry <= 90 && daysUntilExpiry > 0\n  }).length\n\n  // System health scores\n  const assetHealthScore = totalAssets > 0 ? Math.round(((totalAssets - maintenanceDue) / totalAssets) * 100) : 100\n  const cctvHealthScore = cctvSystems > 0 ? Math.round((cctvActive / cctvSystems) * 100) : 100\n  const biometricHealthScore = biometricSystems > 0 ? Math.round((biometricActive / biometricSystems) * 100) : 100\n  const overallSystemHealth = Math.round((assetHealthScore + cctvHealthScore + biometricHealthScore) / 3)\n\n  const isLoading = assetsLoading || employeesLoading || assignmentsLoading || maintenanceLoading || locationsLoading\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            {[...Array(8)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6 animate-fade-in\" data-testid=\"dashboard-page\">\n      <SidebarTrigger data-testid=\"button-sidebar-toggle\" className=\"mb-4 text-white/80 hover:text-white hover:bg-white/10 rounded-md\" />\n      \n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight text-white\" data-testid=\"title-dashboard\">Dashboard</h1>\n          <p className=\"text-white/70 mt-1\">\n            Centralized Master Data Management platform for enterprise resource lifecycle, workforce allocation, and operational intelligence.\n          </p>\n        </div>\n      </div>\n\n      {/* Enhanced Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card \n          data-testid=\"card-total-assets\" \n          className=\"glass-card glass-card-hover cursor-pointer transition-all duration-300 border-0 animate-slide-up\"\n          onClick={() => setLocation(\"/assets\")}\n          role=\"button\"\n          tabIndex={0}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\" || e.key === \" \") {\n              e.preventDefault()\n              setLocation(\"/assets\")\n            }\n          }}\n        >\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-white/90\">Total Assets</CardTitle>\n            <Laptop className=\"h-4 w-4 text-purple-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\" data-testid=\"text-total-assets\">{totalAssets}</div>\n            <p className=\"text-xs text-white/60\">\n              Worth ₹{(totalAssetValue / 100000).toFixed(1)}L • {totalLocations} locations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card \n          data-testid=\"card-assigned-assets\" \n          className=\"glass-card glass-card-hover cursor-pointer transition-all duration-300 border-0 animate-slide-up\"\n          style={{ animationDelay: \"0.1s\" }}\n          onClick={() => {\n            navigateWithParams(\"/assets\", { status: \"assigned\" })\n          }}\n          role=\"button\"\n          tabIndex={0}\n        >\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-white/90\">Asset Utilization</CardTitle>\n            <Users className=\"h-4 w-4 text-blue-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\" data-testid=\"text-assigned-assets\">{assignmentRate}%</div>\n            <p className=\"text-xs text-white/60 flex gap-2\">\n              <span \n                className=\"hover:text-white underline decoration-dotted cursor-pointer transition-colors\"\n                onClick={(e) => {\n                  e.stopPropagation()\n                  navigateWithParams(\"/assets\", { status: \"assigned\" })\n                }}\n              >\n                {assignedAssets} assigned\n              </span>\n              •\n              <span \n                className=\"hover:text-white underline decoration-dotted cursor-pointer transition-colors\"\n                onClick={(e) => {\n                  e.stopPropagation()\n                  navigateWithParams(\"/assets\", { status: \"available\" })\n                }}\n              >\n                {availableAssets} available\n              </span>\n            </p>\n            <Progress value={assignmentRate} className=\"mt-2 bg-white/10\" />\n          </CardContent>\n        </Card>\n\n        <Card \n          data-testid=\"card-maintenance-status\" \n          className=\"glass-card glass-card-hover cursor-pointer transition-all duration-300 border-0 animate-slide-up\"\n          style={{ animationDelay: \"0.2s\" }}\n          onClick={() => setLocation(\"/maintenance\")}\n          role=\"button\"\n          tabIndex={0}\n        >\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-white/90\">Maintenance Activities</CardTitle>\n            <Wrench className=\"h-4 w-4 text-orange-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-300\">{maintenanceDue}</div>\n            <p className=\"text-xs text-white/60\">\n              Scheduled • {maintenanceInProgress} active • {maintenanceCompleted} completed\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card \n          data-testid=\"card-warranty-status\" \n          className=\"glass-card glass-card-hover cursor-pointer transition-all duration-300 border-0 animate-slide-up\"\n          style={{ animationDelay: \"0.3s\" }}\n          onClick={() => setLocation(\"/warranty\")}\n        >\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-white/90\">Warranty Management</CardTitle>\n            <Shield className=\"h-4 w-4 text-blue-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{expiringSoon}</div>\n            <p className=\"text-xs text-white/60\">\n              Expiring within 90 days • Active monitoring\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Integration Systems Overview */}\n      <div className=\"grid gap-4 md:grid-cols-3 lg:grid-cols-3\">\n        <Card \n          className=\"glass-card glass-card-hover cursor-pointer transition-all duration-300 border-0\"\n          onClick={() => setLocation(\"/cctv\")}\n          data-testid=\"card-cctv-systems\"\n        >\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-white/90\">CCTV Systems</CardTitle>\n            <Camera className=\"h-4 w-4 text-blue-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold text-white\">{cctvActive}/{cctvSystems}</div>\n                <p className=\"text-xs text-white/60\">{totalCameras} cameras active</p>\n              </div>\n              <Badge variant={cctvHealthScore >= 90 ? \"default\" : \"destructive\"} className=\"bg-red-500/80 text-white border-0\">\n                {cctvHealthScore}% uptime\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card \n          className=\"glass-card glass-card-hover cursor-pointer transition-all duration-300 border-0\"\n          onClick={() => setLocation(\"/biometric\")}\n          data-testid=\"card-biometric-systems\"\n        >\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-white/90\">Biometric Systems</CardTitle>\n            <Fingerprint className=\"h-4 w-4 text-purple-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold text-white\">{biometricActive}/{biometricSystems}</div>\n                <p className=\"text-xs text-white/60\">{enrolledUsers} users enrolled</p>\n              </div>\n              <Badge variant={biometricHealthScore >= 90 ? \"default\" : \"destructive\"} className=\"bg-red-500/80 text-white border-0\">\n                {biometricHealthScore}% uptime\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card \n          className=\"glass-card glass-card-hover cursor-pointer transition-all duration-300 border-0\"\n          onClick={() => setLocation(\"/financial\")}\n          data-testid=\"card-financial-overview\"\n        >\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-white/90\">Financial Overview</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-green-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div>\n                <div className=\"text-2xl font-bold text-white\">₹{(maintenanceCosts / 100000).toFixed(1)}L</div>\n                <p className=\"text-xs text-white/60\">Total maintenance spend</p>\n              </div>\n              <div className=\"text-xs text-white/50\">\n                Avg asset cost: ₹{avgAssetCost.toLocaleString('en-IN')}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Enhanced Analytics Charts */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {/* Asset Distribution by Type */}\n        <Card className=\"glass-card border-0\">\n          <CardHeader>\n            <CardTitle className=\"text-lg text-white/90\">Asset Distribution by Type</CardTitle>\n            <p className=\"text-xs text-white/50 mt-1\">Equipment categorization across inventory</p>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {Object.entries(assetTypeDistribution)\n              .sort(([,a], [,b]) => (b as number) - (a as number))\n              .map(([type, count], index) => {\n                const typeColors = ['bg-blue-500', 'bg-purple-500', 'bg-pink-500', 'bg-teal-500', 'bg-green-500', 'bg-yellow-500', 'bg-orange-500', 'bg-red-500']\n                const colorClass = typeColors[index % typeColors.length]\n                const percentage = totalAssets > 0 ? ((count as number) / totalAssets) * 100 : 0\n                \n                return (\n                  <div \n                    key={type} \n                    className=\"group hover:bg-white/10 p-2 rounded-lg transition-all cursor-pointer\"\n                    onClick={() => {\n                      navigateWithParams(\"/assets\", { type: type })\n                    }}\n                    data-testid={`asset-type-${type.toLowerCase()}`}\n                  >\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`w-10 h-10 ${colorClass} rounded-lg flex items-center justify-center group-hover:scale-110 transition-transform`}>\n                          <span className=\"text-white font-bold text-xs\">{(count as number)}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-sm font-medium capitalize text-white\">{type}</span>\n                          <div className=\"text-xs text-white/50\">{percentage.toFixed(1)}% of total</div>\n                        </div>\n                      </div>\n                      <span className=\"text-white/50 group-hover:text-white/90 transition-colors\">→</span>\n                    </div>\n                  </div>\n                )\n              })}\n          </CardContent>\n        </Card>\n\n        {/* Asset Status Overview */}\n        <Card className=\"glass-card border-0\">\n          <CardHeader>\n            <CardTitle className=\"text-lg text-white/90\">Asset Status Overview</CardTitle>\n            <p className=\"text-xs text-white/50 mt-1\">Operational state and availability metrics</p>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {Object.entries(assetStatusDistribution).map(([status, count]) => {\n              const percentage = totalAssets > 0 ? ((count as number) / totalAssets) * 100 : 0\n              const statusConfig = {\n                assigned: { color: \"bg-blue-400\", icon: \"🔵\", label: \"In Use\" },\n                available: { color: \"bg-green-400\", icon: \"✅\", label: \"Ready to Deploy\" }, \n                maintenance: { color: \"bg-yellow-400\", icon: \"⚠️\", label: \"Under Service\" },\n                retired: { color: \"bg-red-400\", icon: \"⛔\", label: \"End of Life\" }\n              }\n              const config = statusConfig[status as keyof typeof statusConfig] || { color: \"bg-gray-400\", icon: \"⚪\", label: status }\n              \n              return (\n                <div \n                  key={status} \n                  className=\"relative cursor-pointer hover:bg-white/5 p-3 rounded-lg -m-3 mb-1 transition-all group\"\n                  onClick={() => {\n                    navigateWithParams(\"/assets\", { status: status })\n                  }}\n                  data-testid={`asset-status-${status}`}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-lg group-hover:scale-110 transition-transform\">{config.icon}</span>\n                      <div>\n                        <div className=\"text-sm font-medium text-white capitalize\">{config.label}</div>\n                        <div className=\"text-xs text-white/50\">{count as number} assets</div>\n                      </div>\n                    </div>\n                    <div className=\"text-right flex items-center gap-2\">\n                      <div className=\"text-lg font-bold text-white\">{percentage.toFixed(0)}%</div>\n                      <span className=\"text-white/50 group-hover:text-white/90 transition-colors\">→</span>\n                    </div>\n                  </div>\n                  <div className=\"w-full bg-white/10 rounded-full h-1.5\">\n                    <div \n                      className={`${config.color} h-1.5 rounded-full transition-all duration-500`}\n                      style={{width: `${percentage}%`}}\n                    ></div>\n                  </div>\n                </div>\n              )\n            })}\n          </CardContent>\n        </Card>\n\n        {/* Resource Allocation */}\n        <Card className=\"glass-card border-0\">\n          <CardHeader>\n            <CardTitle className=\"text-lg text-white/90\">Resource Allocation</CardTitle>\n            <p className=\"text-xs text-white/50 mt-1\">Workforce and equipment deployment analysis</p>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div \n                className=\"bg-gradient-to-br from-blue-500/20 to-blue-600/10 p-4 rounded-xl border border-blue-400/20 cursor-pointer hover:from-blue-500/30 hover:to-blue-600/20 transition-all group\"\n                onClick={() => setLocation('/employees')}\n                data-testid=\"resource-workforce\"\n              >\n                <Users className=\"h-6 w-6 text-blue-400 mb-2 group-hover:scale-110 transition-transform\" />\n                <div className=\"text-2xl font-bold text-white\">{totalEmployees}</div>\n                <div className=\"text-xs text-white/70\">Total Workforce</div>\n                <div className=\"text-xs text-blue-300 mt-1 flex items-center justify-between\">\n                  <span>Active personnel</span>\n                  <span className=\"text-white/50 group-hover:text-white/90 transition-colors\">→</span>\n                </div>\n              </div>\n              <div \n                className=\"bg-gradient-to-br from-purple-500/20 to-purple-600/10 p-4 rounded-xl border border-purple-400/20 cursor-pointer hover:from-purple-500/30 hover:to-purple-600/20 transition-all group\"\n                onClick={() => setLocation('/assignments')}\n                data-testid=\"resource-deployed\"\n              >\n                <Laptop className=\"h-6 w-6 text-purple-400 mb-2 group-hover:scale-110 transition-transform\" />\n                <div className=\"text-2xl font-bold text-white\">{assignedAssets}</div>\n                <div className=\"text-xs text-white/70\">Deployed Assets</div>\n                <div className=\"text-xs text-purple-300 mt-1 flex items-center justify-between\">\n                  <span>{((assignedAssets / totalAssets) * 100).toFixed(0)}% utilization</span>\n                  <span className=\"text-white/50 group-hover:text-white/90 transition-colors\">→</span>\n                </div>\n              </div>\n            </div>\n            <div \n              className=\"bg-gradient-to-br from-green-500/20 to-green-600/10 p-4 rounded-xl border border-green-400/20 cursor-pointer hover:from-green-500/30 hover:to-green-600/20 transition-all group\"\n              onClick={() => navigateWithParams('/assets', { status: 'available' })}\n              data-testid=\"resource-available\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <Database className=\"h-6 w-6 text-green-400 group-hover:scale-110 transition-transform\" />\n                  <div>\n                    <div className=\"text-xl font-bold text-white\">{availableAssets}</div>\n                    <div className=\"text-xs text-white/70\">Available for Assignment</div>\n                  </div>\n                </div>\n                <div className=\"text-right flex flex-col items-end\">\n                  <div className=\"text-sm font-medium text-green-300\">{((availableAssets / totalAssets) * 100).toFixed(0)}%</div>\n                  <div className=\"text-xs text-white/50 group-hover:text-white/90 transition-colors\">View →</div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activities and Quick Actions */}\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        {/* Recent Activities */}\n        <Card className=\"glass-card border-0\">\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2 text-white/90\">\n              <Clock className=\"h-5 w-5 text-blue-400\" />\n              Recent Activities\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {recentAssignments.length > 0 ? (\n              recentAssignments.slice(0, 6).map((item) => (\n                <div key={item.id} className=\"flex items-start gap-3 p-3 rounded-lg bg-white/10\">\n                  <div className=\"mt-0.5\">\n                    <CheckCircle className=\"h-4 w-4 text-green-400\" />\n                  </div>\n                  <div className=\"flex-1 space-y-1\">\n                    <p className=\"text-sm font-medium text-white/90\">\n                      {item.asset?.assetId} assigned to {item.employee?.firstName} {item.employee?.lastName}\n                    </p>\n                    <div className=\"flex items-center gap-2 text-xs text-white/60\">\n                      <span>{item.asset?.brand} {item.asset?.modelName}</span>\n                      <span>•</span>\n                      <span>{new Date(item.assignedDate).toLocaleDateString('en-IN')}</span>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-sm text-white/60\">No recent activities</div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Asset Condition Analysis */}\n        <Card className=\"glass-card border-0\">\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2 text-white/90\">\n              <Shield className=\"h-5 w-5 text-purple-400\" />\n              Asset Condition Analysis\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {Object.entries(assetConditions)\n              .sort(([,a], [,b]) => (b as number) - (a as number))\n              .map(([condition, count]) => {\n                const percentage = totalAssets > 0 ? ((count as number) / totalAssets) * 100 : 0\n                const conditionColors = {\n                  excellent: \"bg-green-400\",\n                  good: \"bg-blue-400\",\n                  fair: \"bg-yellow-400\", \n                  poor: \"bg-red-400\"\n                }\n                const conditionColor = conditionColors[condition as keyof typeof conditionColors] || \"bg-gray-400\"\n                \n                return (\n                  <div key={condition} className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm capitalize font-medium text-white/90\">{condition}</span>\n                      <span className=\"text-sm text-white/60\">\n                        {count as number} assets ({percentage.toFixed(1)}%)\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-white/10 rounded-full h-2\">\n                      <div \n                        className={`${conditionColor} h-2 rounded-full`} \n                        style={{width: `${percentage}%`}}\n                      ></div>\n                    </div>\n                  </div>\n                )\n              })}\n            \n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card className=\"glass-card border-0\">\n        <CardHeader>\n          <CardTitle className=\"text-lg text-white/90\">Operational Actions</CardTitle>\n          <p className=\"text-sm text-white/70\">Streamlined access to core MDM functions</p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-3 md:grid-cols-2 lg:grid-cols-4\">\n            <Button \n              variant=\"outline\" \n              className=\"h-auto p-4 flex flex-col items-center gap-2 glass-card glass-card-hover border-white/20 text-white\"\n              onClick={() => setLocation(\"/assets?action=create\")}\n              data-testid=\"button-add-asset\"\n            >\n              <Laptop className=\"h-5 w-5 text-purple-400\" />\n              <div className=\"text-center\">\n                <div className=\"font-medium\">Register Asset</div>\n                <div className=\"text-xs text-white/60\">Add new inventory item</div>\n              </div>\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              className=\"h-auto p-4 flex flex-col items-center gap-2 glass-card glass-card-hover border-white/20 text-white\"\n              onClick={() => setLocation(\"/assignments?action=create\")}\n              data-testid=\"button-assign-asset\"\n            >\n              <Users className=\"h-5 w-5 text-blue-400\" />\n              <div className=\"text-center\">\n                <div className=\"font-medium\">Deploy Asset</div>\n                <div className=\"text-xs text-white/60\">Resource allocation</div>\n              </div>\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              className=\"h-auto p-4 flex flex-col items-center gap-2 glass-card glass-card-hover border-white/20 text-white\"\n              onClick={() => setLocation(\"/maintenance?action=create\")}\n              data-testid=\"button-schedule-maintenance\"\n            >\n              <Wrench className=\"h-5 w-5 text-orange-400\" />\n              <div className=\"text-center\">\n                <div className=\"font-medium\">Maintenance Schedule</div>\n                <div className=\"text-xs text-white/60\">Service management</div>\n              </div>\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              className=\"h-auto p-4 flex flex-col items-center gap-2 glass-card glass-card-hover border-white/20 text-white\"\n              onClick={() => setLocation(\"/reports\")}\n              data-testid=\"button-view-reports\"\n            >\n              <Eye className=\"h-5 w-5 text-green-400\" />\n              <div className=\"text-center\">\n                <div className=\"font-medium\">Analytics Portal</div>\n                <div className=\"text-xs text-white/60\">Data insights</div>\n              </div>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":31122},"client/src/pages/employees.tsx":{"content":"import { useState, useEffect } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Users, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  User,\n  MapPin,\n  Briefcase,\n  Phone,\n  Mail,\n  Calendar,\n  Badge as BadgeIcon,\n  Building2,\n  Laptop,\n  ChevronDown,\n  ChevronUp,\n  X,\n  SlidersHorizontal,\n  Filter\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { SidebarTrigger } from \"@/components/ui/sidebar\"\nimport { ExcelExporter, ExcelImporter } from \"@/lib/excel\"\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  active: \"bg-green-400\",\n  inactive: \"bg-red-400\",\n  on_leave: \"bg-yellow-400\",\n}\n\ninterface Employee {\n  id: number\n  employeeCode: string\n  firstName: string\n  lastName: string\n  department: string\n  designation: string\n  email: string\n  phone: string\n  status: \"active\" | \"inactive\" | \"on_leave\"\n  locationId: number | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  assetType: string\n  currentUserId: number | null\n}\n\ninterface Assignment {\n  assetId: string\n  employeeId: number\n  assignedDate: string\n  returnedDate: string | null\n}\n\nexport default function EmployeesPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [departmentFilter, setDepartmentFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [designationFilter, setDesignationFilter] = useState<string>(\"all\")\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false)\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [expandedEmployeeId, setExpandedEmployeeId] = useState<number | null>(null)\n  const [isImportDialogOpen, setIsImportDialogOpen] = useState(false)\n  const [importFile, setImportFile] = useState<File | null>(null)\n  const [isImporting, setIsImporting] = useState(false)\n\n  // Form state for create dialog\n  const [createEmployee, setCreateEmployee] = useState({\n    employeeCode: '',\n    firstName: '',\n    lastName: '',\n    department: '',\n    designation: '',\n    email: '',\n    phone: '',\n    status: 'active',\n    locationId: ''\n  })\n\n  // Form state for edit dialog\n  const [editEmployee, setEditEmployee] = useState({\n    firstName: '',\n    lastName: '',\n    department: '',\n    designation: '',\n    email: '',\n    phone: '',\n    status: 'active',\n    locationId: ''\n  })\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Reset create form when dialog opens\n  useEffect(() => {\n    if (isCreateDialogOpen) {\n      setCreateEmployee({\n        employeeCode: '',\n        firstName: '',\n        lastName: '',\n        department: '',\n        designation: '',\n        email: '',\n        phone: '',\n        status: 'active',\n        locationId: ''\n      })\n    }\n  }, [isCreateDialogOpen])\n\n  // Populate editEmployee when selectedEmployee changes\n  useEffect(() => {\n    if (selectedEmployee && isEditDialogOpen) {\n      setEditEmployee({\n        firstName: selectedEmployee.firstName,\n        lastName: selectedEmployee.lastName,\n        department: selectedEmployee.department,\n        designation: selectedEmployee.designation,\n        email: selectedEmployee.email || '',\n        phone: selectedEmployee.phone || '',\n        status: selectedEmployee.status,\n        locationId: selectedEmployee.locationId?.toString() || ''\n      })\n    }\n  }, [selectedEmployee, isEditDialogOpen])\n\n  // Fetch data\n  const { data: employees, isLoading: employeesLoading } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  })\n\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  const { data: assets } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: assignments } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n  })\n\n  // Get unique departments and designations for filters\n  const departments = Array.from(new Set(employees?.map(emp => emp.department) || []))\n  const designations = Array.from(new Set(employees?.map(emp => emp.designation) || []))\n\n  // Filter employees\n  const filteredEmployees = employees?.filter(employee => {\n    const matchesSearch = \n      employee.employeeCode.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.department.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.designation.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === \"all\" || employee.status === statusFilter\n    const matchesDepartment = departmentFilter === \"all\" || employee.department === departmentFilter\n    const matchesLocation = locationFilter === \"all\" || employee.locationId?.toString() === locationFilter\n    const matchesDesignation = designationFilter === \"all\" || employee.designation === designationFilter\n    \n    return matchesSearch && matchesStatus && matchesDepartment && matchesLocation && matchesDesignation\n  }) || []\n\n  // Count active filters\n  const activeFiltersCount = [\n    departmentFilter !== \"all\",\n    locationFilter !== \"all\",\n    designationFilter !== \"all\"\n  ].filter(Boolean).length\n\n  // Create employee mutation\n  const createEmployeeMutation = useMutation({\n    mutationFn: async (employeeData: any) => {\n      const response = await fetch('/api/employees', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(employeeData),\n      })\n      if (!response.ok) throw new Error('Failed to create employee')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] })\n      toast({ title: \"Success\", description: \"Employee created successfully\" })\n      setIsCreateDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create employee\", variant: \"destructive\" })\n    }\n  })\n\n  // Update employee mutation  \n  const updateEmployeeMutation = useMutation({\n    mutationFn: async ({ employeeId, data }: { employeeId: number, data: any }) => {\n      const response = await fetch(`/api/employees/${employeeId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      })\n      if (!response.ok) throw new Error('Failed to update employee')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] })\n      toast({ title: \"Success\", description: \"Employee updated successfully\" })\n      setIsEditDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update employee\", variant: \"destructive\" })\n    }\n  })\n\n  // Delete employee mutation\n  const deleteEmployeeMutation = useMutation({\n    mutationFn: async (employeeId: number) => {\n      const response = await fetch(`/api/employees/${employeeId}`, {\n        method: 'DELETE',\n      })\n      if (!response.ok) throw new Error('Failed to delete employee')\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] })\n      toast({ title: \"Success\", description: \"Employee deleted successfully\" })\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete employee\", variant: \"destructive\" })\n    }\n  })\n\n  // Excel Export Handler\n  const handleExport = () => {\n    if (!employees || !locations || !assignments || !assets) {\n      toast({ title: \"Error\", description: \"Data not loaded yet\", variant: \"destructive\" })\n      return\n    }\n    \n    try {\n      ExcelExporter.exportEmployees(employees, locations, assignments, assets)\n      toast({ title: \"Success\", description: \"Employees exported successfully\" })\n    } catch (error) {\n      toast({ title: \"Error\", description: \"Failed to export employees\", variant: \"destructive\" })\n    }\n  }\n\n  // Excel Import Handler\n  const handleImport = async () => {\n    if (!importFile) {\n      toast({ title: \"Error\", description: \"Please select a file\", variant: \"destructive\" })\n      return\n    }\n\n    setIsImporting(true)\n\n    try {\n      const data = await ExcelImporter.parseExcelFile(importFile)\n      const { valid, errors } = ExcelImporter.validateEmployeeData(data)\n\n      if (errors.length > 0) {\n        toast({ \n          title: \"Validation Errors\", \n          description: `${errors.length} errors found. First error: ${errors[0]}`,\n          variant: \"destructive\" \n        })\n        setIsImporting(false)\n        return\n      }\n\n      for (const employeeData of valid) {\n        await createEmployeeMutation.mutateAsync(employeeData)\n      }\n\n      toast({ \n        title: \"Success\", \n        description: `Successfully imported ${valid.length} employees` \n      })\n      setIsImportDialogOpen(false)\n      setImportFile(null)\n    } catch (error) {\n      toast({ \n        title: \"Error\", \n        description: \"Failed to import employees\", \n        variant: \"destructive\" \n      })\n    } finally {\n      setIsImporting(false)\n    }\n  }\n\n  // Helper functions\n  const getLocationName = (locationId: number | null) => {\n    if (!locationId) return \"No location assigned\"\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown location\"\n  }\n\n  const getEmployeeAssets = (employeeId: number) => {\n    const activeAssignments = assignments?.filter(\n      assignment => assignment.employeeId === employeeId && !assignment.returnedDate\n    ) || []\n    \n    return activeAssignments.map(assignment => {\n      const asset = assets?.find(a => a.assetId === assignment.assetId)\n      return asset\n    }).filter(Boolean)\n  }\n\n  const handleCreateEmployee = (event: React.FormEvent) => {\n    event.preventDefault()\n\n    // Validate required fields\n    if (!createEmployee.employeeCode?.trim() || !createEmployee.firstName?.trim() || !createEmployee.lastName?.trim() || !createEmployee.department || !createEmployee.designation?.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields (Employee Code, First Name, Last Name, Department, Designation)\",\n        variant: \"destructive\",\n      })\n      return\n    }\n    \n    const employeeData = {\n      employeeCode: createEmployee.employeeCode.trim(),\n      firstName: createEmployee.firstName.trim(),\n      lastName: createEmployee.lastName.trim(),\n      department: createEmployee.department,\n      designation: createEmployee.designation.trim(),\n      email: createEmployee.email?.trim() || null,\n      phone: createEmployee.phone?.trim() || null,\n      status: createEmployee.status,\n      locationId: createEmployee.locationId ? parseInt(createEmployee.locationId) : null,\n    }\n\n    createEmployeeMutation.mutate(employeeData)\n  }\n\n  const handleUpdateEmployee = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedEmployee) return\n    \n    // Validate required fields\n    if (!editEmployee.firstName?.trim() || !editEmployee.lastName?.trim() || !editEmployee.department?.trim() || !editEmployee.designation?.trim()) {\n      toast({ \n        title: \"Validation Error\", \n        description: \"Please fill in all required fields (First Name, Last Name, Department, Designation)\", \n        variant: \"destructive\" \n      })\n      return\n    }\n    \n    const employeeData = {\n      firstName: editEmployee.firstName.trim(),\n      lastName: editEmployee.lastName.trim(),\n      department: editEmployee.department,\n      designation: editEmployee.designation.trim(),\n      email: editEmployee.email?.trim() || null,\n      phone: editEmployee.phone?.trim() || null,\n      status: editEmployee.status,\n      locationId: editEmployee.locationId ? parseInt(editEmployee.locationId) : null,\n    }\n\n    updateEmployeeMutation.mutate({ employeeId: selectedEmployee.id, data: employeeData })\n  }\n\n  if (employeesLoading) {\n    return (\n      <div className=\"p-6 space-y-6 animate-fade-in\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6 animate-fade-in\">\n      <SidebarTrigger data-testid=\"button-sidebar-toggle\" className=\"mb-4 text-white/80 hover:text-white hover:bg-white/10 rounded-md\" />\n      \n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight text-white\">Employees</h1>\n          <p className=\"text-white/70\">\n            Human resource management and organizational structure oversight\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={isImportDialogOpen} onOpenChange={setIsImportDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" className=\"gap-2\" data-testid=\"button-import-excel\">\n                <Upload className=\"h-4 w-4\" />\n                Import Excel\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Import Employees from Excel</DialogTitle>\n                <DialogDescription>\n                  Upload an Excel file to import employees. Download the template for the correct format.\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"import-file\">Excel File</Label>\n                  <Input\n                    id=\"import-file\"\n                    type=\"file\"\n                    accept=\".xlsx,.xls\"\n                    onChange={(e) => setImportFile(e.target.files?.[0] || null)}\n                    data-testid=\"input-import-file\"\n                  />\n                </div>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => ExcelImporter.downloadEmployeeTemplate()}\n                  data-testid=\"button-download-template\"\n                >\n                  Download Template\n                </Button>\n              </div>\n              <DialogFooter>\n                <Button variant=\"outline\" onClick={() => setIsImportDialogOpen(false)} data-testid=\"button-cancel-import\">\n                  Cancel\n                </Button>\n                <Button onClick={handleImport} disabled={!importFile || isImporting} data-testid=\"button-confirm-import\">\n                  {isImporting ? \"Importing...\" : \"Import\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n          <Button variant=\"outline\" className=\"gap-2\" onClick={handleExport} data-testid=\"button-export\">\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Employee\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Employee</DialogTitle>\n                <DialogDescription>\n                  Onboard new personnel with complete organizational details and department assignment\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateEmployee} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"employeeCode\">Employee Code *</Label>\n                  <Input\n                    id=\"employeeCode\"\n                    value={createEmployee.employeeCode}\n                    onChange={(e) => setCreateEmployee({ ...createEmployee, employeeCode: e.target.value })}\n                    placeholder=\"BFC2024001\"\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\">First Name *</Label>\n                    <Input\n                      id=\"firstName\"\n                      value={createEmployee.firstName}\n                      onChange={(e) => setCreateEmployee({ ...createEmployee, firstName: e.target.value })}\n                      placeholder=\"John\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastName\">Last Name *</Label>\n                    <Input\n                      id=\"lastName\"\n                      value={createEmployee.lastName}\n                      onChange={(e) => setCreateEmployee({ ...createEmployee, lastName: e.target.value })}\n                      placeholder=\"Doe\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"department\">Department *</Label>\n                    <Select value={createEmployee.department} onValueChange={(value) => setCreateEmployee({ ...createEmployee, department: value })} required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select department\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"IT\">IT</SelectItem>\n                        <SelectItem value=\"Sales\">Sales</SelectItem>\n                        <SelectItem value=\"Marketing\">Marketing</SelectItem>\n                        <SelectItem value=\"Operations\">Operations</SelectItem>\n                        <SelectItem value=\"Finance\">Finance</SelectItem>\n                        <SelectItem value=\"HR\">HR</SelectItem>\n                        <SelectItem value=\"Management\">Management</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"designation\">Designation *</Label>\n                    <Input\n                      id=\"designation\"\n                      value={createEmployee.designation}\n                      onChange={(e) => setCreateEmployee({ ...createEmployee, designation: e.target.value })}\n                      placeholder=\"Software Engineer, Sales Manager...\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address *</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={createEmployee.email}\n                      onChange={(e) => setCreateEmployee({ ...createEmployee, email: e.target.value })}\n                      placeholder=\"john.doe@bodycraft.com\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone Number *</Label>\n                    <Input\n                      id=\"phone\"\n                      value={createEmployee.phone}\n                      onChange={(e) => setCreateEmployee({ ...createEmployee, phone: e.target.value })}\n                      placeholder=\"+91 9876543210\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"locationId\">Location</Label>\n                    <Select value={createEmployee.locationId} onValueChange={(value) => setCreateEmployee({ ...createEmployee, locationId: value })}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select location\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {locations?.map(location => (\n                          <SelectItem key={location.id} value={location.id.toString()}>\n                            {location.outletName}, {location.city}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"status\">Status</Label>\n                    <Select value={createEmployee.status} onValueChange={(value: any) => setCreateEmployee({ ...createEmployee, status: value })}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"inactive\">Inactive</SelectItem>\n                        <SelectItem value=\"on_leave\">On Leave</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createEmployeeMutation.isPending}>\n                    {createEmployeeMutation.isPending ? \"Creating...\" : \"Create Employee\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Employees</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{employees?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across {departments.length} departments\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active</CardTitle>\n            <BadgeIcon className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">\n              {employees?.filter(emp => emp.status === 'active').length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently working\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">With Assets</CardTitle>\n            <Laptop className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">\n              {employees?.filter(emp => \n                assignments?.some(assignment => \n                  assignment.employeeId === emp.id && !assignment.returnedDate\n                )\n              ).length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Have assigned assets\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Departments</CardTitle>\n            <Building2 className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{departments.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Active departments\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"glass-card border-0 glass-card border-0\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Employees</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-4 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none z-10\" />\n              <Input\n                placeholder=\"Search by Name, Employee Code, Email, Department...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"h-12 pl-12 pr-12 backdrop-blur-sm border-border/40 focus:border-primary/50 transition-all\"\n                data-testid=\"input-search-employees\"\n              />\n              {searchTerm && (\n                <button\n                  onClick={() => setSearchTerm(\"\")}\n                  className=\"absolute right-4 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors\"\n                  data-testid=\"button-clear-search\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </button>\n              )}\n            </div>\n            \n            <Button\n              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n              variant=\"outline\"\n              className=\"h-12 gap-2 min-w-[180px] backdrop-blur-sm border-border/40 hover:border-primary/50 transition-all\"\n              data-testid=\"button-toggle-advanced-filters\"\n            >\n              <SlidersHorizontal className=\"h-4 w-4\" />\n              Advanced Filters\n              {activeFiltersCount > 0 && (\n                <Badge variant=\"default\" className=\"ml-1 px-2 py-0.5 text-xs\">\n                  {activeFiltersCount}\n                </Badge>\n              )}\n            </Button>\n          </div>\n\n          {/* Quick Filters */}\n          <div className=\"flex flex-wrap gap-2\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-[140px] backdrop-blur-sm border-border/40\" data-testid=\"select-filter-status\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"inactive\">Inactive</SelectItem>\n                <SelectItem value=\"on_leave\">On Leave</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {(departmentFilter !== \"all\" || locationFilter !== \"all\" || designationFilter !== \"all\") && (\n              <Button\n                onClick={() => {\n                  setDepartmentFilter(\"all\")\n                  setLocationFilter(\"all\")\n                  setDesignationFilter(\"all\")\n                }}\n                variant=\"ghost\"\n                className=\"gap-2 text-muted-foreground hover:text-foreground backdrop-blur-sm\"\n                data-testid=\"button-reset-filters\"\n              >\n                <X className=\"h-4 w-4\" />\n                Clear All\n              </Button>\n            )}\n          </div>\n\n          {/* Advanced Filters Panel */}\n          {showAdvancedFilters && (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 p-4 rounded-lg bg-muted/10 backdrop-blur-sm border border-border/40 animate-fade-in\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <Filter className=\"h-4 w-4 text-primary\" />\n                  Department\n                </label>\n                <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n                  <SelectTrigger className=\"backdrop-blur-sm border-border/40\" data-testid=\"select-filter-department\">\n                    <SelectValue placeholder=\"All Departments\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Departments</SelectItem>\n                    {departments.map(dept => (\n                      <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <Filter className=\"h-4 w-4 text-primary\" />\n                  Location\n                </label>\n                <Select value={locationFilter} onValueChange={setLocationFilter}>\n                  <SelectTrigger className=\"backdrop-blur-sm border-border/40\" data-testid=\"select-filter-location\">\n                    <SelectValue placeholder=\"All Locations\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Locations</SelectItem>\n                    {locations?.map(location => (\n                      <SelectItem key={location.id} value={location.id.toString()}>\n                        {location.outletName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <Filter className=\"h-4 w-4 text-primary\" />\n                  Designation\n                </label>\n                <Select value={designationFilter} onValueChange={setDesignationFilter}>\n                  <SelectTrigger className=\"backdrop-blur-sm border-border/40\" data-testid=\"select-filter-designation\">\n                    <SelectValue placeholder=\"All Designations\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Designations</SelectItem>\n                    {designations.map(designation => (\n                      <SelectItem key={designation} value={designation}>{designation}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredEmployees.length} of {employees?.length || 0} employees\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Employees Table */}\n      <Card className=\"glass-card border-0 glass-card border-0\">\n        <CardContent className=\"p-0 table-container-stable\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Employee</TableHead>\n                <TableHead>Department</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Contact</TableHead>\n                <TableHead>Assigned Assets</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredEmployees.flatMap((employee) => {\n                const employeeAssets = getEmployeeAssets(employee.id)\n                const isExpanded = expandedEmployeeId === employee.id\n                const rows = [\n                  <TableRow \n                    key={`main-${employee.id}`}\n                    onClick={() => setExpandedEmployeeId(isExpanded ? null : employee.id)}\n                    className=\"hover:bg-muted/20 transition-all duration-150 border-b border-border/30 group cursor-pointer\"\n                    data-testid={`row-employee-${employee.id}`}\n                  >\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"flex items-center justify-center w-8 h-8 bg-muted/50 rounded-full group-hover:bg-muted transition-colors\">\n                          {isExpanded ? (\n                            <ChevronUp className=\"h-4 w-4\" />\n                          ) : (\n                            <ChevronDown className=\"h-4 w-4\" />\n                          )}\n                        </div>\n                        <User className=\"h-8 w-8 p-1.5 bg-muted rounded-full\" />\n                        <div>\n                          <div className=\"font-medium\">\n                            {employee.firstName} {employee.lastName}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground font-mono\">\n                            {employee.employeeCode}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <Badge variant=\"outline\">{employee.department}</Badge>\n                        <div className=\"text-sm text-muted-foreground mt-1\">\n                          {employee.designation}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className={`w-2 h-2 rounded-full ${statusColors[employee.status]}`}\n                        />\n                        <span className=\"capitalize\">{employee.status.replace('_', ' ')}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"h-3 w-3 text-muted-foreground\" />\n                        {getLocationName(employee.locationId)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center gap-1 text-sm\">\n                          <Mail className=\"h-3 w-3 text-muted-foreground\" />\n                          {employee.email}\n                        </div>\n                        <div className=\"flex items-center gap-1 text-sm\">\n                          <Phone className=\"h-3 w-3 text-muted-foreground\" />\n                          {employee.phone}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        {employeeAssets?.length > 0 ? (\n                          employeeAssets.map((asset, index) => (\n                            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                              {asset?.assetId}\n                            </Badge>\n                          ))\n                        ) : (\n                          <span className=\"text-sm text-muted-foreground\">No assets</span>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ]\n\n                if (isExpanded) {\n                  rows.push(\n                    <TableRow key={`expanded-${employee.id}`} className=\"bg-muted/10 hover:bg-muted/10\">\n                      <TableCell colSpan={6} className=\"p-6\">\n                        <div className=\"grid grid-cols-3 gap-6\">\n                          <div className=\"space-y-4\">\n                            <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Employee Information</h4>\n                            <div className=\"space-y-3\">\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Employee Code</div>\n                                <div className=\"font-mono text-sm mt-1\">{employee.employeeCode}</div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Full Name</div>\n                                <div className=\"text-sm mt-1\">{employee.firstName} {employee.lastName}</div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Department</div>\n                                <div className=\"text-sm mt-1\">{employee.department}</div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Designation</div>\n                                <div className=\"text-sm mt-1\">{employee.designation}</div>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"space-y-4\">\n                            <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Contact Information</h4>\n                            <div className=\"space-y-3\">\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Email Address</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <Mail className=\"h-3 w-3\" />\n                                  {employee.email}\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Phone Number</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <Phone className=\"h-3 w-3\" />\n                                  {employee.phone}\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Location</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <MapPin className=\"h-3 w-3\" />\n                                  {getLocationName(employee.locationId)}\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Status</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <div className={`w-2 h-2 rounded-full ${statusColors[employee.status]}`} />\n                                  <span className=\"capitalize\">{employee.status.replace('_', ' ')}</span>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"space-y-4\">\n                            <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Assigned Assets</h4>\n                            <div className=\"space-y-2\">\n                              {employeeAssets && employeeAssets.length > 0 ? (\n                                employeeAssets.map((asset, index) => (\n                                  <div key={index} className=\"p-3 bg-muted/30 rounded-lg\">\n                                    <div className=\"flex items-center gap-2 mb-1\">\n                                      <Laptop className=\"h-4 w-4 text-muted-foreground\" />\n                                      <span className=\"font-mono text-sm font-medium\">{asset?.assetId}</span>\n                                    </div>\n                                    <div className=\"text-xs text-muted-foreground\">\n                                      {asset?.brand} {asset?.modelName}\n                                    </div>\n                                    <div className=\"text-xs text-muted-foreground mt-1\">\n                                      Type: {asset?.assetType}\n                                    </div>\n                                  </div>\n                                ))\n                              ) : (\n                                <div className=\"text-sm text-muted-foreground italic p-3 bg-muted/20 rounded-lg\">\n                                  No assets currently assigned to this employee\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex gap-2 mt-6 pt-4 border-t border-border/50\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              setSelectedEmployee(employee)\n                              setIsViewDialogOpen(true)\n                            }}\n                            data-testid={`button-view-details-${employee.id}`}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Full Details\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              setSelectedEmployee(employee)\n                              setIsEditDialogOpen(true)\n                            }}\n                            data-testid={`button-edit-employee-${employee.id}`}\n                          >\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit Employee\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              if (window.confirm(`Are you sure you want to delete ${employee.firstName} ${employee.lastName}? This action cannot be undone.`)) {\n                                deleteEmployeeMutation.mutate(employee.id)\n                              }\n                            }}\n                            data-testid={`button-delete-employee-${employee.id}`}\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete Employee\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  )\n                }\n\n                return rows\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Employee Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Employee Details</DialogTitle>\n            <DialogDescription>\n              View personnel profile, contact information, and resource allocation for {selectedEmployee?.firstName} {selectedEmployee?.lastName}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedEmployee && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Employee Code</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded font-mono\">\n                    {selectedEmployee.employeeCode}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Full Name</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedEmployee.firstName} {selectedEmployee.lastName}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Department</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedEmployee.department}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Designation</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedEmployee.designation}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Email</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedEmployee.email}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Phone</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedEmployee.phone}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded flex items-center gap-2\">\n                    <div className={`w-2 h-2 rounded-full ${statusColors[selectedEmployee.status]}`} />\n                    <span className=\"capitalize\">{selectedEmployee.status.replace('_', ' ')}</span>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Location</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getLocationName(selectedEmployee.locationId)}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Assigned Assets</Label>\n                <div className=\"p-2 bg-muted rounded\">\n                  {getEmployeeAssets(selectedEmployee.id)?.length > 0 ? (\n                    <div className=\"flex flex-wrap gap-2\">\n                      {getEmployeeAssets(selectedEmployee.id).map((asset, index) => (\n                        <Badge key={index} variant=\"secondary\">\n                          {asset?.assetId} ({asset?.brand} {asset?.modelName})\n                        </Badge>\n                      ))}\n                    </div>\n                  ) : (\n                    <span className=\"text-sm text-muted-foreground\">No assets assigned</span>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Employee Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Employee</DialogTitle>\n            <DialogDescription>\n              Modify personnel details, department assignment, and contact information for {selectedEmployee?.firstName} {selectedEmployee?.lastName}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedEmployee && (\n            <form onSubmit={handleUpdateEmployee} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-firstName\">First Name *</Label>\n                  <Input\n                    id=\"edit-firstName\"\n                    value={editEmployee.firstName}\n                    onChange={(e) => setEditEmployee({ ...editEmployee, firstName: e.target.value })}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-lastName\">Last Name *</Label>\n                  <Input\n                    id=\"edit-lastName\"\n                    value={editEmployee.lastName}\n                    onChange={(e) => setEditEmployee({ ...editEmployee, lastName: e.target.value })}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-department\">Department *</Label>\n                  <Select value={editEmployee.department} onValueChange={(value) => setEditEmployee({ ...editEmployee, department: value })} required>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"IT\">IT</SelectItem>\n                      <SelectItem value=\"Sales\">Sales</SelectItem>\n                      <SelectItem value=\"Marketing\">Marketing</SelectItem>\n                      <SelectItem value=\"Operations\">Operations</SelectItem>\n                      <SelectItem value=\"Finance\">Finance</SelectItem>\n                      <SelectItem value=\"HR\">HR</SelectItem>\n                      <SelectItem value=\"Management\">Management</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-designation\">Designation *</Label>\n                  <Input\n                    id=\"edit-designation\"\n                    value={editEmployee.designation}\n                    onChange={(e) => setEditEmployee({ ...editEmployee, designation: e.target.value })}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-email\">Email Address *</Label>\n                  <Input\n                    id=\"edit-email\"\n                    type=\"email\"\n                    value={editEmployee.email}\n                    onChange={(e) => setEditEmployee({ ...editEmployee, email: e.target.value })}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-phone\">Phone Number *</Label>\n                  <Input\n                    id=\"edit-phone\"\n                    value={editEmployee.phone}\n                    onChange={(e) => setEditEmployee({ ...editEmployee, phone: e.target.value })}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-locationId\">Location</Label>\n                  <Select value={editEmployee.locationId} onValueChange={(value) => setEditEmployee({ ...editEmployee, locationId: value })}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select location\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {locations?.map(location => (\n                        <SelectItem key={location.id} value={location.id.toString()}>\n                          {location.outletName}, {location.city}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-status\">Status</Label>\n                  <Select value={editEmployee.status} onValueChange={(value: any) => setEditEmployee({ ...editEmployee, status: value })}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"inactive\">Inactive</SelectItem>\n                      <SelectItem value=\"on_leave\">On Leave</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsEditDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateEmployeeMutation.isPending}>\n                  {updateEmployeeMutation.isPending ? \"Updating...\" : \"Update Employee\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":55566},"client/src/pages/locations.tsx":{"content":"import { useState, useEffect } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  MapPin, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Building2,\n  Users,\n  Laptop,\n  Phone,\n  Mail,\n  User,\n  Package,\n  BarChart3,\n  Clock,\n  ChevronDown,\n  ChevronUp,\n  X,\n  SlidersHorizontal,\n  Filter\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { SidebarTrigger } from \"@/components/ui/sidebar\"\nimport { ExcelExporter, ExcelImporter } from \"@/lib/excel\"\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n  address: string\n  managerName: string\n  contactDetails: string\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  assetType: string\n  status: \"available\" | \"assigned\" | \"maintenance\" | \"retired\"\n  locationId: number | null\n}\n\ninterface Employee {\n  id: number\n  employeeCode: string\n  firstName: string\n  lastName: string\n  department: string\n  locationId: number | null\n  status: \"active\" | \"inactive\" | \"on_leave\"\n}\n\ninterface Assignment {\n  assetId: string\n  employeeId: number\n  assignedDate: string\n  returnedDate: string | null\n}\n\nexport default function LocationsPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [stateFilter, setStateFilter] = useState<string>(\"all\")\n  const [cityFilter, setCityFilter] = useState<string>(\"all\")\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false)\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedLocation, setSelectedLocation] = useState<Location | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [expandedLocationId, setExpandedLocationId] = useState<number | null>(null)\n  const [isImportDialogOpen, setIsImportDialogOpen] = useState(false)\n  const [importFile, setImportFile] = useState<File | null>(null)\n  const [isImporting, setIsImporting] = useState(false)\n\n  // Form state for Create Location dialog\n  const [createForm, setCreateForm] = useState({\n    outletName: '',\n    city: '',\n    state: '',\n    address: '',\n    managerName: '',\n    contactDetails: ''\n  })\n\n  // Form state for Update Location dialog\n  const [updateForm, setUpdateForm] = useState({\n    outletName: '',\n    city: '',\n    state: '',\n    address: '',\n    managerName: '',\n    contactDetails: ''\n  })\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Reset create form when dialog opens\n  useEffect(() => {\n    if (isCreateDialogOpen) {\n      setCreateForm({\n        outletName: '',\n        city: '',\n        state: '',\n        address: '',\n        managerName: '',\n        contactDetails: ''\n      })\n    }\n  }, [isCreateDialogOpen])\n\n  // Populate update form when selectedLocation changes\n  useEffect(() => {\n    if (selectedLocation && isEditDialogOpen) {\n      setUpdateForm({\n        outletName: selectedLocation.outletName,\n        city: selectedLocation.city,\n        state: selectedLocation.state,\n        address: selectedLocation.address || '',\n        managerName: selectedLocation.managerName || '',\n        contactDetails: selectedLocation.contactDetails || ''\n      })\n    }\n  }, [selectedLocation, isEditDialogOpen])\n\n  // Fetch data\n  const { data: locations, isLoading: locationsLoading } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  const { data: assets } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: employees } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  })\n\n  const { data: assignments } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n  })\n\n  // Get unique states and cities for filter\n  const states = Array.from(new Set(locations?.map(loc => loc.state) || []))\n  const cities = Array.from(new Set(locations?.map(loc => loc.city) || []))\n\n  // Filter locations\n  const filteredLocations = locations?.filter(location => {\n    const matchesSearch = \n      location.outletName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      location.city.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      location.managerName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      location.address.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesState = stateFilter === \"all\" || location.state === stateFilter\n    const matchesCity = cityFilter === \"all\" || location.city === cityFilter\n    \n    return matchesSearch && matchesState && matchesCity\n  }) || []\n\n  // Count active filters\n  const activeFiltersCount = [\n    stateFilter !== \"all\",\n    cityFilter !== \"all\"\n  ].filter(Boolean).length\n\n  // Create location mutation\n  const createLocationMutation = useMutation({\n    mutationFn: async (locationData: any) => {\n      const response = await fetch('/api/locations', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(locationData),\n      })\n      if (!response.ok) throw new Error('Failed to create location')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/locations'] })\n      toast({ title: \"Success\", description: \"Location created successfully\" })\n      setIsCreateDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create location\", variant: \"destructive\" })\n    }\n  })\n\n  // Update location mutation  \n  const updateLocationMutation = useMutation({\n    mutationFn: async ({ locationId, data }: { locationId: number, data: any }) => {\n      const response = await fetch(`/api/locations/${locationId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      })\n      if (!response.ok) throw new Error('Failed to update location')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/locations'] })\n      toast({ title: \"Success\", description: \"Location updated successfully\" })\n      setIsEditDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update location\", variant: \"destructive\" })\n    }\n  })\n\n  // Delete location mutation\n  const deleteLocationMutation = useMutation({\n    mutationFn: async (locationId: number) => {\n      const response = await fetch(`/api/locations/${locationId}`, {\n        method: 'DELETE',\n      })\n      if (!response.ok) throw new Error('Failed to delete location')\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/locations'] })\n      toast({ title: \"Success\", description: \"Location deleted successfully\" })\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete location\", variant: \"destructive\" })\n    }\n  })\n\n  // Excel Export Handler\n  const handleExport = () => {\n    if (!locations || !assets || !employees || !assignments) {\n      toast({ title: \"Error\", description: \"Data not loaded yet\", variant: \"destructive\" })\n      return\n    }\n    \n    try {\n      ExcelExporter.exportLocations(locations, assets, employees, assignments)\n      toast({ title: \"Success\", description: \"Locations exported successfully\" })\n    } catch (error) {\n      toast({ title: \"Error\", description: \"Failed to export locations\", variant: \"destructive\" })\n    }\n  }\n\n  // Excel Import Handler\n  const handleImport = async () => {\n    if (!importFile) {\n      toast({ title: \"Error\", description: \"Please select a file\", variant: \"destructive\" })\n      return\n    }\n\n    setIsImporting(true)\n\n    try {\n      const data = await ExcelImporter.parseExcelFile(importFile)\n      const { valid, errors } = ExcelImporter.validateLocationData(data)\n\n      if (errors.length > 0) {\n        toast({ \n          title: \"Validation Errors\", \n          description: `${errors.length} errors found. First error: ${errors[0]}`,\n          variant: \"destructive\" \n        })\n        setIsImporting(false)\n        return\n      }\n\n      for (const locationData of valid) {\n        await createLocationMutation.mutateAsync(locationData)\n      }\n\n      toast({ \n        title: \"Success\", \n        description: `Successfully imported ${valid.length} locations` \n      })\n      setIsImportDialogOpen(false)\n      setImportFile(null)\n    } catch (error) {\n      toast({ \n        title: \"Error\", \n        description: \"Failed to import locations\", \n        variant: \"destructive\" \n      })\n    } finally {\n      setIsImporting(false)\n    }\n  }\n\n  // Helper functions\n  const getLocationAssets = (locationId: number) => {\n    return assets?.filter(asset => asset.locationId === locationId) || []\n  }\n\n  const getLocationEmployees = (locationId: number) => {\n    return employees?.filter(employee => employee.locationId === locationId) || []\n  }\n\n  const getActiveAssignments = (locationId: number) => {\n    const locationEmployees = getLocationEmployees(locationId)\n    const employeeIds = locationEmployees.map(emp => emp.id)\n    return assignments?.filter(assignment => \n      employeeIds.includes(assignment.employeeId) && !assignment.returnedDate\n    ) || []\n  }\n\n  const getAssetTypeDistribution = (locationId: number) => {\n    const locationAssets = getLocationAssets(locationId)\n    const distribution: Record<string, number> = {}\n    locationAssets.forEach(asset => {\n      distribution[asset.assetType] = (distribution[asset.assetType] || 0) + 1\n    })\n    return distribution\n  }\n\n  const handleCreateLocation = (event: React.FormEvent) => {\n    event.preventDefault()\n\n    // Validate required fields\n    if (!createForm.outletName?.trim() || !createForm.city?.trim() || !createForm.state) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields (Outlet Name, City, State)\",\n        variant: \"destructive\",\n      })\n      return\n    }\n    \n    const locationData = {\n      outletName: createForm.outletName.trim(),\n      city: createForm.city.trim(),\n      state: createForm.state,\n      address: createForm.address?.trim() || null,\n      managerName: createForm.managerName?.trim() || null,\n      contactDetails: createForm.contactDetails?.trim() || null,\n    }\n\n    createLocationMutation.mutate(locationData)\n  }\n\n  const handleUpdateLocation = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedLocation) return\n\n    // Validate required fields\n    if (!updateForm.outletName?.trim() || !updateForm.city?.trim() || !updateForm.state) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields (Outlet Name, City, State)\",\n        variant: \"destructive\",\n      })\n      return\n    }\n    \n    const locationData = {\n      outletName: updateForm.outletName.trim(),\n      city: updateForm.city.trim(),\n      state: updateForm.state,\n      address: updateForm.address?.trim() || null,\n      managerName: updateForm.managerName?.trim() || null,\n      contactDetails: updateForm.contactDetails?.trim() || null,\n    }\n\n    updateLocationMutation.mutate({ locationId: selectedLocation.id, data: locationData })\n  }\n\n  if (locationsLoading) {\n    return (\n      <div className=\"p-6 space-y-6 animate-fade-in\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6 animate-fade-in\">\n      <SidebarTrigger data-testid=\"button-sidebar-toggle\" className=\"mb-4 text-white/80 hover:text-white hover:bg-white/10 rounded-md\" />\n      \n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight text-white\">Locations</h1>\n          <p className=\"text-white/70\">\n            Organizational site management with regional analytics and performance metrics\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={isImportDialogOpen} onOpenChange={setIsImportDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" className=\"gap-2\" data-testid=\"button-import-excel\">\n                <Upload className=\"h-4 w-4\" />\n                Import Excel\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Import Locations from Excel</DialogTitle>\n                <DialogDescription>\n                  Upload an Excel file to import locations. Download the template for the correct format.\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"import-file\">Excel File</Label>\n                  <Input\n                    id=\"import-file\"\n                    type=\"file\"\n                    accept=\".xlsx,.xls\"\n                    onChange={(e) => setImportFile(e.target.files?.[0] || null)}\n                    data-testid=\"input-import-file\"\n                  />\n                </div>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => ExcelImporter.downloadLocationTemplate()}\n                  data-testid=\"button-download-template\"\n                >\n                  Download Template\n                </Button>\n              </div>\n              <DialogFooter>\n                <Button variant=\"outline\" onClick={() => setIsImportDialogOpen(false)} data-testid=\"button-cancel-import\">\n                  Cancel\n                </Button>\n                <Button onClick={handleImport} disabled={!importFile || isImporting} data-testid=\"button-confirm-import\">\n                  {isImporting ? \"Importing...\" : \"Import\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n          <Button variant=\"outline\" className=\"gap-2\" onClick={handleExport} data-testid=\"button-export\">\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Location\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Location</DialogTitle>\n                <DialogDescription>\n                  Establish new outlet with geographic details, contact information, and operational parameters\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateLocation} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"outletName\">Outlet Name *</Label>\n                    <Input\n                      id=\"outletName\"\n                      value={createForm.outletName}\n                      onChange={(e) => setCreateForm({ ...createForm, outletName: e.target.value })}\n                      placeholder=\"JP Nagar Outlet\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"city\">City *</Label>\n                    <Input\n                      id=\"city\"\n                      value={createForm.city}\n                      onChange={(e) => setCreateForm({ ...createForm, city: e.target.value })}\n                      placeholder=\"Bangalore\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"state\">State *</Label>\n                  <Select value={createForm.state} onValueChange={(value) => setCreateForm({ ...createForm, state: value })} required>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select state\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Karnataka\">Karnataka</SelectItem>\n                      <SelectItem value=\"Tamil Nadu\">Tamil Nadu</SelectItem>\n                      <SelectItem value=\"Andhra Pradesh\">Andhra Pradesh</SelectItem>\n                      <SelectItem value=\"Telangana\">Telangana</SelectItem>\n                      <SelectItem value=\"Kerala\">Kerala</SelectItem>\n                      <SelectItem value=\"Maharashtra\">Maharashtra</SelectItem>\n                      <SelectItem value=\"Gujarat\">Gujarat</SelectItem>\n                      <SelectItem value=\"Delhi\">Delhi</SelectItem>\n                      <SelectItem value=\"Punjab\">Punjab</SelectItem>\n                      <SelectItem value=\"Haryana\">Haryana</SelectItem>\n                      <SelectItem value=\"Uttar Pradesh\">Uttar Pradesh</SelectItem>\n                      <SelectItem value=\"Rajasthan\">Rajasthan</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Complete Address *</Label>\n                  <Input\n                    id=\"address\"\n                    value={createForm.address}\n                    onChange={(e) => setCreateForm({ ...createForm, address: e.target.value })}\n                    placeholder=\"123 Main Street, JP Nagar, Bangalore\"\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"managerName\">Manager Name *</Label>\n                    <Input\n                      id=\"managerName\"\n                      value={createForm.managerName}\n                      onChange={(e) => setCreateForm({ ...createForm, managerName: e.target.value })}\n                      placeholder=\"John Doe\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"contactDetails\">Contact Details *</Label>\n                    <Input\n                      id=\"contactDetails\"\n                      value={createForm.contactDetails}\n                      onChange={(e) => setCreateForm({ ...createForm, contactDetails: e.target.value })}\n                      placeholder=\"+91 9876543210, manager@bodycraft.com\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createLocationMutation.isPending}>\n                    {createLocationMutation.isPending ? \"Creating...\" : \"Create Location\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Outlets</CardTitle>\n            <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{locations?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across {states.length} states\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Assets</CardTitle>\n            <Package className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{assets?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Distributed across locations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Employees</CardTitle>\n            <Users className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{employees?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Working across locations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Assignments</CardTitle>\n            <Laptop className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">\n              {assignments?.filter(a => !a.returnedDate).length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently active\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"glass-card border-0 glass-card border-0\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Locations</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-4 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none z-10\" />\n              <Input\n                placeholder=\"Search by Outlet Name, City, Manager Name...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"h-12 pl-12 pr-12 backdrop-blur-sm border-border/40 focus:border-primary/50 transition-all\"\n                data-testid=\"input-search-locations\"\n              />\n              {searchTerm && (\n                <button\n                  onClick={() => setSearchTerm(\"\")}\n                  className=\"absolute right-4 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors\"\n                  data-testid=\"button-clear-search\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </button>\n              )}\n            </div>\n            \n            <Button\n              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n              variant=\"outline\"\n              className=\"h-12 gap-2 min-w-[180px] backdrop-blur-sm border-border/40 hover:border-primary/50 transition-all\"\n              data-testid=\"button-toggle-advanced-filters\"\n            >\n              <SlidersHorizontal className=\"h-4 w-4\" />\n              Advanced Filters\n              {activeFiltersCount > 0 && (\n                <Badge variant=\"default\" className=\"ml-1 px-2 py-0.5 text-xs\">\n                  {activeFiltersCount}\n                </Badge>\n              )}\n            </Button>\n          </div>\n\n          {/* Quick Filters - No quick filter for locations */}\n          <div className=\"flex flex-wrap gap-2\">\n            {(stateFilter !== \"all\" || cityFilter !== \"all\") && (\n              <Button\n                onClick={() => {\n                  setStateFilter(\"all\")\n                  setCityFilter(\"all\")\n                }}\n                variant=\"ghost\"\n                className=\"gap-2 text-muted-foreground hover:text-foreground backdrop-blur-sm\"\n                data-testid=\"button-reset-filters\"\n              >\n                <X className=\"h-4 w-4\" />\n                Clear All\n              </Button>\n            )}\n          </div>\n\n          {/* Advanced Filters Panel */}\n          {showAdvancedFilters && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4 rounded-lg bg-muted/10 backdrop-blur-sm border border-border/40 animate-fade-in\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <Filter className=\"h-4 w-4 text-primary\" />\n                  State\n                </label>\n                <Select value={stateFilter} onValueChange={setStateFilter}>\n                  <SelectTrigger className=\"backdrop-blur-sm border-border/40\" data-testid=\"select-filter-state\">\n                    <SelectValue placeholder=\"All States\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All States</SelectItem>\n                    {states.map(state => (\n                      <SelectItem key={state} value={state}>{state}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <Filter className=\"h-4 w-4 text-primary\" />\n                  City\n                </label>\n                <Select value={cityFilter} onValueChange={setCityFilter}>\n                  <SelectTrigger className=\"backdrop-blur-sm border-border/40\" data-testid=\"select-filter-city\">\n                    <SelectValue placeholder=\"All Cities\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Cities</SelectItem>\n                    {cities.map(city => (\n                      <SelectItem key={city} value={city}>{city}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredLocations.length} of {locations?.length || 0} locations\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Locations Table */}\n      <Card className=\"glass-card border-0 glass-card border-0\">\n        <CardContent className=\"p-0 table-container-stable\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Location</TableHead>\n                <TableHead>Manager</TableHead>\n                <TableHead>Assets</TableHead>\n                <TableHead>Employees</TableHead>\n                <TableHead>Active Assignments</TableHead>\n                <TableHead>Contact</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredLocations.flatMap((location) => {\n                const locationAssets = getLocationAssets(location.id)\n                const locationEmployees = getLocationEmployees(location.id)\n                const activeAssignments = getActiveAssignments(location.id)\n                const isExpanded = expandedLocationId === location.id\n                const rows = [\n                  <TableRow \n                    key={`main-${location.id}`}\n                    onClick={() => setExpandedLocationId(isExpanded ? null : location.id)}\n                    className=\"hover:bg-muted/20 transition-all duration-150 border-b border-border/30 group cursor-pointer\"\n                    data-testid={`row-location-${location.id}`}\n                  >\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"flex items-center justify-center w-8 h-8 bg-muted/50 rounded-full group-hover:bg-muted transition-colors\">\n                          {isExpanded ? (\n                            <ChevronUp className=\"h-4 w-4\" />\n                          ) : (\n                            <ChevronDown className=\"h-4 w-4\" />\n                          )}\n                        </div>\n                        <Building2 className=\"h-8 w-8 p-1.5 bg-muted rounded-full\" />\n                        <div>\n                          <div className=\"font-medium\">{location.outletName}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {location.city}, {location.state}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <User className=\"h-3 w-3 text-muted-foreground\" />\n                        {location.managerName}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-col gap-1\">\n                        <Badge variant=\"outline\" className=\"w-fit\">\n                          {locationAssets.length} Total\n                        </Badge>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {locationAssets.filter(a => a.status === 'available').length} Available\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-col gap-1\">\n                        <Badge variant=\"outline\" className=\"w-fit\">\n                          {locationEmployees.length} Total\n                        </Badge>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {locationEmployees.filter(e => e.status === 'active').length} Active\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-2 h-2 rounded-full bg-green-400\" />\n                        <span>{activeAssignments.length}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {location.contactDetails}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ]\n\n                if (isExpanded) {\n                  rows.push(\n                    <TableRow key={`expanded-${location.id}`} className=\"bg-muted/10 hover:bg-muted/10\">\n                      <TableCell colSpan={6} className=\"p-6\">\n                        <div className=\"grid grid-cols-3 gap-6\">\n                          <div className=\"space-y-4\">\n                            <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Location Details</h4>\n                            <div className=\"space-y-3\">\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Outlet Name</div>\n                                <div className=\"text-sm mt-1 font-medium\">{location.outletName}</div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Address</div>\n                                <div className=\"text-sm mt-1\">{location.address}</div>\n                                <div className=\"text-sm mt-1\">{location.city}, {location.state}</div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Manager</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <User className=\"h-3 w-3\" />\n                                  {location.managerName}\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Contact Details</div>\n                                <div className=\"text-sm mt-1\">{location.contactDetails}</div>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"space-y-4\">\n                            <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Asset Inventory</h4>\n                            <div className=\"space-y-3\">\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Total Assets</div>\n                                <div className=\"text-2xl font-bold mt-1\">{locationAssets.length}</div>\n                              </div>\n                              <div className=\"space-y-2\">\n                                <div className=\"flex justify-between text-sm\">\n                                  <span className=\"text-muted-foreground\">Available</span>\n                                  <span className=\"font-medium\">{locationAssets.filter(a => a.status === 'available').length}</span>\n                                </div>\n                                <div className=\"flex justify-between text-sm\">\n                                  <span className=\"text-muted-foreground\">Assigned</span>\n                                  <span className=\"font-medium\">{locationAssets.filter(a => a.status === 'assigned').length}</span>\n                                </div>\n                                <div className=\"flex justify-between text-sm\">\n                                  <span className=\"text-muted-foreground\">Maintenance</span>\n                                  <span className=\"font-medium\">{locationAssets.filter(a => a.status === 'maintenance').length}</span>\n                                </div>\n                                <div className=\"flex justify-between text-sm\">\n                                  <span className=\"text-muted-foreground\">Retired</span>\n                                  <span className=\"font-medium\">{locationAssets.filter(a => a.status === 'retired').length}</span>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"space-y-4\">\n                            <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Personnel & Activity</h4>\n                            <div className=\"space-y-3\">\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Total Employees</div>\n                                <div className=\"text-2xl font-bold mt-1\">{locationEmployees.length}</div>\n                              </div>\n                              <div className=\"space-y-2\">\n                                <div className=\"flex justify-between text-sm\">\n                                  <span className=\"text-muted-foreground\">Active</span>\n                                  <span className=\"font-medium\">{locationEmployees.filter(e => e.status === 'active').length}</span>\n                                </div>\n                                <div className=\"flex justify-between text-sm\">\n                                  <span className=\"text-muted-foreground\">On Leave</span>\n                                  <span className=\"font-medium\">{locationEmployees.filter(e => e.status === 'on_leave').length}</span>\n                                </div>\n                                <div className=\"flex justify-between text-sm\">\n                                  <span className=\"text-muted-foreground\">Inactive</span>\n                                  <span className=\"font-medium\">{locationEmployees.filter(e => e.status === 'inactive').length}</span>\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Active Assignments</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <div className=\"w-2 h-2 rounded-full bg-green-400\" />\n                                  <span className=\"font-medium\">{activeAssignments.length}</span>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex gap-2 mt-6 pt-4 border-t border-border/50\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              setSelectedLocation(location)\n                              setIsViewDialogOpen(true)\n                            }}\n                            data-testid={`button-view-details-${location.id}`}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Full Analytics\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              setSelectedLocation(location)\n                              setIsEditDialogOpen(true)\n                            }}\n                            data-testid={`button-edit-location-${location.id}`}\n                          >\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit Location\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              if (window.confirm(`Are you sure you want to delete ${location.outletName}? This action cannot be undone.`)) {\n                                deleteLocationMutation.mutate(location.id)\n                              }\n                            }}\n                            data-testid={`button-delete-location-${location.id}`}\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete Location\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  )\n                }\n\n                return rows\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Location Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle>Location Analytics - {selectedLocation?.outletName}</DialogTitle>\n            <DialogDescription>\n              Real-time performance metrics, resource allocation, and operational insights with detailed breakdowns\n            </DialogDescription>\n          </DialogHeader>\n          {selectedLocation && (\n            <div className=\"space-y-6\">\n              {/* Basic Info */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Location Details</Label>\n                  <div className=\"text-sm p-3 bg-muted rounded\">\n                    <div className=\"font-medium\">{selectedLocation.outletName}</div>\n                    <div>{selectedLocation.city}, {selectedLocation.state}</div>\n                    <div className=\"text-xs text-muted-foreground mt-1\">\n                      {selectedLocation.address}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Management</Label>\n                  <div className=\"text-sm p-3 bg-muted rounded\">\n                    <div className=\"font-medium\">{selectedLocation.managerName}</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {selectedLocation.contactDetails}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Statistics Cards */}\n              <div className=\"grid grid-cols-4 gap-4\">\n                <Card className=\"glass-card border-0 glass-card border-0\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <Package className=\"h-4 w-4 text-blue-500\" />\n                      <div>\n                        <div className=\"text-lg font-bold\">\n                          {getLocationAssets(selectedLocation.id).length}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Assets</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"glass-card border-0 glass-card border-0\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <Users className=\"h-4 w-4 text-green-500\" />\n                      <div>\n                        <div className=\"text-lg font-bold\">\n                          {getLocationEmployees(selectedLocation.id).length}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Employees</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"glass-card border-0 glass-card border-0\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <Laptop className=\"h-4 w-4 text-purple-500\" />\n                      <div>\n                        <div className=\"text-lg font-bold\">\n                          {getActiveAssignments(selectedLocation.id).length}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Active</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"glass-card border-0 glass-card border-0\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className=\"h-4 w-4 text-yellow-500\" />\n                      <div>\n                        <div className=\"text-lg font-bold\">\n                          {getLocationAssets(selectedLocation.id).filter(a => a.status === 'available').length}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Available</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Asset Type Distribution */}\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Asset Distribution by Type</Label>\n                <div className=\"space-y-2\">\n                  {Object.entries(getAssetTypeDistribution(selectedLocation.id)).map(([type, count]) => {\n                    const total = getLocationAssets(selectedLocation.id).length\n                    const percentage = total > 0 ? (count / total) * 100 : 0\n                    return (\n                      <div key={type} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"text-sm\">{type}</div>\n                          <Badge variant=\"secondary\">{count}</Badge>\n                        </div>\n                        <div className=\"flex items-center gap-2 w-32\">\n                          <Progress value={percentage} className=\"h-2\" />\n                          <div className=\"text-xs text-muted-foreground w-10\">\n                            {percentage.toFixed(0)}%\n                          </div>\n                        </div>\n                      </div>\n                    )\n                  })}\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Location Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Location</DialogTitle>\n            <DialogDescription>\n              Modify outlet details, management contacts, and regional configuration for {selectedLocation?.outletName}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedLocation && (\n            <form onSubmit={handleUpdateLocation} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-outletName\">Outlet Name *</Label>\n                  <Input\n                    id=\"edit-outletName\"\n                    value={updateForm.outletName}\n                    onChange={(e) => setUpdateForm({ ...updateForm, outletName: e.target.value })}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-city\">City *</Label>\n                  <Input\n                    id=\"edit-city\"\n                    value={updateForm.city}\n                    onChange={(e) => setUpdateForm({ ...updateForm, city: e.target.value })}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-state\">State *</Label>\n                <Select value={updateForm.state} onValueChange={(value) => setUpdateForm({ ...updateForm, state: value })} required>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Karnataka\">Karnataka</SelectItem>\n                    <SelectItem value=\"Tamil Nadu\">Tamil Nadu</SelectItem>\n                    <SelectItem value=\"Andhra Pradesh\">Andhra Pradesh</SelectItem>\n                    <SelectItem value=\"Telangana\">Telangana</SelectItem>\n                    <SelectItem value=\"Kerala\">Kerala</SelectItem>\n                    <SelectItem value=\"Maharashtra\">Maharashtra</SelectItem>\n                    <SelectItem value=\"Gujarat\">Gujarat</SelectItem>\n                    <SelectItem value=\"Delhi\">Delhi</SelectItem>\n                    <SelectItem value=\"Punjab\">Punjab</SelectItem>\n                    <SelectItem value=\"Haryana\">Haryana</SelectItem>\n                    <SelectItem value=\"Uttar Pradesh\">Uttar Pradesh</SelectItem>\n                    <SelectItem value=\"Rajasthan\">Rajasthan</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-address\">Complete Address *</Label>\n                <Input\n                  id=\"edit-address\"\n                  value={updateForm.address}\n                  onChange={(e) => setUpdateForm({ ...updateForm, address: e.target.value })}\n                  required\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-managerName\">Manager Name *</Label>\n                  <Input\n                    id=\"edit-managerName\"\n                    value={updateForm.managerName}\n                    onChange={(e) => setUpdateForm({ ...updateForm, managerName: e.target.value })}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-contactDetails\">Contact Details *</Label>\n                  <Input\n                    id=\"edit-contactDetails\"\n                    value={updateForm.contactDetails}\n                    onChange={(e) => setUpdateForm({ ...updateForm, contactDetails: e.target.value })}\n                    required\n                  />\n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsEditDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateLocationMutation.isPending}>\n                  {updateLocationMutation.isPending ? \"Updating...\" : \"Update Location\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":51037},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Lock, User, AlertCircle, Eye, EyeOff, Zap } from \"lucide-react\";\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const [credentials, setCredentials] = useState({\n    username: \"\",\n    password: \"\",\n  });\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [rememberMe, setRememberMe] = useState(false);\n  const [usernameFocused, setUsernameFocused] = useState(false);\n  const [passwordFocused, setPasswordFocused] = useState(false);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    setLoading(true);\n\n    try {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(credentials),\n      });\n\n      if (response.ok) {\n        await response.json();\n        window.location.href = \"/\";\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || \"Login failed. Please check your credentials.\");\n      }\n    } catch (err) {\n      setError(\"Network error. Please try again.\");\n      console.error(\"Login error:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSuperAdminLogin = () => {\n    setCredentials({ username: \"admin\", password: \"admin123\" });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center overflow-hidden relative px-4\">\n      {/* Animated Gradient Background */}\n      <div className=\"fixed inset-0 bg-gradient-to-br from-[#0f172a] via-[#1e293b] to-[#6366f1] animate-gradient-shift\"></div>\n      \n      {/* Animated Background Shapes */}\n      <div className=\"fixed inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute top-20 left-10 w-72 h-72 bg-purple-500/20 rounded-full blur-3xl animate-float-slow\"></div>\n        <div className=\"absolute bottom-20 right-10 w-96 h-96 bg-blue-500/20 rounded-full blur-3xl animate-float-slower\"></div>\n        <div className=\"absolute top-1/2 left-1/2 w-64 h-64 bg-teal-500/10 rounded-full blur-3xl animate-pulse-slow\"></div>\n      </div>\n\n      <div className=\"w-full max-w-md relative z-10\">\n        {/* BODYCRAFT Branding */}\n        <div className=\"text-center mb-10 animate-fade-in\">\n          <div className=\"flex flex-col items-center justify-center space-y-4\">\n            {/* Brand Name with Gradient */}\n            <h1 \n              className=\"text-5xl font-bold tracking-tight transform hover:scale-105 transition-transform duration-500\"\n              style={{\n                background: 'linear-gradient(135deg, #a855f7 0%, #ec4899 50%, #3b82f6 100%)',\n                WebkitBackgroundClip: 'text',\n                WebkitTextFillColor: 'transparent',\n                backgroundClip: 'text',\n                filter: 'drop-shadow(0 0 30px rgba(168, 85, 247, 0.4))',\n              }}\n            >\n              BODYCRAFT\n            </h1>\n            \n            {/* Tagline with Dividers */}\n            <div className=\"flex items-center gap-3\">\n              <div className=\"h-px w-8 bg-gradient-to-r from-transparent via-purple-400/60 to-transparent\"></div>\n              <p className=\"text-purple-300/90 text-xs font-light tracking-[0.3em] uppercase\">\n                Salon · Skin · Clinic · Spa\n              </p>\n              <div className=\"h-px w-8 bg-gradient-to-r from-transparent via-purple-400/60 to-transparent\"></div>\n            </div>\n\n            {/* Subtitle */}\n            <p className=\"text-white/70 text-base font-light mt-2\">\n              Master Data Management System\n            </p>\n          </div>\n        </div>\n\n        {/* Glassmorphism Login Card */}\n        <div \n          className=\"glass-card rounded-3xl p-8 shadow-2xl backdrop-blur-xl border border-white/10 animate-slide-up\"\n          style={{\n            background: 'rgba(255, 255, 255, 0.13)',\n            boxShadow: '0 0 40px rgba(8, 7, 16, 0.6)',\n          }}\n        >\n          {/* Header */}\n          <div className=\"text-center mb-8\">\n            <div className=\"flex items-center justify-center gap-3 mb-3\">\n              <div className=\"p-2 bg-gradient-to-br from-purple-500 to-blue-500 rounded-xl\">\n                <Lock className=\"h-5 w-5 text-white\" />\n              </div>\n              <h2 className=\"text-2xl font-light text-white\">Sign In</h2>\n            </div>\n            <p className=\"text-white/50 text-sm font-light\">\n              Access your secure management portal\n            </p>\n          </div>\n\n          <form onSubmit={handleLogin} className=\"space-y-6\">\n            {error && (\n              <Alert variant=\"destructive\" className=\"bg-red-500/20 border-red-500/50 backdrop-blur-sm animate-shake\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription className=\"text-white\">{error}</AlertDescription>\n              </Alert>\n            )}\n\n            {/* Username Field with Floating Label */}\n            <div className=\"relative\">\n              <div className=\"relative\">\n                <User className=\"absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-purple-300/60 z-10 transition-colors duration-300\" />\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\" \"\n                  value={credentials.username}\n                  onChange={(e) => setCredentials({ ...credentials, username: e.target.value })}\n                  onFocus={() => setUsernameFocused(true)}\n                  onBlur={() => setUsernameFocused(false)}\n                  required\n                  autoComplete=\"username\"\n                  data-testid=\"input-username\"\n                  className=\"glass-input pl-12 pr-4 py-6 w-full rounded-xl border border-white/30 bg-white/10 placeholder-transparent focus:border-purple-400 focus:ring-2 focus:ring-purple-400/40 transition-all duration-300\"\n                  style={{\n                    backdropFilter: 'blur(10px)',\n                    color: '#e0e7ff',\n                    fontWeight: '500',\n                  }}\n                />\n                <label\n                  htmlFor=\"username\"\n                  className={`absolute left-12 transition-all duration-300 pointer-events-none ${\n                    usernameFocused || credentials.username\n                      ? 'opacity-0 invisible'\n                      : 'top-1/2 -translate-y-1/2 text-sm text-white/60 opacity-100 visible'\n                  }`}\n                >\n                  Username\n                </label>\n              </div>\n            </div>\n\n            {/* Password Field with Floating Label */}\n            <div className=\"relative\">\n              <div className=\"relative\">\n                <Lock className=\"absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-purple-300/60 z-10 transition-colors duration-300\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\" \"\n                  value={credentials.password}\n                  onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}\n                  onFocus={() => setPasswordFocused(true)}\n                  onBlur={() => setPasswordFocused(false)}\n                  required\n                  autoComplete=\"current-password\"\n                  data-testid=\"input-password\"\n                  className=\"glass-input pl-12 pr-12 py-6 w-full rounded-xl border border-white/30 bg-white/10 placeholder-transparent focus:border-purple-400 focus:ring-2 focus:ring-purple-400/40 transition-all duration-300\"\n                  style={{\n                    backdropFilter: 'blur(10px)',\n                    color: '#e0e7ff',\n                    fontWeight: '500',\n                    letterSpacing: '0.1em',\n                  }}\n                />\n                <label\n                  htmlFor=\"password\"\n                  className={`absolute left-12 transition-all duration-300 pointer-events-none ${\n                    passwordFocused || credentials.password\n                      ? 'opacity-0 invisible'\n                      : 'top-1/2 -translate-y-1/2 text-sm text-white/60 opacity-100 visible'\n                  }`}\n                >\n                  Password\n                </label>\n                <div className=\"absolute right-4 top-1/2 transform -translate-y-1/2 flex items-center gap-1 text-purple-300/40 text-xs z-10 pointer-events-none\">\n                  <Lock className=\"h-3 w-3\" />\n                  <span className=\"font-light\">Encrypted</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Remember Me & Forgot Password */}\n            <div className=\"flex items-center justify-between\">\n              <label className=\"flex items-center gap-3 cursor-pointer group\">\n                <div \n                  className={`relative w-11 h-6 rounded-full transition-all duration-300 ${\n                    rememberMe ? 'bg-gradient-to-r from-purple-500 to-blue-500' : 'bg-white/20'\n                  }`}\n                  onClick={() => setRememberMe(!rememberMe)}\n                >\n                  <div \n                    className={`absolute top-1 left-1 w-4 h-4 bg-white rounded-full transition-transform duration-300 ${\n                      rememberMe ? 'transform translate-x-5' : ''\n                    }`}\n                  ></div>\n                </div>\n                <span className=\"text-white/60 text-sm font-light group-hover:text-white/90 transition-colors duration-300\">\n                  Remember me\n                </span>\n              </label>\n              <a \n                href=\"#\" \n                className=\"text-purple-300 text-sm font-light hover:text-purple-200 transition-colors duration-300\"\n              >\n                Forgot password?\n              </a>\n            </div>\n\n            {/* Sign In Button */}\n            <Button\n              type=\"submit\"\n              disabled={loading}\n              data-testid=\"button-signin\"\n              className=\"w-full py-6 rounded-xl bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white font-medium text-lg shadow-lg hover:shadow-purple-500/50 transform hover:scale-[1.02] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none\"\n            >\n              {loading ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                  <span>Signing in...</span>\n                </div>\n              ) : (\n                \"Sign In\"\n              )}\n            </Button>\n\n            {/* Divider */}\n            <div className=\"relative my-6\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-white/10\"></div>\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"px-4 text-white/40 bg-transparent font-light tracking-wider\">\n                  Quick Access\n                </span>\n              </div>\n            </div>\n\n            {/* Quick Admin Login Button */}\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleSuperAdminLogin}\n              data-testid=\"button-superadmin-login\"\n              className=\"w-full py-5 rounded-xl border-2 border-white/20 bg-white/5 hover:bg-white/10 text-white font-light backdrop-blur-sm transform hover:scale-[1.02] transition-all duration-300\"\n            >\n              <Zap className=\"h-4 w-4 mr-2\" />\n              Super Admin Login\n            </Button>\n\n            <p className=\"text-center text-white/30 text-xs font-light mt-3\">\n              Credentials: <span className=\"text-purple-300/80\">admin</span> / <span className=\"text-purple-300/80\">admin123</span>\n            </p>\n          </form>\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center mt-8 space-y-2 animate-fade-in-delay\">\n          <div className=\"flex items-center justify-center gap-2\">\n            <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n            <span className=\"text-green-400/90 text-xs font-light\">Secure Connection</span>\n          </div>\n          <p className=\"text-white/30 text-xs font-light\">\n            © 2025 BODYCRAFT. All rights reserved.\n          </p>\n        </div>\n      </div>\n\n      <style>{`\n        @keyframes gradient-shift {\n          0%, 100% { background-position: 0% 50%; }\n          50% { background-position: 100% 50%; }\n        }\n        \n        @keyframes float-slow {\n          0%, 100% { transform: translateY(0) translateX(0); }\n          50% { transform: translateY(-20px) translateX(20px); }\n        }\n        \n        @keyframes float-slower {\n          0%, 100% { transform: translateY(0) translateX(0); }\n          50% { transform: translateY(20px) translateX(-20px); }\n        }\n        \n        @keyframes pulse-slow {\n          0%, 100% { opacity: 0.3; transform: scale(1); }\n          50% { opacity: 0.5; transform: scale(1.1); }\n        }\n        \n        @keyframes fade-in {\n          from { opacity: 0; transform: translateY(-10px); }\n          to { opacity: 1; transform: translateY(0); }\n        }\n        \n        @keyframes slide-up {\n          from { opacity: 0; transform: translateY(30px); }\n          to { opacity: 1; transform: translateY(0); }\n        }\n        \n        @keyframes fade-in-delay {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n        \n        @keyframes shake {\n          0%, 100% { transform: translateX(0); }\n          25% { transform: translateX(-5px); }\n          75% { transform: translateX(5px); }\n        }\n        \n        .animate-gradient-shift {\n          background-size: 200% 200%;\n          animation: gradient-shift 15s ease infinite;\n        }\n        \n        .animate-float-slow {\n          animation: float-slow 8s ease-in-out infinite;\n        }\n        \n        .animate-float-slower {\n          animation: float-slower 10s ease-in-out infinite;\n        }\n        \n        .animate-pulse-slow {\n          animation: pulse-slow 6s ease-in-out infinite;\n        }\n        \n        .animate-fade-in {\n          animation: fade-in 0.6s ease-out;\n        }\n        \n        .animate-slide-up {\n          animation: slide-up 0.8s ease-out;\n        }\n        \n        .animate-fade-in-delay {\n          animation: fade-in-delay 1s ease-out 0.5s both;\n        }\n        \n        .animate-shake {\n          animation: shake 0.4s ease-in-out;\n        }\n        \n        .glass-input:focus {\n          background: rgba(255, 255, 255, 0.15) !important;\n        }\n        \n        input:-webkit-autofill,\n        input:-webkit-autofill:hover,\n        input:-webkit-autofill:focus {\n          -webkit-text-fill-color: #e0e7ff !important;\n          -webkit-box-shadow: 0 0 0px 1000px rgba(255, 255, 255, 0.1) inset !important;\n          transition: background-color 5000s ease-in-out 0s;\n        }\n      `}</style>\n    </div>\n  );\n}\n","size_bytes":15686},"client/src/pages/maintenance.tsx":{"content":"import { useState, useEffect } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Wrench, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Calendar,\n  DollarSign,\n  User,\n  Package,\n  Clock,\n  CheckCircle,\n  AlertTriangle,\n  XCircle,\n  Laptop,\n  MapPin,\n  FileText,\n  Settings,\n  ChevronDown,\n  ChevronUp,\n  X,\n  SlidersHorizontal,\n  Filter\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { SidebarTrigger } from \"@/components/ui/sidebar\"\nimport { ExcelExporter, ExcelImporter } from \"@/lib/excel\"\n\ninterface Maintenance {\n  id: number\n  assetId: string\n  maintenanceType: \"preventive\" | \"corrective\"\n  description: string\n  scheduledDate: string\n  completedDate: string | null\n  cost: number | null\n  technicianName: string | null\n  partsReplaced: string | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  assetType: string\n  status: \"available\" | \"assigned\" | \"maintenance\" | \"retired\"\n  locationId: number | null\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  scheduled: \"bg-blue-400\",\n  in_progress: \"bg-yellow-400\", \n  completed: \"bg-green-400\",\n  overdue: \"bg-red-400\"\n}\n\n// Maintenance type color mapping\nconst typeColors: Record<string, string> = {\n  preventive: \"bg-blue-400\",\n  corrective: \"bg-orange-500\"\n}\n\nexport default function MaintenancePage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [assetTypeFilter, setAssetTypeFilter] = useState<string>(\"all\")\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false)\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedMaintenance, setSelectedMaintenance] = useState<Maintenance | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [isCompleteDialogOpen, setIsCompleteDialogOpen] = useState(false)\n  const [expandedMaintenanceId, setExpandedMaintenanceId] = useState<number | null>(null)\n  const [isImportDialogOpen, setIsImportDialogOpen] = useState(false)\n  const [importFile, setImportFile] = useState<File | null>(null)\n  const [isImporting, setIsImporting] = useState(false)\n\n  // Form state for Create Maintenance dialog\n  const [createForm, setCreateForm] = useState({\n    assetId: '',\n    maintenanceType: '',\n    description: '',\n    scheduledDate: '',\n    cost: '',\n    technicianName: '',\n    partsReplaced: ''\n  })\n\n  // Form state for Update Maintenance dialog\n  const [updateForm, setUpdateForm] = useState({\n    description: '',\n    scheduledDate: '',\n    cost: '',\n    technicianName: '',\n    partsReplaced: ''\n  })\n\n  // Form state for Complete Maintenance dialog\n  const [completeForm, setCompleteForm] = useState({\n    cost: '',\n    technicianName: '',\n    partsReplaced: ''\n  })\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Check URL params to auto-open create dialog\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search)\n    if (params.get('action') === 'create') {\n      setIsCreateDialogOpen(true)\n      // Clean up URL without reloading, preserving other params\n      params.delete('action')\n      const newUrl = params.toString() \n        ? `${window.location.pathname}?${params.toString()}`\n        : window.location.pathname\n      window.history.replaceState({}, '', newUrl)\n    }\n  }, [])\n\n  // Reset create form when dialog opens\n  useEffect(() => {\n    if (isCreateDialogOpen) {\n      setCreateForm({\n        assetId: '',\n        maintenanceType: '',\n        description: '',\n        scheduledDate: '',\n        cost: '',\n        technicianName: '',\n        partsReplaced: ''\n      })\n    }\n  }, [isCreateDialogOpen])\n\n  // Populate update form when selectedMaintenance changes\n  useEffect(() => {\n    if (selectedMaintenance && isEditDialogOpen) {\n      setUpdateForm({\n        description: selectedMaintenance.description || '',\n        scheduledDate: selectedMaintenance.scheduledDate ? selectedMaintenance.scheduledDate.split('T')[0] : '',\n        cost: selectedMaintenance.cost?.toString() || '',\n        technicianName: selectedMaintenance.technicianName || '',\n        partsReplaced: selectedMaintenance.partsReplaced || ''\n      })\n    }\n  }, [selectedMaintenance, isEditDialogOpen])\n\n  // Populate complete form when selectedMaintenance changes\n  useEffect(() => {\n    if (selectedMaintenance && isCompleteDialogOpen) {\n      setCompleteForm({\n        cost: selectedMaintenance.cost?.toString() || '',\n        technicianName: selectedMaintenance.technicianName || '',\n        partsReplaced: selectedMaintenance.partsReplaced || ''\n      })\n    }\n  }, [selectedMaintenance, isCompleteDialogOpen])\n\n  // Fetch data\n  const { data: maintenance, isLoading: maintenanceLoading } = useQuery<Maintenance[]>({\n    queryKey: [\"/api/maintenance\"],\n  })\n\n  const { data: assets } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Helper function to get maintenance status\n  const getMaintenanceStatus = (maintenance: Maintenance) => {\n    if (maintenance.completedDate) return \"completed\"\n    \n    const scheduledDate = new Date(maintenance.scheduledDate)\n    const today = new Date()\n    today.setHours(0, 0, 0, 0)\n    \n    if (scheduledDate < today) return \"overdue\"\n    if (scheduledDate.toDateString() === today.toDateString()) return \"in_progress\"\n    return \"scheduled\"\n  }\n\n  // Get unique asset types for filter\n  const assetTypes = Array.from(new Set(assets?.map(a => a.assetType) || []))\n\n  // Filter maintenance records\n  const filteredMaintenance = maintenance?.filter(record => {\n    const asset = assets?.find(a => a.assetId === record.assetId)\n    const location = locations?.find(l => l.id === asset?.locationId)\n    const status = getMaintenanceStatus(record)\n    \n    const matchesSearch = \n      record.assetId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset?.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset?.modelName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      record.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      record.technicianName?.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === \"all\" || status === statusFilter\n    const matchesType = typeFilter === \"all\" || record.maintenanceType === typeFilter\n    const matchesLocation = locationFilter === \"all\" || asset?.locationId?.toString() === locationFilter\n    const matchesAssetType = assetTypeFilter === \"all\" || asset?.assetType === assetTypeFilter\n    \n    return matchesSearch && matchesStatus && matchesType && matchesLocation && matchesAssetType\n  }) || []\n\n  // Count active filters\n  const activeFiltersCount = [\n    typeFilter !== \"all\",\n    locationFilter !== \"all\",\n    assetTypeFilter !== \"all\"\n  ].filter(Boolean).length\n\n  // Create maintenance mutation\n  const createMaintenanceMutation = useMutation({\n    mutationFn: async (maintenanceData: any) => {\n      const response = await fetch('/api/maintenance', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(maintenanceData),\n      })\n      if (!response.ok) throw new Error('Failed to create maintenance record')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/maintenance'] })\n      toast({ title: \"Success\", description: \"Maintenance scheduled successfully\" })\n      setIsCreateDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to schedule maintenance\", variant: \"destructive\" })\n    }\n  })\n\n  // Update maintenance mutation  \n  const updateMaintenanceMutation = useMutation({\n    mutationFn: async ({ maintenanceId, data }: { maintenanceId: number, data: any }) => {\n      const response = await fetch(`/api/maintenance/${maintenanceId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      })\n      if (!response.ok) throw new Error('Failed to update maintenance record')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/maintenance'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Maintenance updated successfully\" })\n      setIsEditDialogOpen(false)\n      setIsCompleteDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update maintenance\", variant: \"destructive\" })\n    }\n  })\n\n  // Delete maintenance mutation\n  const deleteMaintenanceMutation = useMutation({\n    mutationFn: async (maintenanceId: number) => {\n      const response = await fetch(`/api/maintenance/${maintenanceId}`, {\n        method: 'DELETE',\n      })\n      if (!response.ok) throw new Error('Failed to delete maintenance record')\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/maintenance'] })\n      toast({ title: \"Success\", description: \"Maintenance record deleted successfully\" })\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete maintenance record\", variant: \"destructive\" })\n    }\n  })\n\n  // Excel Export Handler\n  const handleExport = () => {\n    if (!maintenance || !assets || !locations) {\n      toast({ title: \"Error\", description: \"Data not loaded yet\", variant: \"destructive\" })\n      return\n    }\n    \n    try {\n      ExcelExporter.exportMaintenance(maintenance, assets, locations)\n      toast({ title: \"Success\", description: \"Maintenance records exported successfully\" })\n    } catch (error) {\n      toast({ title: \"Error\", description: \"Failed to export maintenance records\", variant: \"destructive\" })\n    }\n  }\n\n  // Excel Import Handler\n  const handleImport = async () => {\n    if (!importFile) {\n      toast({ title: \"Error\", description: \"Please select a file\", variant: \"destructive\" })\n      return\n    }\n\n    setIsImporting(true)\n\n    try {\n      const data = await ExcelImporter.parseExcelFile(importFile)\n      const { valid, errors } = ExcelImporter.validateMaintenanceData(data)\n\n      if (errors.length > 0) {\n        toast({ \n          title: \"Validation Errors\", \n          description: `${errors.length} errors found. First error: ${errors[0]}`,\n          variant: \"destructive\" \n        })\n        setIsImporting(false)\n        return\n      }\n\n      for (const maintenanceData of valid) {\n        await createMaintenanceMutation.mutateAsync(maintenanceData)\n      }\n\n      toast({ \n        title: \"Success\", \n        description: `Successfully imported ${valid.length} maintenance records` \n      })\n      setIsImportDialogOpen(false)\n      setImportFile(null)\n    } catch (error) {\n      toast({ \n        title: \"Error\", \n        description: \"Failed to import maintenance records\", \n        variant: \"destructive\" \n      })\n    } finally {\n      setIsImporting(false)\n    }\n  }\n\n  // Helper functions\n  const getAssetInfo = (assetId: string) => {\n    return assets?.find(asset => asset.assetId === assetId)\n  }\n\n  const getLocationName = (locationId: number | null) => {\n    if (!locationId) return \"No location\"\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown\"\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const formatCurrency = (amount: number | null) => {\n    if (amount === null) return \"Not specified\"\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR'\n    }).format(amount)\n  }\n\n  const handleCreateMaintenance = (event: React.FormEvent) => {\n    event.preventDefault()\n\n    // Validate required fields\n    if (!createForm.assetId || !createForm.maintenanceType || !createForm.scheduledDate) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields (Asset, Type, Scheduled Date)\",\n        variant: \"destructive\",\n      })\n      return\n    }\n    \n    const maintenanceData = {\n      assetId: createForm.assetId,\n      maintenanceType: createForm.maintenanceType,\n      description: createForm.description?.trim() || null,\n      scheduledDate: createForm.scheduledDate,\n      cost: createForm.cost ? parseFloat(createForm.cost) : null,\n      technicianName: createForm.technicianName?.trim() || null,\n      partsReplaced: createForm.partsReplaced?.trim() || null,\n    }\n\n    createMaintenanceMutation.mutate(maintenanceData)\n  }\n\n  const handleUpdateMaintenance = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedMaintenance) return\n\n    // Validate required fields\n    if (!updateForm.scheduledDate) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Scheduled date is required\",\n        variant: \"destructive\",\n      })\n      return\n    }\n    \n    const maintenanceData = {\n      description: updateForm.description?.trim() || null,\n      scheduledDate: updateForm.scheduledDate,\n      cost: updateForm.cost ? parseFloat(updateForm.cost) : null,\n      technicianName: updateForm.technicianName?.trim() || null,\n      partsReplaced: updateForm.partsReplaced?.trim() || null,\n    }\n\n    updateMaintenanceMutation.mutate({ maintenanceId: selectedMaintenance.id, data: maintenanceData })\n  }\n\n  const handleCompleteMaintenance = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedMaintenance) return\n    \n    const maintenanceData = {\n      completedDate: new Date().toISOString(),\n      cost: completeForm.cost ? parseFloat(completeForm.cost) : selectedMaintenance.cost,\n      technicianName: completeForm.technicianName?.trim() || selectedMaintenance.technicianName,\n      partsReplaced: completeForm.partsReplaced?.trim() || selectedMaintenance.partsReplaced,\n    }\n\n    updateMaintenanceMutation.mutate({ maintenanceId: selectedMaintenance.id, data: maintenanceData })\n  }\n\n  if (maintenanceLoading) {\n    return (\n      <div className=\"p-6 space-y-6 animate-fade-in\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const totalCost = maintenance?.reduce((sum, record) => sum + (record.cost || 0), 0) || 0\n  const pendingMaintenance = maintenance?.filter(record => !record.completedDate).length || 0\n  const overdueMaintenance = maintenance?.filter(record => getMaintenanceStatus(record) === \"overdue\").length || 0\n  const completedMaintenance = maintenance?.filter(record => record.completedDate).length || 0\n\n  return (\n    <div className=\"p-6 space-y-6 animate-fade-in\">\n      <SidebarTrigger data-testid=\"button-sidebar-toggle\" className=\"mb-4 text-white/80 hover:text-white hover:bg-white/10 rounded-md\" />\n      \n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight text-white\">Maintenance</h1>\n          <p className=\"text-white/70\">\n            Schedule and track asset maintenance across all locations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={isImportDialogOpen} onOpenChange={setIsImportDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" className=\"gap-2\" data-testid=\"button-import-excel\">\n                <Upload className=\"h-4 w-4\" />\n                Import Excel\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Import Maintenance Records from Excel</DialogTitle>\n                <DialogDescription>\n                  Upload an Excel file to import maintenance records. Download the template for the correct format.\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"import-file\">Excel File</Label>\n                  <Input\n                    id=\"import-file\"\n                    type=\"file\"\n                    accept=\".xlsx,.xls\"\n                    onChange={(e) => setImportFile(e.target.files?.[0] || null)}\n                    data-testid=\"input-import-file\"\n                  />\n                </div>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => ExcelImporter.downloadMaintenanceTemplate()}\n                  data-testid=\"button-download-template\"\n                >\n                  Download Template\n                </Button>\n              </div>\n              <DialogFooter>\n                <Button variant=\"outline\" onClick={() => setIsImportDialogOpen(false)} data-testid=\"button-cancel-import\">\n                  Cancel\n                </Button>\n                <Button onClick={handleImport} disabled={!importFile || isImporting} data-testid=\"button-confirm-import\">\n                  {isImporting ? \"Importing...\" : \"Import\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n          <Button variant=\"outline\" className=\"gap-2\" onClick={handleExport} data-testid=\"button-export\">\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Schedule Maintenance\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Schedule Maintenance</DialogTitle>\n                <DialogDescription>\n                  Plan preventive or corrective service with scheduling, cost tracking, and technician assignment\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateMaintenance} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assetId\">Asset *</Label>\n                    <Select value={createForm.assetId} onValueChange={(value) => setCreateForm({ ...createForm, assetId: value })} required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select asset\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {assets?.map(asset => (\n                          <SelectItem key={asset.assetId} value={asset.assetId}>\n                            {asset.assetId} - {asset.brand} {asset.modelName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"maintenanceType\">Type *</Label>\n                    <Select value={createForm.maintenanceType} onValueChange={(value) => setCreateForm({ ...createForm, maintenanceType: value })} required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"preventive\">Preventive</SelectItem>\n                        <SelectItem value=\"corrective\">Corrective</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Description *</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={createForm.description}\n                    onChange={(e) => setCreateForm({ ...createForm, description: e.target.value })}\n                    placeholder=\"Describe the maintenance work to be performed\"\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"scheduledDate\">Scheduled Date *</Label>\n                    <Input\n                      id=\"scheduledDate\"\n                      type=\"date\"\n                      value={createForm.scheduledDate}\n                      onChange={(e) => setCreateForm({ ...createForm, scheduledDate: e.target.value })}\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"cost\">Estimated Cost</Label>\n                    <Input\n                      id=\"cost\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={createForm.cost}\n                      onChange={(e) => setCreateForm({ ...createForm, cost: e.target.value })}\n                      placeholder=\"0.00\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"technicianName\">Technician Name</Label>\n                    <Input\n                      id=\"technicianName\"\n                      value={createForm.technicianName}\n                      onChange={(e) => setCreateForm({ ...createForm, technicianName: e.target.value })}\n                      placeholder=\"John Doe, ABC Services\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"partsReplaced\">Expected Parts</Label>\n                    <Input\n                      id=\"partsReplaced\"\n                      value={createForm.partsReplaced}\n                      onChange={(e) => setCreateForm({ ...createForm, partsReplaced: e.target.value })}\n                      placeholder=\"Hard drive, RAM, etc.\"\n                    />\n                  </div>\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createMaintenanceMutation.isPending}>\n                    {createMaintenanceMutation.isPending ? \"Scheduling...\" : \"Schedule Maintenance\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Maintenance</CardTitle>\n            <Wrench className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{maintenance?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              All maintenance records\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n            <Clock className=\"h-4 w-4 text-yellow-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{pendingMaintenance}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Not yet completed\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Overdue</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{overdueMaintenance}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Past due date\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Cost</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{formatCurrency(totalCost)}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              All maintenance costs\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"glass-card border-0 glass-card border-0\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Maintenance</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-4 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none z-10\" />\n              <Input\n                placeholder=\"Search by Asset ID, Brand, Description, Technician...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"h-12 pl-12 pr-12 backdrop-blur-sm border-border/40 focus:border-primary/50 transition-all\"\n                data-testid=\"input-search-maintenance\"\n              />\n              {searchTerm && (\n                <button\n                  onClick={() => setSearchTerm(\"\")}\n                  className=\"absolute right-4 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors\"\n                  data-testid=\"button-clear-search\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </button>\n              )}\n            </div>\n            \n            <Button\n              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n              variant=\"outline\"\n              className=\"h-12 gap-2 min-w-[180px] backdrop-blur-sm border-border/40 hover:border-primary/50 transition-all\"\n              data-testid=\"button-toggle-advanced-filters\"\n            >\n              <SlidersHorizontal className=\"h-4 w-4\" />\n              Advanced Filters\n              {activeFiltersCount > 0 && (\n                <Badge variant=\"default\" className=\"ml-1 px-2 py-0.5 text-xs\">\n                  {activeFiltersCount}\n                </Badge>\n              )}\n            </Button>\n          </div>\n\n          {/* Quick Filters */}\n          <div className=\"flex flex-wrap gap-2\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-[140px] backdrop-blur-sm border-border/40\" data-testid=\"select-filter-status\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"overdue\">Overdue</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {(typeFilter !== \"all\" || locationFilter !== \"all\" || assetTypeFilter !== \"all\") && (\n              <Button\n                onClick={() => {\n                  setTypeFilter(\"all\")\n                  setLocationFilter(\"all\")\n                  setAssetTypeFilter(\"all\")\n                }}\n                variant=\"ghost\"\n                className=\"gap-2 text-muted-foreground hover:text-foreground backdrop-blur-sm\"\n                data-testid=\"button-reset-filters\"\n              >\n                <X className=\"h-4 w-4\" />\n                Clear All\n              </Button>\n            )}\n          </div>\n\n          {/* Advanced Filters Panel */}\n          {showAdvancedFilters && (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 p-4 rounded-lg bg-muted/10 backdrop-blur-sm border border-border/40 animate-fade-in\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <Filter className=\"h-4 w-4 text-primary\" />\n                  Maintenance Type\n                </label>\n                <Select value={typeFilter} onValueChange={setTypeFilter}>\n                  <SelectTrigger className=\"backdrop-blur-sm border-border/40\" data-testid=\"select-filter-type\">\n                    <SelectValue placeholder=\"All Types\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"preventive\">Preventive</SelectItem>\n                    <SelectItem value=\"corrective\">Corrective</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <Filter className=\"h-4 w-4 text-primary\" />\n                  Location\n                </label>\n                <Select value={locationFilter} onValueChange={setLocationFilter}>\n                  <SelectTrigger className=\"backdrop-blur-sm border-border/40\" data-testid=\"select-filter-location\">\n                    <SelectValue placeholder=\"All Locations\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Locations</SelectItem>\n                    {locations?.map(location => (\n                      <SelectItem key={location.id} value={location.id.toString()}>\n                        {location.outletName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <Filter className=\"h-4 w-4 text-primary\" />\n                  Asset Type\n                </label>\n                <Select value={assetTypeFilter} onValueChange={setAssetTypeFilter}>\n                  <SelectTrigger className=\"backdrop-blur-sm border-border/40\" data-testid=\"select-filter-asset-type\">\n                    <SelectValue placeholder=\"All Asset Types\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Asset Types</SelectItem>\n                    {assetTypes.map(type => (\n                      <SelectItem key={type} value={type}>{type}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredMaintenance.length} of {maintenance?.length || 0} maintenance records\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Maintenance Table */}\n      <Card className=\"glass-card border-0 glass-card border-0\">\n        <CardContent className=\"p-0 table-container-stable\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Asset</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Description</TableHead>\n                <TableHead>Scheduled Date</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Cost</TableHead>\n                <TableHead>Technician</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredMaintenance.flatMap((record) => {\n                const asset = getAssetInfo(record.assetId)\n                const status = getMaintenanceStatus(record)\n                const isExpanded = expandedMaintenanceId === record.id\n                const rows = [\n                  <TableRow \n                    key={`main-${record.id}`}\n                    onClick={() => setExpandedMaintenanceId(isExpanded ? null : record.id)}\n                    className=\"hover:bg-muted/20 transition-all duration-150 border-b border-border/30 group cursor-pointer\"\n                    data-testid={`row-maintenance-${record.id}`}\n                  >\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"flex items-center justify-center w-8 h-8 bg-muted/50 rounded-full group-hover:bg-muted transition-colors\">\n                          {isExpanded ? (\n                            <ChevronUp className=\"h-4 w-4\" />\n                          ) : (\n                            <ChevronDown className=\"h-4 w-4\" />\n                          )}\n                        </div>\n                        <Laptop className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">{record.assetId}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {asset?.brand} {asset?.modelName}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className={`w-2 h-2 rounded-full ${typeColors[record.maintenanceType]}`}\n                        />\n                        <span className=\"capitalize\">{record.maintenanceType}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"max-w-xs\">\n                        <div className=\"text-sm truncate\">{record.description}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {getLocationName(asset?.locationId || null)}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                        {formatDate(record.scheduledDate)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className={`w-2 h-2 rounded-full ${statusColors[status]}`}\n                        />\n                        <span className=\"capitalize\">{status.replace('_', ' ')}</span>\n                        {record.completedDate && (\n                          <div className=\"text-xs text-muted-foreground\">\n                            {formatDate(record.completedDate)}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {formatCurrency(record.cost)}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <User className=\"h-3 w-3 text-muted-foreground\" />\n                        {record.technicianName || \"Not assigned\"}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ]\n\n                if (isExpanded) {\n                  rows.push(\n                    <TableRow key={`expanded-${record.id}`} className=\"bg-muted/10 hover:bg-muted/10\">\n                      <TableCell colSpan={7} className=\"p-6\">\n                        <div className=\"grid grid-cols-3 gap-6\">\n                          <div className=\"space-y-4\">\n                            <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Service Details</h4>\n                            <div className=\"space-y-3\">\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Maintenance Type</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <div className={`w-2 h-2 rounded-full ${typeColors[record.maintenanceType]}`} />\n                                  <span className=\"capitalize\">{record.maintenanceType}</span>\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Status</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <div className={`w-2 h-2 rounded-full ${statusColors[status]}`} />\n                                  <span className=\"capitalize\">{status.replace('_', ' ')}</span>\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Description</div>\n                                <div className=\"text-sm mt-1 p-2 bg-muted/30 rounded\">\n                                  {record.description}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"space-y-4\">\n                            <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Timeline & Technician</h4>\n                            <div className=\"space-y-3\">\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Scheduled Date</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <Calendar className=\"h-3 w-3\" />\n                                  {formatDate(record.scheduledDate)}\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Completed Date</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <Calendar className=\"h-3 w-3\" />\n                                  {record.completedDate ? formatDate(record.completedDate) : 'Not completed'}\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Technician</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <User className=\"h-3 w-3\" />\n                                  {record.technicianName || 'Not assigned'}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"space-y-4\">\n                            <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Asset & Cost</h4>\n                            <div className=\"space-y-3\">\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Asset ID</div>\n                                <div className=\"text-sm mt-1 font-mono\">{record.assetId}</div>\n                                <div className=\"text-xs text-muted-foreground mt-1\">\n                                  {asset?.brand} {asset?.modelName} ({asset?.assetType})\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Location</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2\">\n                                  <MapPin className=\"h-3 w-3\" />\n                                  {getLocationName(asset?.locationId || null)}\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"text-xs text-muted-foreground\">Maintenance Cost</div>\n                                <div className=\"text-sm mt-1 flex items-center gap-2 font-semibold\">\n                                  <DollarSign className=\"h-3 w-3\" />\n                                  {formatCurrency(record.cost)}\n                                </div>\n                              </div>\n                              {record.partsReplaced && (\n                                <div>\n                                  <div className=\"text-xs text-muted-foreground\">Parts Replaced</div>\n                                  <div className=\"text-sm mt-1 p-2 bg-muted/30 rounded\">\n                                    {record.partsReplaced}\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex gap-2 mt-6 pt-4 border-t border-border/50\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              setSelectedMaintenance(record)\n                              setIsViewDialogOpen(true)\n                            }}\n                            data-testid={`button-view-details-${record.id}`}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Full Details\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              setSelectedMaintenance(record)\n                              setIsEditDialogOpen(true)\n                            }}\n                            data-testid={`button-edit-maintenance-${record.id}`}\n                          >\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit Maintenance\n                          </Button>\n                          {!record.completedDate && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.stopPropagation()\n                                setSelectedMaintenance(record)\n                                setIsCompleteDialogOpen(true)\n                              }}\n                              data-testid={`button-complete-${record.id}`}\n                            >\n                              <CheckCircle className=\"mr-2 h-4 w-4\" />\n                              Mark Complete\n                            </Button>\n                          )}\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation()\n                              if (window.confirm(`Are you sure you want to delete this maintenance record? This action cannot be undone.`)) {\n                                deleteMaintenanceMutation.mutate(record.id)\n                              }\n                            }}\n                            data-testid={`button-delete-maintenance-${record.id}`}\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete Record\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  )\n                }\n\n                return rows\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Maintenance Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Maintenance Details</DialogTitle>\n            <DialogDescription>\n              View service history, cost breakdowns, parts inventory, and technician performance records\n            </DialogDescription>\n          </DialogHeader>\n          {selectedMaintenance && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Asset</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedMaintenance.assetId}\n                    <div className=\"text-xs text-muted-foreground\">\n                      {getAssetInfo(selectedMaintenance.assetId)?.brand} {getAssetInfo(selectedMaintenance.assetId)?.modelName}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Type</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded capitalize\">\n                    {selectedMaintenance.maintenanceType}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Description</Label>\n                <div className=\"text-sm p-2 bg-muted rounded\">\n                  {selectedMaintenance.description}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Scheduled Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDate(selectedMaintenance.scheduledDate)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Completed Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedMaintenance.completedDate ? formatDate(selectedMaintenance.completedDate) : \"Not completed\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Cost</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatCurrency(selectedMaintenance.cost)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Technician</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedMaintenance.technicianName || \"Not assigned\"}\n                  </div>\n                </div>\n              </div>\n\n              {selectedMaintenance.partsReplaced && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Parts Replaced</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedMaintenance.partsReplaced}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Maintenance Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Maintenance</DialogTitle>\n            <DialogDescription>\n              Modify service details, scheduling, cost estimates, and resource allocation for {selectedMaintenance?.assetId}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedMaintenance && (\n            <form onSubmit={handleUpdateMaintenance} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-description\">Description *</Label>\n                <Textarea\n                  id=\"edit-description\"\n                  value={updateForm.description}\n                  onChange={(e) => setUpdateForm({ ...updateForm, description: e.target.value })}\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-scheduledDate\">Scheduled Date *</Label>\n                  <Input\n                    id=\"edit-scheduledDate\"\n                    type=\"date\"\n                    value={updateForm.scheduledDate}\n                    onChange={(e) => setUpdateForm({ ...updateForm, scheduledDate: e.target.value })}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-cost\">Cost</Label>\n                  <Input\n                    id=\"edit-cost\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={updateForm.cost}\n                    onChange={(e) => setUpdateForm({ ...updateForm, cost: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-technicianName\">Technician Name</Label>\n                  <Input\n                    id=\"edit-technicianName\"\n                    value={updateForm.technicianName}\n                    onChange={(e) => setUpdateForm({ ...updateForm, technicianName: e.target.value })}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-partsReplaced\">Parts Replaced</Label>\n                  <Input\n                    id=\"edit-partsReplaced\"\n                    value={updateForm.partsReplaced}\n                    onChange={(e) => setUpdateForm({ ...updateForm, partsReplaced: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsEditDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateMaintenanceMutation.isPending}>\n                  {updateMaintenanceMutation.isPending ? \"Updating...\" : \"Update Maintenance\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Complete Maintenance Dialog */}\n      <Dialog open={isCompleteDialogOpen} onOpenChange={setIsCompleteDialogOpen}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Complete Maintenance</DialogTitle>\n            <DialogDescription>\n              Finalize service record with completion date, final costs, and parts replacement documentation for {selectedMaintenance?.assetId}\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleCompleteMaintenance} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"complete-cost\">Final Cost</Label>\n                <Input\n                  id=\"complete-cost\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={completeForm.cost}\n                  onChange={(e) => setCompleteForm({ ...completeForm, cost: e.target.value })}\n                  placeholder=\"Final maintenance cost\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"complete-technicianName\">Technician Name</Label>\n                <Input\n                  id=\"complete-technicianName\"\n                  value={completeForm.technicianName}\n                  onChange={(e) => setCompleteForm({ ...completeForm, technicianName: e.target.value })}\n                  placeholder=\"Who performed the work\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"complete-partsReplaced\">Parts Replaced</Label>\n              <Textarea\n                id=\"complete-partsReplaced\"\n                value={completeForm.partsReplaced}\n                onChange={(e) => setCompleteForm({ ...completeForm, partsReplaced: e.target.value })}\n                placeholder=\"List all parts that were replaced\"\n                rows={3}\n              />\n            </div>\n\n            <DialogFooter>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setIsCompleteDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={updateMaintenanceMutation.isPending}>\n                {updateMaintenanceMutation.isPending ? \"Completing...\" : \"Mark Complete\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":56297},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  FileText, \n  Plus, \n  Search, \n  Download,\n  Calendar,\n  Filter,\n  BarChart3,\n  PieChart,\n  LineChart,\n  TrendingUp,\n  Clock,\n  Users,\n  Laptop,\n  MapPin,\n  Wrench,\n  Building,\n  Eye,\n  Edit,\n  Trash2,\n  Play,\n  Settings,\n  Save\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { SidebarTrigger } from \"@/components/ui/sidebar\"\n\n// TypeScript interfaces\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\ninterface ReportTemplate {\n  id: string\n  name: string\n  description: string\n  category: \"assets\" | \"maintenance\" | \"assignments\" | \"locations\" | \"compliance\"\n  icon: any\n  color: string\n  fields: string[]\n  filters: string[]\n  lastRun?: string\n  totalRuns: number\n}\n\ninterface CustomReport {\n  id: string\n  name: string\n  description: string\n  entity: \"assets\" | \"employees\" | \"assignments\" | \"maintenance\" | \"locations\"\n  fields: string[]\n  filters: Record<string, any>\n  createdDate: string\n  createdBy: string\n  lastRun?: string\n  totalRuns: number\n}\n\nexport default function ReportsPage() {\n  const [activeTab, setActiveTab] = useState(\"templates\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedTemplate, setSelectedTemplate] = useState<ReportTemplate | null>(null)\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  \n  // Custom report builder state\n  const [reportName, setReportName] = useState(\"\")\n  const [reportDescription, setReportDescription] = useState(\"\")\n  const [selectedEntity, setSelectedEntity] = useState(\"\")\n  const [selectedFields, setSelectedFields] = useState<string[]>([])\n  const [reportFilters, setReportFilters] = useState<Record<string, any>>({})\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Fetch locations for filtering\n  const { data: locations = [] } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Fetch report templates from API\n  const { data: reportTemplates = [], isLoading: templatesLoading } = useQuery<ReportTemplate[]>({\n    queryKey: [\"/api/reports/templates\"],\n  })\n\n  // Fetch custom reports from API\n  const { data: customReports = [], isLoading: customReportsLoading } = useQuery<CustomReport[]>({\n    queryKey: [\"/api/reports/custom\"],\n  })\n\n  // Helper functions (moved above usage)\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case \"assets\": return Laptop\n      case \"maintenance\": return Wrench\n      case \"assignments\": return Users\n      case \"locations\": return MapPin\n      case \"compliance\": return Building\n      default: return FileText\n    }\n  }\n\n  const getCategoryColorClass = (category: string) => {\n    switch (category) {\n      case \"assets\": return \"bg-blue-400\"\n      case \"maintenance\": return \"bg-orange-500\"\n      case \"assignments\": return \"bg-green-400\"\n      case \"locations\": return \"bg-purple-400\"\n      case \"compliance\": return \"bg-red-400\"\n      default: return \"bg-gray-500\"\n    }\n  }\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case \"assets\": return \"text-blue-600 bg-blue-50\"\n      case \"maintenance\": return \"text-orange-600 bg-orange-50\"\n      case \"assignments\": return \"text-green-600 bg-green-50\"\n      case \"locations\": return \"text-purple-600 bg-purple-50\"\n      case \"compliance\": return \"text-red-600 bg-red-50\"\n      default: return \"text-gray-600 bg-gray-50\"\n    }\n  }\n\n  // Add icons and colors to templates (using real data from API)\n  const enrichedTemplates = reportTemplates.map(template => ({\n    ...template,\n    icon: getCategoryIcon(template.category),\n    color: getCategoryColorClass(template.category)\n  }))\n\n  // Entity field mappings for custom report builder\n  const entityFields = {\n    assets: [\n      { id: \"assetId\", label: \"Asset ID\", type: \"text\" },\n      { id: \"assetType\", label: \"Asset Type\", type: \"text\" }, \n      { id: \"brand\", label: \"Brand\", type: \"text\" },\n      { id: \"model\", label: \"Model\", type: \"text\" },\n      { id: \"serialNumber\", label: \"Serial Number\", type: \"text\" },\n      { id: \"purchaseDate\", label: \"Purchase Date\", type: \"date\" },\n      { id: \"purchaseCost\", label: \"Purchase Cost\", type: \"number\" },\n      { id: \"warrantyUntil\", label: \"Warranty Until\", type: \"date\" },\n      { id: \"status\", label: \"Status\", type: \"select\" },\n      { id: \"condition\", label: \"Condition\", type: \"select\" },\n      { id: \"location\", label: \"Location\", type: \"select\" }\n    ],\n    employees: [\n      { id: \"employeeCode\", label: \"Employee Code\", type: \"text\" },\n      { id: \"firstName\", label: \"First Name\", type: \"text\" },\n      { id: \"lastName\", label: \"Last Name\", type: \"text\" },\n      { id: \"email\", label: \"Email\", type: \"text\" },\n      { id: \"department\", label: \"Department\", type: \"select\" },\n      { id: \"position\", label: \"Position\", type: \"text\" },\n      { id: \"location\", label: \"Location\", type: \"select\" }\n    ],\n    assignments: [\n      { id: \"assetId\", label: \"Asset ID\", type: \"text\" },\n      { id: \"employeeCode\", label: \"Employee Code\", type: \"text\" },\n      { id: \"employeeName\", label: \"Employee Name\", type: \"text\" },\n      { id: \"assignedDate\", label: \"Assigned Date\", type: \"date\" },\n      { id: \"returnedDate\", label: \"Returned Date\", type: \"date\" },\n      { id: \"duration\", label: \"Duration (Days)\", type: \"number\" },\n      { id: \"notes\", label: \"Notes\", type: \"text\" }\n    ],\n    maintenance: [\n      { id: \"assetId\", label: \"Asset ID\", type: \"text\" },\n      { id: \"maintenanceType\", label: \"Maintenance Type\", type: \"select\" },\n      { id: \"description\", label: \"Description\", type: \"text\" },\n      { id: \"scheduledDate\", label: \"Scheduled Date\", type: \"date\" },\n      { id: \"completedDate\", label: \"Completed Date\", type: \"date\" },\n      { id: \"cost\", label: \"Cost\", type: \"number\" },\n      { id: \"vendor\", label: \"Vendor\", type: \"text\" },\n      { id: \"status\", label: \"Status\", type: \"select\" }\n    ],\n    locations: [\n      { id: \"outletName\", label: \"Outlet Name\", type: \"text\" },\n      { id: \"city\", label: \"City\", type: \"text\" },\n      { id: \"state\", label: \"State\", type: \"text\" },\n      { id: \"manager\", label: \"Manager\", type: \"text\" },\n      { id: \"contactEmail\", label: \"Contact Email\", type: \"text\" },\n      { id: \"contactPhone\", label: \"Contact Phone\", type: \"text\" }\n    ]\n  }\n\n  // Handle template report generation\n  const handleRunTemplate = async (template: ReportTemplate, format: string = 'excel') => {\n    try {\n      toast({\n        title: \"Generating Report\",\n        description: `Generating ${template.name}...`\n      })\n\n      const response = await fetch('/api/reports/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          templateId: template.id,\n          filters: {},\n          format: format\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to generate report: ${response.statusText}`)\n      }\n\n      if (format === 'excel' || format === 'csv') {\n        // Handle file download\n        const blob = await response.blob()\n        const url = window.URL.createObjectURL(blob)\n        const contentDisposition = response.headers.get('Content-Disposition')\n        const filename = contentDisposition \n          ? contentDisposition.split('filename=')[1]?.replace(/\"/g, '')\n          : `${template.name.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.${format}`\n        \n        const a = document.createElement('a')\n        a.href = url\n        a.download = filename\n        document.body.appendChild(a)\n        a.click()\n        window.URL.revokeObjectURL(url)\n        document.body.removeChild(a)\n\n        toast({\n          title: \"Report Downloaded\",\n          description: `${template.name} has been downloaded successfully`\n        })\n      } else {\n        // Handle JSON response\n        const data = await response.json()\n        toast({\n          title: \"Report Generated\",\n          description: `Generated ${data.rowCount} records for ${template.name}`\n        })\n      }\n    } catch (error) {\n      console.error('Error generating report:', error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate report. Please try again.\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  // Handle custom report creation\n  const handleCreateCustomReport = async () => {\n    if (!reportName || !selectedEntity) {\n      toast({\n        title: \"Error\", \n        description: \"Please fill in required fields\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    try {\n      const response = await fetch('/api/reports/custom', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: reportName,\n          description: reportDescription,\n          entity: selectedEntity,\n          fields: selectedFields,\n          filters: reportFilters\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to create custom report: ${response.statusText}`)\n      }\n\n      const newReport = await response.json()\n\n      toast({\n        title: \"Success\",\n        description: `Custom report \"${reportName}\" has been created`\n      })\n\n      // Reset form\n      setReportName(\"\")\n      setReportDescription(\"\")\n      setSelectedEntity(\"\")\n      setSelectedFields([])\n      setReportFilters({})\n      setIsCreateDialogOpen(false)\n\n      // Refetch custom reports to update the list\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports/custom\"] })\n\n    } catch (error) {\n      console.error('Error creating custom report:', error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to create custom report. Please try again.\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  // Handle custom report generation\n  const handleRunCustomReport = async (report: CustomReport, format: string = 'excel') => {\n    try {\n      toast({\n        title: \"Generating Report\",\n        description: `Generating ${report.name}...`\n      })\n\n      const response = await fetch(`/api/reports/custom/${report.id}/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          format: format\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to generate custom report: ${response.statusText}`)\n      }\n\n      if (format === 'excel') {\n        // Handle file download\n        const blob = await response.blob()\n        const url = window.URL.createObjectURL(blob)\n        const filename = `${report.name.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.xlsx`\n        \n        const a = document.createElement('a')\n        a.href = url\n        a.download = filename\n        document.body.appendChild(a)\n        a.click()\n        window.URL.revokeObjectURL(url)\n        document.body.removeChild(a)\n\n        toast({\n          title: \"Report Downloaded\", \n          description: `${report.name} has been downloaded successfully`\n        })\n      }\n    } catch (error) {\n      console.error('Error generating custom report:', error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate custom report. Please try again.\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  // Filter enriched templates based on search\n  const filteredTemplates = enrichedTemplates.filter(template => \n    template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    template.description.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  // Filter custom reports based on search\n  const filteredCustomReports = customReports.filter(report => \n    report.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    report.description.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  return (\n    <div className=\"p-6 space-y-6 animate-fade-in\">\n      <SidebarTrigger data-testid=\"button-sidebar-toggle\" className=\"mb-4 text-white/80 hover:text-white hover:bg-white/10 rounded-md\" />\n      \n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight text-white\">Reports</h1>\n          <p className=\"text-white/70\">\n            Generate comprehensive reports and analytics for enterprise master data management\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Clock className=\"h-4 w-4\" />\n            Scheduled Reports\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Create Custom Report\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Create Custom Report</DialogTitle>\n                <DialogDescription>\n                  Design analytics dashboards with customizable data sources, field selection, and advanced filtering criteria\n                </DialogDescription>\n              </DialogHeader>\n              \n              <div className=\"space-y-6\">\n                {/* Report Basic Info */}\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"reportName\">Report Name *</Label>\n                    <Input\n                      id=\"reportName\"\n                      value={reportName}\n                      onChange={(e) => setReportName(e.target.value)}\n                      placeholder=\"Enter report name\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"reportDescription\">Description</Label>\n                    <Textarea\n                      id=\"reportDescription\"\n                      value={reportDescription}\n                      onChange={(e) => setReportDescription(e.target.value)}\n                      placeholder=\"Describe what this report will show\"\n                      rows={3}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"entity\">Data Source *</Label>\n                    <Select value={selectedEntity} onValueChange={setSelectedEntity}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select data source\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"assets\">Assets</SelectItem>\n                        <SelectItem value=\"employees\">Employees</SelectItem>\n                        <SelectItem value=\"assignments\">Assignments</SelectItem>\n                        <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                        <SelectItem value=\"locations\">Locations</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                {/* Field Selection */}\n                {selectedEntity && (\n                  <div className=\"space-y-4\">\n                    <Separator />\n                    <div>\n                      <Label className=\"text-base font-medium\">Report Fields</Label>\n                      <p className=\"text-sm text-muted-foreground\">Select which fields to include in your report</p>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-2 max-h-40 overflow-y-auto p-2 border rounded\">\n                      {entityFields[selectedEntity as keyof typeof entityFields]?.map((field) => (\n                        <label key={field.id} className=\"flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedFields.includes(field.id)}\n                            onChange={(e) => {\n                              if (e.target.checked) {\n                                setSelectedFields([...selectedFields, field.id])\n                              } else {\n                                setSelectedFields(selectedFields.filter(f => f !== field.id))\n                              }\n                            }}\n                            className=\"rounded border-gray-300\"\n                          />\n                          <span className=\"text-sm\">{field.label}</span>\n                        </label>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Filters */}\n                {selectedEntity && (\n                  <div className=\"space-y-4\">\n                    <Separator />\n                    <div>\n                      <Label className=\"text-base font-medium\">Filters</Label>\n                      <p className=\"text-sm text-muted-foreground\">Add filters to refine your report data</p>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label>Location</Label>\n                        <Select \n                          value={reportFilters.location || \"\"} \n                          onValueChange={(value) => setReportFilters({...reportFilters, location: value})}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"All locations\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"\">All Locations</SelectItem>\n                            {locations.map(location => (\n                              <SelectItem key={location.id} value={location.id.toString()}>\n                                {location.outletName}, {location.city}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label>Date Range</Label>\n                        <Select \n                          value={reportFilters.dateRange || \"\"} \n                          onValueChange={(value) => setReportFilters({...reportFilters, dateRange: value})}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"All time\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"\">All Time</SelectItem>\n                            <SelectItem value=\"last7days\">Last 7 Days</SelectItem>\n                            <SelectItem value=\"last30days\">Last 30 Days</SelectItem>\n                            <SelectItem value=\"last3months\">Last 3 Months</SelectItem>\n                            <SelectItem value=\"last6months\">Last 6 Months</SelectItem>\n                            <SelectItem value=\"lastyear\">Last Year</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <DialogFooter>\n                <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={handleCreateCustomReport}>\n                  Create Report\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Report Templates</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{enrichedTemplates.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Pre-built reports available</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Custom Reports</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">{customReports.length}</div>\n            <p className=\"text-xs text-muted-foreground\">User-created reports</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Reports Run</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">\n              {enrichedTemplates.reduce((sum, r) => sum + (r.totalRuns || 0), 0) + \n               customReports.reduce((sum, r) => sum + (r.totalRuns || 0), 0)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">This month</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0 glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Export Formats</CardTitle>\n            <Download className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\">3</div>\n            <p className=\"text-xs text-muted-foreground\">Excel, CSV, PDF</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <Card className=\"glass-card border-0 glass-card border-0\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search reports by name or description...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-8\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Report Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"templates\">Report Templates</TabsTrigger>\n          <TabsTrigger value=\"custom\">Custom Reports</TabsTrigger>\n        </TabsList>\n\n        {/* Report Templates Tab */}\n        <TabsContent value=\"templates\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {filteredTemplates.map((template) => {\n              const IconComponent = template.icon\n              return (\n                <Card key={template.id} className=\"glass-card border-0 hover:shadow-md transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`p-2 rounded-lg ${template.color}`}>\n                          <IconComponent className=\"h-5 w-5 text-white\" />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg\">{template.name}</CardTitle>\n                          <Badge variant=\"outline\" className={getCategoryColor(template.category)}>\n                            {template.category}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      {template.description}\n                    </p>\n                    \n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span>Fields: {template.fields.length}</span>\n                      <span>Runs: {template.totalRuns}</span>\n                      {template.lastRun && (\n                        <span>Last: {new Date(template.lastRun).toLocaleDateString()}</span>\n                      )}\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                      <Button \n                        size=\"sm\" \n                        className=\"flex-1\"\n                        onClick={() => handleRunTemplate(template)}\n                      >\n                        <Play className=\"h-4 w-4 mr-2\" />\n                        Run Report\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => setSelectedTemplate(template)}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              )\n            })}\n          </div>\n        </TabsContent>\n\n        {/* Custom Reports Tab */}\n        <TabsContent value=\"custom\" className=\"space-y-4\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Report Name</TableHead>\n                <TableHead>Entity</TableHead>\n                <TableHead>Created</TableHead>\n                <TableHead>Last Run</TableHead>\n                <TableHead>Total Runs</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredCustomReports.map((report) => (\n                <TableRow key={report.id}>\n                  <TableCell>\n                    <div>\n                      <div className=\"font-medium\">{report.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {report.description}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\" className=\"capitalize\">\n                      {report.entity}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      {new Date(report.createdDate).toLocaleDateString()}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      by {report.createdBy}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {report.lastRun ? (\n                      <div className=\"text-sm\">\n                        {new Date(report.lastRun).toLocaleDateString()}\n                      </div>\n                    ) : (\n                      <span className=\"text-white/70\">Never</span>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"secondary\">\n                      {report.totalRuns}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex gap-2\">\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Play className=\"h-4 w-4\" />\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TabsContent>\n      </Tabs>\n\n      {/* Template Details Dialog */}\n      <Dialog open={!!selectedTemplate} onOpenChange={() => setSelectedTemplate(null)}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Report Template Details</DialogTitle>\n            <DialogDescription>\n              {selectedTemplate?.description}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedTemplate && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Category</Label>\n                  <Badge variant=\"outline\" className={getCategoryColor(selectedTemplate.category)}>\n                    {selectedTemplate.category}\n                  </Badge>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Total Runs</Label>\n                  <div className=\"text-sm\">{selectedTemplate.totalRuns}</div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Included Fields</Label>\n                <div className=\"flex flex-wrap gap-1\">\n                  {selectedTemplate.fields.map(field => (\n                    <Badge key={field} variant=\"secondary\" className=\"text-xs\">\n                      {field}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Available Filters</Label>\n                <div className=\"flex flex-wrap gap-1\">\n                  {selectedTemplate.filters.map(filter => (\n                    <Badge key={filter} variant=\"outline\" className=\"text-xs\">\n                      {filter}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setSelectedTemplate(null)}>\n              Close\n            </Button>\n            <Button onClick={() => selectedTemplate && handleRunTemplate(selectedTemplate)}>\n              Run Report\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":31999},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { \n  Building2, \n  Users, \n  Package, \n  MapPin, \n  Settings, \n  Shield, \n  Database,\n  Bell,\n  Upload,\n  Download,\n  Trash2,\n  Edit,\n  Plus,\n  Check,\n  X,\n  Link as LinkIcon,\n  Key,\n  Lock,\n  Eye,\n  EyeOff\n} from \"lucide-react\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Link } from \"wouter\";\nimport { useUser } from \"@/hooks/use-user\";\n\ninterface CompanySettings {\n  companyName: string;\n  logoUrl: string;\n  timezone: string;\n  dateFormat: string;\n  language: string;\n}\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  status: string;\n  lastLogin: string | null;\n  locationId: number | null;\n}\n\ninterface AssetType {\n  id: number;\n  name: string;\n  description: string | null;\n  isActive: boolean;\n}\n\nexport default function SettingsPage() {\n  const { toast } = useToast();\n  const { data: currentUser } = useUser();\n  \n  // Fetch company settings\n  const { data: companySettings, isLoading: loadingCompanySettings } = useQuery<CompanySettings>({\n    queryKey: [\"/api/settings/company\"],\n  });\n\n  // Fetch users\n  const { data: users, isLoading: loadingUsers } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    enabled: currentUser?.user?.role === 'super_admin' || currentUser?.user?.role === 'admin',\n  });\n\n  // Fetch asset types\n  const { data: assetTypes, isLoading: loadingAssetTypes } = useQuery<AssetType[]>({\n    queryKey: [\"/api/asset-types\"],\n  });\n\n  const [editingCompanySettings, setEditingCompanySettings] = useState<CompanySettings | null>(null);\n  const [newUser, setNewUser] = useState({\n    username: \"\",\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    role: \"user\",\n    password: \"\",\n    locationId: null as number | null,\n  });\n  const [newAssetType, setNewAssetType] = useState({\n    name: \"\",\n    description: \"\",\n  });\n\n  // Password reset state (self-service)\n  const [passwordData, setPasswordData] = useState({\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n  });\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  // Admin password reset state\n  const [adminResetDialog, setAdminResetDialog] = useState<{ open: boolean; user: User | null }>({\n    open: false,\n    user: null,\n  });\n  const [adminResetPassword, setAdminResetPassword] = useState(\"\");\n  const [adminResetConfirmPassword, setAdminResetConfirmPassword] = useState(\"\");\n  const [showAdminResetPassword, setShowAdminResetPassword] = useState(false);\n  const [showAdminResetConfirmPassword, setShowAdminResetConfirmPassword] = useState(false);\n\n  // Update company settings mutation\n  const updateCompanySettingsMutation = useMutation({\n    mutationFn: async (settings: CompanySettings) => {\n      return await apiRequest(\"PATCH\", \"/api/settings/company\", settings);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings/company\"] });\n      toast({\n        title: \"Success\",\n        description: \"Company settings updated successfully\",\n      });\n      setEditingCompanySettings(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update company settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create user mutation\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: typeof newUser) => {\n      return await apiRequest(\"POST\", \"/api/users\", userData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User created successfully\",\n      });\n      setNewUser({ \n        username: \"\", \n        email: \"\", \n        firstName: \"\", \n        lastName: \"\", \n        role: \"user\", \n        password: \"\",\n        locationId: null,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update user mutation\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      return await apiRequest(\"PATCH\", `/api/users/${id}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User status updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create asset type mutation\n  const createAssetTypeMutation = useMutation({\n    mutationFn: async (assetTypeData: typeof newAssetType) => {\n      return await apiRequest(\"POST\", \"/api/asset-types\", assetTypeData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/asset-types\"] });\n      toast({\n        title: \"Success\",\n        description: \"Asset type created successfully\",\n      });\n      setNewAssetType({ name: \"\", description: \"\" });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create asset type\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Password reset mutation (self-service)\n  const passwordResetMutation = useMutation({\n    mutationFn: async (data: typeof passwordData) => {\n      return await apiRequest(\"POST\", \"/api/auth/reset-password\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Password updated successfully\",\n      });\n      setPasswordData({\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Admin password reset mutation\n  const adminPasswordResetMutation = useMutation({\n    mutationFn: async ({ userId, newPassword, confirmPassword }: { userId: number; newPassword: string; confirmPassword: string }) => {\n      return await apiRequest(\"POST\", `/api/users/${userId}/reset-password`, { newPassword, confirmPassword });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: `Password reset successfully for ${adminResetDialog.user?.username}`,\n      });\n      setAdminResetDialog({ open: false, user: null });\n      setAdminResetPassword(\"\");\n      setAdminResetConfirmPassword(\"\");\n      setShowAdminResetPassword(false);\n      setShowAdminResetConfirmPassword(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reset password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveCompanySettings = () => {\n    if (editingCompanySettings) {\n      updateCompanySettingsMutation.mutate(editingCompanySettings);\n    }\n  };\n\n  const handleCreateUser = () => {\n    if (!newUser.username || !newUser.email || !newUser.firstName || !newUser.lastName || !newUser.password) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newUser.password.length < 8) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Password must be at least 8 characters\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createUserMutation.mutate(newUser);\n  };\n\n  const handleToggleUserStatus = (userId: number, currentStatus: string) => {\n    const newStatus = currentStatus === 'active' ? 'inactive' : 'active';\n    updateUserMutation.mutate({ id: userId, status: newStatus });\n  };\n\n  const handleCreateAssetType = () => {\n    if (!newAssetType.name) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Asset type name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createAssetTypeMutation.mutate(newAssetType);\n  };\n\n  const handlePasswordReset = () => {\n    // Validate fields\n    if (!passwordData.currentPassword || !passwordData.newPassword || !passwordData.confirmPassword) {\n      toast({\n        title: \"Validation Error\",\n        description: \"All password fields are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check password length\n    if (passwordData.newPassword.length < 8) {\n      toast({\n        title: \"Validation Error\",\n        description: \"New password must be at least 8 characters\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check passwords match\n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check if new password is different from current\n    if (passwordData.newPassword === passwordData.currentPassword) {\n      toast({\n        title: \"Validation Error\",\n        description: \"New password must be different from current password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    passwordResetMutation.mutate(passwordData);\n  };\n\n  const handleAdminPasswordReset = () => {\n    if (!adminResetPassword || !adminResetConfirmPassword) {\n      toast({\n        title: \"Validation Error\",\n        description: \"All password fields are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (adminResetPassword.length < 8) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Password must be at least 8 characters\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (adminResetPassword !== adminResetConfirmPassword) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!adminResetDialog.user) {\n      return;\n    }\n\n    adminPasswordResetMutation.mutate({\n      userId: adminResetDialog.user.id,\n      newPassword: adminResetPassword,\n      confirmPassword: adminResetConfirmPassword,\n    });\n  };\n\n  const canResetUserPassword = (targetUser: User) => {\n    // Cannot reset own password via admin endpoint\n    if (targetUser.id === currentUser?.user?.id) {\n      return false;\n    }\n\n    // Super admin can reset anyone's password (except their own)\n    if (currentUser?.user?.role === 'super_admin') {\n      return true;\n    }\n\n    // Admin cannot reset super admin passwords\n    if (currentUser?.user?.role === 'admin' && targetUser.role !== 'super_admin') {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isSuperAdmin = currentUser?.user?.role === 'super_admin';\n  const isAdmin = currentUser?.user?.role === 'admin' || isSuperAdmin;\n\n  return (\n    <div className=\"min-h-screen glass-bg p-4 md:p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <SidebarTrigger data-testid=\"button-sidebar-toggle\" className=\"mb-4 text-white/80 hover:text-white hover:bg-white/10 rounded-md\" />\n        \n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white/90 flex items-center gap-3\">\n              <Settings className=\"h-8 w-8 text-purple-400\" />\n              System Settings\n            </h1>\n            <p className=\"text-white/60 mt-1\">Manage system configuration and preferences</p>\n          </div>\n        </div>\n\n        {/* Settings Tabs */}\n        <Tabs defaultValue=\"company\" className=\"space-y-6\">\n          <TabsList className=\"glass-card\">\n            <TabsTrigger value=\"company\" data-testid=\"tab-company\">\n              <Building2 className=\"h-4 w-4 mr-2\" />\n              Company\n            </TabsTrigger>\n            {isAdmin && (\n              <TabsTrigger value=\"users\" data-testid=\"tab-users\">\n                <Users className=\"h-4 w-4 mr-2\" />\n                Users\n              </TabsTrigger>\n            )}\n            <TabsTrigger value=\"assets\" data-testid=\"tab-assets\">\n              <Package className=\"h-4 w-4 mr-2\" />\n              Asset Types\n            </TabsTrigger>\n            <TabsTrigger value=\"locations\" data-testid=\"tab-locations\">\n              <MapPin className=\"h-4 w-4 mr-2\" />\n              Locations\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" data-testid=\"tab-security\">\n              <Shield className=\"h-4 w-4 mr-2\" />\n              Security\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Company Settings */}\n          <TabsContent value=\"company\" className=\"space-y-6\">\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white/90\">\n                  <Building2 className=\"h-5 w-5 text-purple-400\" />\n                  Company Information\n                </CardTitle>\n                <CardDescription className=\"text-white/60\">\n                  Update your organization details and preferences\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {loadingCompanySettings ? (\n                  <div className=\"text-white/60\">Loading company settings...</div>\n                ) : (\n                  <>\n                    <div className=\"grid gap-4 md:grid-cols-2\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"companyName\" className=\"text-white/80\">Company Name</Label>\n                        <Input\n                          id=\"companyName\"\n                          value={editingCompanySettings?.companyName || companySettings?.companyName || \"\"}\n                          onChange={(e) => setEditingCompanySettings({\n                            ...(editingCompanySettings || companySettings || {} as CompanySettings),\n                            companyName: e.target.value\n                          })}\n                          placeholder=\"BODYCRAFT\"\n                          className=\"glass-input\"\n                          data-testid=\"input-company-name\"\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"timezone\" className=\"text-white/80\">Timezone</Label>\n                        <Select\n                          value={editingCompanySettings?.timezone || companySettings?.timezone || \"Asia/Kolkata\"}\n                          onValueChange={(value) => setEditingCompanySettings({\n                            ...(editingCompanySettings || companySettings || {} as CompanySettings),\n                            timezone: value\n                          })}\n                        >\n                          <SelectTrigger className=\"glass-input\" data-testid=\"select-timezone\">\n                            <SelectValue placeholder=\"Select timezone\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Asia/Kolkata\">Asia/Kolkata (IST)</SelectItem>\n                            <SelectItem value=\"UTC\">UTC</SelectItem>\n                            <SelectItem value=\"America/New_York\">America/New York (EST)</SelectItem>\n                            <SelectItem value=\"Europe/London\">Europe/London (GMT)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"dateFormat\" className=\"text-white/80\">Date Format</Label>\n                        <Select\n                          value={editingCompanySettings?.dateFormat || companySettings?.dateFormat || \"DD/MM/YYYY\"}\n                          onValueChange={(value) => setEditingCompanySettings({\n                            ...(editingCompanySettings || companySettings || {} as CompanySettings),\n                            dateFormat: value\n                          })}\n                        >\n                          <SelectTrigger className=\"glass-input\" data-testid=\"select-date-format\">\n                            <SelectValue placeholder=\"Select date format\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"DD/MM/YYYY\">DD/MM/YYYY</SelectItem>\n                            <SelectItem value=\"MM/DD/YYYY\">MM/DD/YYYY</SelectItem>\n                            <SelectItem value=\"YYYY-MM-DD\">YYYY-MM-DD</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"language\" className=\"text-white/80\">Language</Label>\n                        <Select\n                          value={editingCompanySettings?.language || companySettings?.language || \"en\"}\n                          onValueChange={(value) => setEditingCompanySettings({\n                            ...(editingCompanySettings || companySettings || {} as CompanySettings),\n                            language: value\n                          })}\n                        >\n                          <SelectTrigger className=\"glass-input\" data-testid=\"select-language\">\n                            <SelectValue placeholder=\"Select language\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"en\">English</SelectItem>\n                            <SelectItem value=\"hi\">Hindi</SelectItem>\n                            <SelectItem value=\"ta\">Tamil</SelectItem>\n                            <SelectItem value=\"te\">Telugu</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-3\">\n                      <Button \n                        onClick={handleSaveCompanySettings} \n                        disabled={!editingCompanySettings || updateCompanySettingsMutation.isPending}\n                        className=\"bg-gradient-to-r from-purple-500 to-blue-500\"\n                        data-testid=\"button-save-company-settings\"\n                      >\n                        {updateCompanySettingsMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                      </Button>\n                      {editingCompanySettings && (\n                        <Button \n                          variant=\"outline\" \n                          onClick={() => setEditingCompanySettings(null)}\n                          data-testid=\"button-cancel-company-settings\"\n                        >\n                          Cancel\n                        </Button>\n                      )}\n                    </div>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* User Management */}\n          {isAdmin && (\n            <TabsContent value=\"users\" className=\"space-y-6\">\n              <Card className=\"glass-card border-0\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-white/90\">\n                    <Users className=\"h-5 w-5 text-purple-400\" />\n                    User Management\n                  </CardTitle>\n                  <CardDescription className=\"text-white/60\">\n                    Create and manage user accounts\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* Create New User Form - Super Admin Only */}\n                  {isSuperAdmin && (\n                    <div className=\"p-6 rounded-lg bg-white/5 border border-white/10 space-y-4\">\n                      <h3 className=\"text-lg font-semibold text-white/90 flex items-center gap-2\">\n                        <Plus className=\"h-5 w-5 text-purple-400\" />\n                        Create New User\n                      </h3>\n                      \n                      <div className=\"grid gap-4 md:grid-cols-2\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"new-username\" className=\"text-white/80\">Username *</Label>\n                          <Input\n                            id=\"new-username\"\n                            value={newUser.username}\n                            onChange={(e) => setNewUser({ ...newUser, username: e.target.value })}\n                            placeholder=\"Enter username\"\n                            className=\"glass-input\"\n                            data-testid=\"input-new-username\"\n                          />\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"new-email\" className=\"text-white/80\">Email *</Label>\n                          <Input\n                            id=\"new-email\"\n                            type=\"email\"\n                            value={newUser.email}\n                            onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}\n                            placeholder=\"Enter email\"\n                            className=\"glass-input\"\n                            data-testid=\"input-new-email\"\n                          />\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"new-first-name\" className=\"text-white/80\">First Name *</Label>\n                          <Input\n                            id=\"new-first-name\"\n                            value={newUser.firstName}\n                            onChange={(e) => setNewUser({ ...newUser, firstName: e.target.value })}\n                            placeholder=\"Enter first name\"\n                            className=\"glass-input\"\n                            data-testid=\"input-new-firstname\"\n                          />\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"new-last-name\" className=\"text-white/80\">Last Name *</Label>\n                          <Input\n                            id=\"new-last-name\"\n                            value={newUser.lastName}\n                            onChange={(e) => setNewUser({ ...newUser, lastName: e.target.value })}\n                            placeholder=\"Enter last name\"\n                            className=\"glass-input\"\n                            data-testid=\"input-new-lastname\"\n                          />\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"new-role\" className=\"text-white/80\">Role *</Label>\n                          <Select\n                            value={newUser.role}\n                            onValueChange={(value) => setNewUser({ ...newUser, role: value })}\n                          >\n                            <SelectTrigger className=\"glass-input\" data-testid=\"select-new-role\">\n                              <SelectValue placeholder=\"Select role\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"super_admin\">Super Admin</SelectItem>\n                              <SelectItem value=\"admin\">Admin</SelectItem>\n                              <SelectItem value=\"manager\">Manager</SelectItem>\n                              <SelectItem value=\"user\">User</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"new-password\" className=\"text-white/80\">Password * (min 8 characters)</Label>\n                          <Input\n                            id=\"new-password\"\n                            type=\"password\"\n                            value={newUser.password}\n                            onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}\n                            placeholder=\"Enter password\"\n                            className=\"glass-input\"\n                            data-testid=\"input-new-password\"\n                          />\n                        </div>\n                      </div>\n\n                      <Button \n                        onClick={handleCreateUser} \n                        disabled={createUserMutation.isPending}\n                        className=\"bg-gradient-to-r from-purple-500 to-blue-500\"\n                        data-testid=\"button-create-user\"\n                      >\n                        {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n                      </Button>\n                    </div>\n                  )}\n\n                  {/* Existing Users List */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-semibold text-white/90\">Existing Users</h3>\n                    \n                    {loadingUsers ? (\n                      <div className=\"text-white/60\">Loading users...</div>\n                    ) : users && users.length > 0 ? (\n                      <div className=\"space-y-3\">\n                        {users.map((user) => (\n                          <div\n                            key={user.id}\n                            className=\"flex items-center justify-between p-4 rounded-lg bg-white/5 border border-white/10\"\n                            data-testid={`user-item-${user.id}`}\n                          >\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-3\">\n                                <h4 className=\"font-medium text-white/90\">{user.firstName} {user.lastName}</h4>\n                                <Badge variant={user.status === 'active' ? 'default' : 'secondary'}>\n                                  {user.status}\n                                </Badge>\n                                <Badge variant=\"outline\">{user.role}</Badge>\n                              </div>\n                              <div className=\"text-sm text-white/60 mt-1\">\n                                {user.email} • @{user.username}\n                                {user.lastLogin && ` • Last login: ${new Date(user.lastLogin).toLocaleDateString()}`}\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex gap-2 items-center min-w-[280px] justify-end\">\n                              {/* Reset Password Button - Available to admins and super admins */}\n                              {isAdmin && user.id !== currentUser?.user?.id && canResetUserPassword(user) && (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => setAdminResetDialog({ open: true, user })}\n                                  data-testid={`button-reset-password-${user.id}`}\n                                  className=\"shrink-0\"\n                                >\n                                  <Key className=\"h-4 w-4 mr-2\" />\n                                  Reset Password\n                                </Button>\n                              )}\n                              \n                              {/* Activate/Deactivate Button - Super Admin Only */}\n                              {isSuperAdmin && user.id !== currentUser?.user?.id && (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleToggleUserStatus(user.id, user.status)}\n                                  disabled={updateUserMutation.isPending}\n                                  data-testid={`button-toggle-status-${user.id}`}\n                                  className=\"shrink-0 min-w-[100px]\"\n                                >\n                                  {user.status === 'active' ? 'Deactivate' : 'Activate'}\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-white/60\">No users found.</div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          )}\n\n          {/* Asset Types */}\n          <TabsContent value=\"assets\" className=\"space-y-6\">\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white/90\">\n                  <Package className=\"h-5 w-5 text-purple-400\" />\n                  Asset Type Configuration\n                </CardTitle>\n                <CardDescription className=\"text-white/60\">\n                  Define the types of assets tracked in your system\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Create New Asset Type */}\n                <div className=\"p-6 rounded-lg bg-white/5 border border-white/10 space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-white/90 flex items-center gap-2\">\n                    <Plus className=\"h-5 w-5 text-purple-400\" />\n                    Add Asset Type\n                  </h3>\n                  \n                  <div className=\"grid gap-4 md:grid-cols-2\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"asset-type-name\" className=\"text-white/80\">Type Name *</Label>\n                      <Input\n                        id=\"asset-type-name\"\n                        value={newAssetType.name}\n                        onChange={(e) => setNewAssetType({ ...newAssetType, name: e.target.value })}\n                        placeholder=\"e.g., Laptop, Desktop\"\n                        className=\"glass-input\"\n                        data-testid=\"input-asset-type-name\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"asset-type-description\" className=\"text-white/80\">Description</Label>\n                      <Input\n                        id=\"asset-type-description\"\n                        value={newAssetType.description}\n                        onChange={(e) => setNewAssetType({ ...newAssetType, description: e.target.value })}\n                        placeholder=\"Brief description of this asset type\"\n                        className=\"glass-input\"\n                        data-testid=\"input-asset-type-description\"\n                      />\n                    </div>\n                  </div>\n\n                  <Button \n                    onClick={handleCreateAssetType}\n                    disabled={createAssetTypeMutation.isPending}\n                    className=\"bg-gradient-to-r from-purple-500 to-blue-500\"\n                    data-testid=\"button-create-asset-type\"\n                  >\n                    {createAssetTypeMutation.isPending ? \"Creating...\" : \"Add Asset Type\"}\n                  </Button>\n                </div>\n\n                {/* Existing Asset Types */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-white/90\">Existing Asset Types</h3>\n                  \n                  {loadingAssetTypes ? (\n                    <div className=\"text-white/60\">Loading asset types...</div>\n                  ) : assetTypes && assetTypes.length > 0 ? (\n                    <div className=\"grid gap-3 md:grid-cols-2 lg:grid-cols-3\">\n                      {assetTypes.map((type) => (\n                        <div\n                          key={type.id}\n                          className=\"p-4 rounded-lg bg-white/5 border border-white/10\"\n                          data-testid={`asset-type-${type.id}`}\n                        >\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h4 className=\"font-medium text-white/90\">{type.name}</h4>\n                            <Badge variant={type.isActive ? 'default' : 'secondary'}>\n                              {type.isActive ? 'Active' : 'Inactive'}\n                            </Badge>\n                          </div>\n                          {type.description && (\n                            <p className=\"text-sm text-white/60\">{type.description}</p>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-white/60\">No asset types found.</div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Locations - Link to Locations Page */}\n          <TabsContent value=\"locations\" className=\"space-y-6\">\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white/90\">\n                  <MapPin className=\"h-5 w-5 text-purple-400\" />\n                  Location Management\n                </CardTitle>\n                <CardDescription className=\"text-white/60\">\n                  Manage all 32 BODYCRAFT retail outlets\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"p-8 text-center bg-white/5 border border-white/10 rounded-lg\">\n                  <MapPin className=\"h-16 w-16 text-purple-400 mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold text-white/90 mb-2\">\n                    Location Configuration\n                  </h3>\n                  <p className=\"text-white/60 mb-6\">\n                    Full location management is available on the dedicated Locations page with advanced features.\n                  </p>\n                  <Link href=\"/locations\">\n                    <Button className=\"bg-gradient-to-r from-purple-500 to-blue-500\" data-testid=\"button-goto-locations\">\n                      <LinkIcon className=\"h-4 w-4 mr-2\" />\n                      Go to Locations Page\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Security Settings */}\n          <TabsContent value=\"security\" className=\"space-y-6\">\n            {/* Password Reset Card */}\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white/90\">\n                  <Key className=\"h-5 w-5 text-purple-400\" />\n                  Change Password\n                </CardTitle>\n                <CardDescription className=\"text-white/60\">\n                  Update your account password for enhanced security\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid gap-4 md:grid-cols-1 max-w-xl\">\n                  {/* Current Password */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"current-password\" className=\"text-white/80\">\n                      Current Password\n                    </Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"current-password\"\n                        type={showCurrentPassword ? \"text\" : \"password\"}\n                        value={passwordData.currentPassword}\n                        onChange={(e) => setPasswordData({ ...passwordData, currentPassword: e.target.value })}\n                        className=\"glass-input pr-10\"\n                        placeholder=\"Enter current password\"\n                        data-testid=\"input-current-password\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                        className=\"absolute right-3 top-1/2 -translate-y-1/2 text-white/60 hover:text-white/90\"\n                        data-testid=\"button-toggle-current-password\"\n                      >\n                        {showCurrentPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </button>\n                    </div>\n                  </div>\n\n                  {/* New Password */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"new-password\" className=\"text-white/80\">\n                      New Password\n                    </Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"new-password\"\n                        type={showNewPassword ? \"text\" : \"password\"}\n                        value={passwordData.newPassword}\n                        onChange={(e) => setPasswordData({ ...passwordData, newPassword: e.target.value })}\n                        className=\"glass-input pr-10\"\n                        placeholder=\"Enter new password (min. 8 characters)\"\n                        data-testid=\"input-new-password\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowNewPassword(!showNewPassword)}\n                        className=\"absolute right-3 top-1/2 -translate-y-1/2 text-white/60 hover:text-white/90\"\n                        data-testid=\"button-toggle-new-password\"\n                      >\n                        {showNewPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </button>\n                    </div>\n                  </div>\n\n                  {/* Confirm Password */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"confirm-password\" className=\"text-white/80\">\n                      Confirm New Password\n                    </Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"confirm-password\"\n                        type={showConfirmPassword ? \"text\" : \"password\"}\n                        value={passwordData.confirmPassword}\n                        onChange={(e) => setPasswordData({ ...passwordData, confirmPassword: e.target.value })}\n                        className=\"glass-input pr-10\"\n                        placeholder=\"Re-enter new password\"\n                        data-testid=\"input-confirm-password\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        className=\"absolute right-3 top-1/2 -translate-y-1/2 text-white/60 hover:text-white/90\"\n                        data-testid=\"button-toggle-confirm-password\"\n                      >\n                        {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </button>\n                    </div>\n                  </div>\n\n                  {/* Submit Button */}\n                  <Button\n                    onClick={handlePasswordReset}\n                    disabled={passwordResetMutation.isPending}\n                    className=\"bg-gradient-to-r from-purple-500 to-blue-500 w-full md:w-auto\"\n                    data-testid=\"button-reset-password\"\n                  >\n                    <Lock className=\"h-4 w-4 mr-2\" />\n                    {passwordResetMutation.isPending ? \"Updating...\" : \"Update Password\"}\n                  </Button>\n                </div>\n\n                <div className=\"mt-4 p-4 rounded-lg bg-blue-500/10 border border-blue-500/20\">\n                  <p className=\"text-sm text-blue-300/90\">\n                    <strong>Password Requirements:</strong>\n                  </p>\n                  <ul className=\"text-sm text-blue-300/70 mt-2 space-y-1 list-disc list-inside\">\n                    <li>Minimum 8 characters long</li>\n                    <li>Must be different from your current password</li>\n                    <li>Both new password fields must match</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Security Information Card */}\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white/90\">\n                  <Shield className=\"h-5 w-5 text-purple-400\" />\n                  Security & Privacy\n                </CardTitle>\n                <CardDescription className=\"text-white/60\">\n                  Configure security policies and system protection\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between p-4 rounded-lg bg-white/5 border border-white/10\">\n                    <div>\n                      <h4 className=\"font-medium text-white/90\">Role-Based Access Control (RBAC)</h4>\n                      <p className=\"text-sm text-white/60 mt-1\">Location-based data isolation is active</p>\n                    </div>\n                    <Badge variant=\"default\" className=\"bg-green-500\">\n                      <Check className=\"h-3 w-3 mr-1\" />\n                      Enabled\n                    </Badge>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 rounded-lg bg-white/5 border border-white/10\">\n                    <div>\n                      <h4 className=\"font-medium text-white/90\">Session Timeout</h4>\n                      <p className=\"text-sm text-white/60 mt-1\">Auto logout after 480 minutes of inactivity</p>\n                    </div>\n                    <Badge variant=\"outline\">8 hours</Badge>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 rounded-lg bg-white/5 border border-white/10\">\n                    <div>\n                      <h4 className=\"font-medium text-white/90\">Password Policy</h4>\n                      <p className=\"text-sm text-white/60 mt-1\">Minimum 8 characters with bcrypt hashing</p>\n                    </div>\n                    <Badge variant=\"default\" className=\"bg-green-500\">\n                      <Check className=\"h-3 w-3 mr-1\" />\n                      Active\n                    </Badge>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 rounded-lg bg-white/5 border border-white/10\">\n                    <div>\n                      <h4 className=\"font-medium text-white/90\">Database Encryption</h4>\n                      <p className=\"text-sm text-white/60 mt-1\">PostgreSQL with encrypted connections</p>\n                    </div>\n                    <Badge variant=\"default\" className=\"bg-green-500\">\n                      <Check className=\"h-3 w-3 mr-1\" />\n                      Enabled\n                    </Badge>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 rounded-lg bg-white/5 border border-white/10\">\n                    <div>\n                      <h4 className=\"font-medium text-white/90\">Approval Workflows</h4>\n                      <p className=\"text-sm text-white/60 mt-1\">Multi-level approvals for asset transfers</p>\n                    </div>\n                    <Badge variant=\"default\" className=\"bg-green-500\">\n                      <Check className=\"h-3 w-3 mr-1\" />\n                      Active\n                    </Badge>\n                  </div>\n                </div>\n\n                <Separator className=\"bg-white/10\" />\n\n                <div className=\"text-sm text-white/60\">\n                  <p className=\"font-medium text-white/80 mb-2\">Security Features:</p>\n                  <ul className=\"list-disc list-inside space-y-1\">\n                    <li>Production-ready RBAC with location-based isolation</li>\n                    <li>Secure session management with PostgreSQL</li>\n                    <li>Password hashing with bcrypt (10 rounds)</li>\n                    <li>Defense-in-depth security architecture</li>\n                    <li>Complete audit trails for all transactions</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Admin Password Reset Dialog */}\n      <Dialog open={adminResetDialog.open} onOpenChange={(open) => {\n        if (!open) {\n          setAdminResetDialog({ open: false, user: null });\n          setAdminResetPassword(\"\");\n          setAdminResetConfirmPassword(\"\");\n          setShowAdminResetPassword(false);\n          setShowAdminResetConfirmPassword(false);\n        }\n      }}>\n        <DialogContent className=\"sm:max-w-[500px] bg-gradient-to-br from-purple-900/40 via-blue-900/40 to-purple-900/40 backdrop-blur-xl border border-white/10\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white/90 flex items-center gap-2\">\n              <Key className=\"h-5 w-5 text-purple-400\" />\n              Reset Password for {adminResetDialog.user?.username}\n            </DialogTitle>\n            <DialogDescription className=\"text-white/60\">\n              Set a new password for this user. The user will be able to use this password immediately.\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"admin-reset-password\" className=\"text-white/80\">\n                New Password\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"admin-reset-password\"\n                  type={showAdminResetPassword ? \"text\" : \"password\"}\n                  value={adminResetPassword}\n                  onChange={(e) => setAdminResetPassword(e.target.value)}\n                  placeholder=\"Enter new password (min. 8 characters)\"\n                  className=\"glass-input pr-10\"\n                  data-testid=\"input-admin-reset-password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowAdminResetPassword(!showAdminResetPassword)}\n                  className=\"absolute right-3 top-1/2 -translate-y-1/2 text-white/60 hover:text-white/90 transition-colors w-4 h-4 flex items-center justify-center\"\n                  data-testid=\"button-toggle-admin-reset-password\"\n                >\n                  {showAdminResetPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"admin-reset-confirm-password\" className=\"text-white/80\">\n                Confirm Password\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"admin-reset-confirm-password\"\n                  type={showAdminResetConfirmPassword ? \"text\" : \"password\"}\n                  value={adminResetConfirmPassword}\n                  onChange={(e) => setAdminResetConfirmPassword(e.target.value)}\n                  placeholder=\"Re-enter the new password\"\n                  className=\"glass-input pr-10\"\n                  data-testid=\"input-admin-reset-confirm-password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowAdminResetConfirmPassword(!showAdminResetConfirmPassword)}\n                  className=\"absolute right-3 top-1/2 -translate-y-1/2 text-white/60 hover:text-white/90 transition-colors w-4 h-4 flex items-center justify-center\"\n                  data-testid=\"button-toggle-admin-reset-confirm-password\"\n                >\n                  {showAdminResetConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"p-3 rounded-lg bg-blue-500/10 border border-blue-500/20\">\n              <p className=\"text-sm text-blue-300/90\">\n                <strong>Note:</strong> The password must be at least 8 characters long.\n              </p>\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setAdminResetDialog({ open: false, user: null });\n                setAdminResetPassword(\"\");\n                setAdminResetConfirmPassword(\"\");\n                setShowAdminResetPassword(false);\n                setShowAdminResetConfirmPassword(false);\n              }}\n              data-testid=\"button-cancel-admin-reset\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleAdminPasswordReset}\n              disabled={adminPasswordResetMutation.isPending}\n              className=\"bg-gradient-to-r from-purple-500 to-blue-500\"\n              data-testid=\"button-confirm-admin-reset\"\n            >\n              <Lock className=\"h-4 w-4 mr-2\" />\n              {adminPasswordResetMutation.isPending ? \"Resetting...\" : \"Reset Password\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":51022},"AutoDesignPro/client/src/components/app-sidebar.tsx":{"content":"import { Building2, Users, Laptop, MapPin, BarChart3, Cable, Fingerprint, Calendar, Settings, Wrench, Shield } from \"lucide-react\"\nimport { Link, useLocation } from \"wouter\"\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\"\n\n// Main navigation items for BODYCRAFT MDM System\nconst navigationItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: BarChart3,\n  },\n  {\n    title: \"Assets\",\n    url: \"/assets\",\n    icon: Laptop,\n  },\n  {\n    title: \"Employees\",\n    url: \"/employees\", \n    icon: Users,\n  },\n  {\n    title: \"Assignments\",\n    url: \"/assignments\",\n    icon: Calendar,\n  },\n  {\n    title: \"Locations\",\n    url: \"/locations\",\n    icon: MapPin,\n  },\n  {\n    title: \"Maintenance\",\n    url: \"/maintenance\",\n    icon: Wrench,\n  },\n  {\n    title: \"Backup & Compliance\",\n    url: \"/compliance\",\n    icon: Shield,\n  },\n]\n\n// Integration management items\nconst integrationItems = [\n  {\n    title: \"CCTV Systems\",\n    url: \"/cctv\",\n    icon: Cable,\n  },\n  {\n    title: \"Biometric Systems\", \n    url: \"/biometric\",\n    icon: Fingerprint,\n  },\n]\n\n// Reports and settings\nconst systemItems = [\n  {\n    title: \"Reports\",\n    url: \"/reports\",\n    icon: BarChart3,\n  },\n  {\n    title: \"Settings\",\n    url: \"/settings\",\n    icon: Settings,\n  },\n]\n\nexport function AppSidebar() {\n  const [location] = useLocation()\n\n  return (\n    <Sidebar data-testid=\"sidebar-main\">\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-lg font-semibold flex items-center gap-2\">\n            <Building2 className=\"h-5 w-5\" />\n            BODYCRAFT MDM\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {navigationItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild data={location === item.url ? { active: \"true\" } : {}}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Integrations</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {integrationItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild data={location === item.url ? { active: \"true\" } : {}}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>System</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {systemItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild data={location === item.url ? { active: \"true\" } : {}}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  )\n}","size_bytes":3973},"AutoDesignPro/client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}","size_bytes":1577},"AutoDesignPro/client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\"\nimport { useTheme } from \"./theme-provider\"\nimport { Button } from \"@/components/ui/button\"\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme()\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  )\n}","size_bytes":688},"AutoDesignPro/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"AutoDesignPro/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"AutoDesignPro/client/src/lib/excel.ts":{"content":"import * as XLSX from 'xlsx'\nimport { saveAs } from 'file-saver'\n\n// Excel export utility functions\nexport class ExcelExporter {\n  // Export any data array to Excel file\n  static exportToExcel(data: any[], filename: string, worksheetName: string = 'Sheet1') {\n    const worksheet = XLSX.utils.json_to_sheet(data)\n    const workbook = XLSX.utils.book_new()\n    XLSX.utils.book_append_sheet(workbook, worksheet, worksheetName)\n    \n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' })\n    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' })\n    \n    saveAs(blob, `${filename}_${new Date().toISOString().split('T')[0]}.xlsx`)\n  }\n\n  // Export assets data with proper formatting\n  static exportAssets(assets: any[], locations: any[]) {\n    const formattedData = assets.map(asset => {\n      const location = locations.find(l => l.id === asset.locationId)\n      return {\n        'Asset ID': asset.assetId,\n        'Brand': asset.brand,\n        'Model': asset.modelName,\n        'Type': asset.assetType,\n        'Serial Number': asset.serialNumber || 'N/A',\n        'Purchase Date': asset.purchaseDate ? new Date(asset.purchaseDate).toLocaleDateString() : 'N/A',\n        'Purchase Cost': asset.purchaseCost || 'N/A',\n        'Warranty Until': asset.warrantyUntil ? new Date(asset.warrantyUntil).toLocaleDateString() : 'N/A',\n        'Status': asset.status,\n        'Location': location ? `${location.outletName}, ${location.city}` : 'No Location',\n        'Condition': asset.condition || 'N/A',\n        'Created': new Date(asset.createdAt).toLocaleDateString(),\n        'Updated': new Date(asset.updatedAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Assets', 'Assets')\n  }\n\n  // Export employees data with proper formatting\n  static exportEmployees(employees: any[], locations: any[], assignments: any[], assets: any[]) {\n    const formattedData = employees.map(employee => {\n      const location = locations.find(l => l.id === employee.locationId)\n      const activeAssignment = assignments.find(a => a.employeeId === employee.id && !a.returnedDate)\n      const assignedAsset = activeAssignment ? assets.find(a => a.assetId === activeAssignment.assetId) : null\n      \n      return {\n        'Employee Code': employee.employeeCode,\n        'First Name': employee.firstName,\n        'Last Name': employee.lastName,\n        'Department': employee.department,\n        'Position': employee.position || 'N/A',\n        'Email': employee.email || 'N/A',\n        'Phone': employee.phone || 'N/A',\n        'Join Date': employee.joinDate ? new Date(employee.joinDate).toLocaleDateString() : 'N/A',\n        'Status': employee.status,\n        'Location': location ? `${location.outletName}, ${location.city}` : 'No Location',\n        'Assigned Asset': assignedAsset ? `${assignedAsset.assetId} - ${assignedAsset.brand} ${assignedAsset.modelName}` : 'No Asset',\n        'Created': new Date(employee.createdAt).toLocaleDateString(),\n        'Updated': new Date(employee.updatedAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Employees', 'Employees')\n  }\n\n  // Export assignments data with proper formatting\n  static exportAssignments(assignments: any[], employees: any[], assets: any[], locations: any[]) {\n    const formattedData = assignments.map(assignment => {\n      const employee = employees.find(e => e.id === assignment.employeeId)\n      const asset = assets.find(a => a.assetId === assignment.assetId)\n      const location = locations.find(l => l.id === asset?.locationId)\n      \n      return {\n        'Asset ID': assignment.assetId,\n        'Asset Details': asset ? `${asset.brand} ${asset.modelName}` : 'Unknown Asset',\n        'Employee Code': employee?.employeeCode || 'Unknown',\n        'Employee Name': employee ? `${employee.firstName} ${employee.lastName}` : 'Unknown Employee',\n        'Department': employee?.department || 'N/A',\n        'Location': location ? `${location.outletName}, ${location.city}` : 'No Location',\n        'Assigned Date': new Date(assignment.assignedDate).toLocaleDateString(),\n        'Returned Date': assignment.returnedDate ? new Date(assignment.returnedDate).toLocaleDateString() : 'Still Assigned',\n        'Assignment Condition': assignment.assignmentCondition || 'N/A',\n        'Return Condition': assignment.returnCondition || 'N/A',\n        'Assignment Reason': assignment.assignmentReason || 'N/A',\n        'Return Reason': assignment.returnReason || 'N/A',\n        'Backup Details': assignment.backupDetails || 'N/A',\n        'Status': assignment.returnedDate ? 'Returned' : 'Active',\n        'Created': new Date(assignment.createdAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Assignments', 'Assignments')\n  }\n\n  // Export locations data with analytics\n  static exportLocations(locations: any[], assets: any[], employees: any[], assignments: any[]) {\n    const formattedData = locations.map(location => {\n      const locationAssets = assets.filter(a => a.locationId === location.id)\n      const locationEmployees = employees.filter(e => e.locationId === location.id)\n      const activeAssignments = assignments.filter(a => {\n        const employee = employees.find(e => e.id === a.employeeId)\n        return employee?.locationId === location.id && !a.returnedDate\n      })\n      \n      return {\n        'Outlet Name': location.outletName,\n        'City': location.city,\n        'State': location.state,\n        'Address': location.address,\n        'Manager Name': location.managerName,\n        'Contact Details': location.contactDetails,\n        'Total Assets': locationAssets.length,\n        'Available Assets': locationAssets.filter(a => a.status === 'available').length,\n        'Assigned Assets': locationAssets.filter(a => a.status === 'assigned').length,\n        'Maintenance Assets': locationAssets.filter(a => a.status === 'maintenance').length,\n        'Total Employees': locationEmployees.length,\n        'Active Employees': locationEmployees.filter(e => e.status === 'active').length,\n        'Active Assignments': activeAssignments.length,\n        'Created': new Date(location.createdAt).toLocaleDateString(),\n        'Updated': new Date(location.updatedAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Locations', 'Locations')\n  }\n\n  // Export maintenance data with cost analysis\n  static exportMaintenance(maintenance: any[], assets: any[], locations: any[]) {\n    const formattedData = maintenance.map(record => {\n      const asset = assets.find(a => a.assetId === record.assetId)\n      const location = locations.find(l => l.id === asset?.locationId)\n      \n      return {\n        'Asset ID': record.assetId,\n        'Asset Details': asset ? `${asset.brand} ${asset.modelName}` : 'Unknown Asset',\n        'Location': location ? `${location.outletName}, ${location.city}` : 'No Location',\n        'Maintenance Type': record.maintenanceType.charAt(0).toUpperCase() + record.maintenanceType.slice(1),\n        'Description': record.description,\n        'Scheduled Date': new Date(record.scheduledDate).toLocaleDateString(),\n        'Completed Date': record.completedDate ? new Date(record.completedDate).toLocaleDateString() : 'Not Completed',\n        'Status': record.completedDate ? 'Completed' : 'Pending',\n        'Cost': record.cost ? `₹${record.cost.toFixed(2)}` : 'Not Specified',\n        'Technician': record.technicianName || 'Not Assigned',\n        'Parts Replaced': record.partsReplaced || 'None',\n        'Created': new Date(record.createdAt).toLocaleDateString(),\n        'Updated': new Date(record.updatedAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Maintenance', 'Maintenance')\n  }\n\n  // Export compliance data with audit trail\n  static exportCompliance(compliance: any[], assets: any[], locations: any[]) {\n    const formattedData = compliance.map(record => {\n      const asset = record.assetId ? assets.find(a => a.assetId === record.assetId) : null\n      const location = locations.find(l => l.id === record.locationId)\n      \n      return {\n        'Task Type': record.type.replace('_', ' ').charAt(0).toUpperCase() + record.type.replace('_', ' ').slice(1),\n        'Category': record.category.replace('_', ' ').charAt(0).toUpperCase() + record.category.replace('_', ' ').slice(1),\n        'Title': record.title,\n        'Description': record.description,\n        'Related Asset': asset ? `${asset.assetId} - ${asset.brand} ${asset.modelName}` : 'N/A',\n        'Location': location ? `${location.outletName}, ${location.city}` : 'All Locations',\n        'Due Date': new Date(record.dueDate).toLocaleDateString(),\n        'Completed Date': record.completedDate ? new Date(record.completedDate).toLocaleDateString() : 'Not Completed',\n        'Status': record.status.charAt(0).toUpperCase() + record.status.slice(1),\n        'Assigned To': record.assignedTo,\n        'Evidence': record.evidenceUrl ? 'Available' : 'Not Provided',\n        'Evidence URL': record.evidenceUrl || 'N/A',\n        'Compliance Notes': record.complianceNotes || 'None',\n        'Created': new Date(record.createdAt).toLocaleDateString(),\n        'Updated': new Date(record.updatedAt).toLocaleDateString()\n      }\n    })\n    \n    this.exportToExcel(formattedData, 'BODYCRAFT_Compliance', 'Compliance')\n  }\n}\n\n// Excel import utility functions\nexport class ExcelImporter {\n  // Parse uploaded Excel file\n  static async parseExcelFile(file: File): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader()\n      \n      reader.onload = (e) => {\n        try {\n          const data = e.target?.result\n          const workbook = XLSX.read(data, { type: 'binary' })\n          const sheetName = workbook.SheetNames[0]\n          const worksheet = workbook.Sheets[sheetName]\n          const jsonData = XLSX.utils.sheet_to_json(worksheet)\n          \n          resolve(jsonData)\n        } catch (error) {\n          reject(error)\n        }\n      }\n      \n      reader.onerror = () => reject(new Error('Failed to read file'))\n      reader.readAsBinaryString(file)\n    })\n  }\n\n  // Validate and transform asset data\n  static validateAssetData(data: any[]): { valid: any[], errors: string[] } {\n    const valid: any[] = []\n    const errors: string[] = []\n\n    data.forEach((row, index) => {\n      const rowNumber = index + 2 // +2 because Excel rows start at 1 and we skip header\n\n      // Required fields validation\n      if (!row['Asset ID']) {\n        errors.push(`Row ${rowNumber}: Asset ID is required`)\n        return\n      }\n      if (!row['Brand']) {\n        errors.push(`Row ${rowNumber}: Brand is required`)\n        return\n      }\n      if (!row['Model']) {\n        errors.push(`Row ${rowNumber}: Model is required`)\n        return\n      }\n      if (!row['Type']) {\n        errors.push(`Row ${rowNumber}: Type is required`)\n        return\n      }\n\n      // Transform to API format\n      const transformedRow = {\n        assetId: row['Asset ID'],\n        brand: row['Brand'],\n        modelName: row['Model'],\n        assetType: row['Type'],\n        serialNumber: row['Serial Number'] || null,\n        purchaseDate: row['Purchase Date'] ? new Date(row['Purchase Date']).toISOString() : null,\n        purchaseCost: row['Purchase Cost'] ? parseFloat(row['Purchase Cost']) : null,\n        warrantyUntil: row['Warranty Until'] ? new Date(row['Warranty Until']).toISOString() : null,\n        status: row['Status'] || 'available',\n        condition: row['Condition'] || 'good',\n      }\n\n      valid.push(transformedRow)\n    })\n\n    return { valid, errors }\n  }\n\n  // Validate and transform employee data\n  static validateEmployeeData(data: any[]): { valid: any[], errors: string[] } {\n    const valid: any[] = []\n    const errors: string[] = []\n\n    data.forEach((row, index) => {\n      const rowNumber = index + 2\n\n      // Required fields validation\n      if (!row['Employee Code']) {\n        errors.push(`Row ${rowNumber}: Employee Code is required`)\n        return\n      }\n      if (!row['First Name']) {\n        errors.push(`Row ${rowNumber}: First Name is required`)\n        return\n      }\n      if (!row['Last Name']) {\n        errors.push(`Row ${rowNumber}: Last Name is required`)\n        return\n      }\n      if (!row['Department']) {\n        errors.push(`Row ${rowNumber}: Department is required`)\n        return\n      }\n\n      // Transform to API format\n      const transformedRow = {\n        employeeCode: row['Employee Code'],\n        firstName: row['First Name'],\n        lastName: row['Last Name'],\n        department: row['Department'],\n        position: row['Position'] || null,\n        email: row['Email'] || null,\n        phone: row['Phone'] || null,\n        joinDate: row['Join Date'] ? new Date(row['Join Date']).toISOString() : null,\n        status: row['Status'] || 'active',\n      }\n\n      valid.push(transformedRow)\n    })\n\n    return { valid, errors }\n  }\n\n  // Download template files\n  static downloadAssetTemplate() {\n    const templateData = [\n      {\n        'Asset ID': 'BFC001',\n        'Brand': 'Lenovo',\n        'Model': 'ThinkPad E15',\n        'Type': 'laptop',\n        'Serial Number': 'SN123456789',\n        'Purchase Date': '2024-01-15',\n        'Purchase Cost': '45000',\n        'Warranty Until': '2027-01-15',\n        'Status': 'available',\n        'Condition': 'excellent'\n      }\n    ]\n    this.exportToExcel(templateData, 'Asset_Import_Template', 'Assets')\n  }\n\n  static downloadEmployeeTemplate() {\n    const templateData = [\n      {\n        'Employee Code': 'BFC2024001',\n        'First Name': 'John',\n        'Last Name': 'Doe', \n        'Department': 'IT',\n        'Position': 'System Administrator',\n        'Email': 'john.doe@bodycraft.com',\n        'Phone': '+91 9876543210',\n        'Join Date': '2024-01-15',\n        'Status': 'active'\n      }\n    ]\n    this.exportToExcel(templateData, 'Employee_Import_Template', 'Employees')\n  }\n\n  private static exportToExcel(data: any[], filename: string, worksheetName: string) {\n    const worksheet = XLSX.utils.json_to_sheet(data)\n    const workbook = XLSX.utils.book_new()\n    XLSX.utils.book_append_sheet(workbook, worksheet, worksheetName)\n    \n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' })\n    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' })\n    \n    saveAs(blob, `${filename}.xlsx`)\n  }\n}","size_bytes":14589},"AutoDesignPro/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"AutoDesignPro/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"AutoDesignPro/client/src/pages/assets.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Laptop, \n  Monitor, \n  Smartphone, \n  Plus, \n  Search, \n  Filter, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Package,\n  MapPin,\n  User,\n  Calendar,\n  AlertCircle,\n  CheckCircle,\n  Clock,\n  XCircle,\n  Computer\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { ExcelExporter, ExcelImporter } from \"@/lib/excel\"\n\n// Asset type icons mapping\nconst assetTypeIcons: Record<string, any> = {\n  Laptop: Laptop,\n  Desktop: Computer,\n  Monitor: Monitor,\n  Mobile: Smartphone,\n  Tablet: Smartphone,\n  Router: Package,\n  Switch: Package,\n  Printer: Package,\n  UPS: Package,\n  default: Package\n}\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  available: \"bg-green-500\",\n  assigned: \"bg-blue-500\", \n  maintenance: \"bg-yellow-500\",\n  retired: \"bg-red-500\"\n}\n\n// Condition color mapping\nconst conditionColors: Record<string, string> = {\n  excellent: \"bg-green-500\",\n  good: \"bg-blue-500\",\n  fair: \"bg-yellow-500\", \n  poor: \"bg-red-500\"\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  serviceTag: string | null\n  assetType: string\n  purchaseDate: string | null\n  warrantyExpiry: string | null\n  status: \"available\" | \"assigned\" | \"maintenance\" | \"retired\"\n  condition: \"excellent\" | \"good\" | \"fair\" | \"poor\"\n  locationId: number | null\n  currentUserId: number | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\ninterface Employee {\n  id: number\n  employeeCode: string\n  firstName: string\n  lastName: string\n  department: string\n}\n\nexport default function AssetsPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedAsset, setSelectedAsset] = useState<Asset | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [isImportDialogOpen, setIsImportDialogOpen] = useState(false)\n  const [importFile, setImportFile] = useState<File | null>(null)\n  const [importErrors, setImportErrors] = useState<string[]>([])\n  const [isImporting, setIsImporting] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Fetch data\n  const { data: assets, isLoading: assetsLoading } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  const { data: employees } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  })\n\n  // Get unique asset types for filter\n  const assetTypes = [...new Set(assets?.map(asset => asset.assetType) || [])]\n\n  // Filter assets\n  const filteredAssets = assets?.filter(asset => {\n    const matchesSearch = \n      asset.assetId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.modelName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (asset.serviceTag?.toLowerCase().includes(searchTerm.toLowerCase()) || false)\n    \n    const matchesStatus = statusFilter === \"all\" || asset.status === statusFilter\n    const matchesType = typeFilter === \"all\" || asset.assetType === typeFilter\n    const matchesLocation = locationFilter === \"all\" || asset.locationId?.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesType && matchesLocation\n  }) || []\n\n  // Create asset mutation\n  const createAssetMutation = useMutation({\n    mutationFn: async (assetData: any) => {\n      const response = await fetch('/api/assets', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(assetData),\n      })\n      if (!response.ok) throw new Error('Failed to create asset')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset created successfully\" })\n      setIsCreateDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Update asset mutation  \n  const updateAssetMutation = useMutation({\n    mutationFn: async ({ assetId, data }: { assetId: string, data: any }) => {\n      const response = await fetch(`/api/assets/${assetId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      })\n      if (!response.ok) throw new Error('Failed to update asset')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset updated successfully\" })\n      setIsEditDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Delete asset mutation\n  const deleteAssetMutation = useMutation({\n    mutationFn: async (assetId: string) => {\n      const response = await fetch(`/api/assets/${assetId}`, {\n        method: 'DELETE',\n      })\n      if (!response.ok) throw new Error('Failed to delete asset')\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset deleted successfully\" })\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Helper functions\n  const getLocationName = (locationId: number | null) => {\n    if (!locationId) return \"No location\"\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown location\"\n  }\n\n  const getEmployeeName = (employeeId: number | null) => {\n    if (!employeeId) return \"Unassigned\"\n    const employee = employees?.find(emp => emp.id === employeeId)\n    return employee ? `${employee.firstName} ${employee.lastName}` : \"Unknown employee\"\n  }\n\n  const getAssetIcon = (assetType: string) => {\n    const IconComponent = assetTypeIcons[assetType] || assetTypeIcons.default\n    return <IconComponent className=\"h-4 w-4\" />\n  }\n\n  const handleCreateAsset = (event: React.FormEvent) => {\n    event.preventDefault()\n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const assetData = {\n      assetId: formData.get('assetId'),\n      modelName: formData.get('modelName'),\n      brand: formData.get('brand'),\n      serviceTag: formData.get('serviceTag') || null,\n      assetType: formData.get('assetType'),\n      purchaseDate: formData.get('purchaseDate') || null,\n      warrantyExpiry: formData.get('warrantyExpiry') || null,\n      status: formData.get('status'),\n      condition: formData.get('condition'),\n      locationId: formData.get('locationId') ? parseInt(formData.get('locationId') as string) : null,\n    }\n\n    createAssetMutation.mutate(assetData)\n  }\n\n  const handleUpdateAsset = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedAsset) return\n    \n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const assetData = {\n      modelName: formData.get('modelName'),\n      brand: formData.get('brand'),\n      serviceTag: formData.get('serviceTag') || null,\n      assetType: formData.get('assetType'),\n      purchaseDate: formData.get('purchaseDate') || null,\n      warrantyExpiry: formData.get('warrantyExpiry') || null,\n      status: formData.get('status'),\n      condition: formData.get('condition'),\n      locationId: formData.get('locationId') ? parseInt(formData.get('locationId') as string) : null,\n    }\n\n    updateAssetMutation.mutate({ assetId: selectedAsset.assetId, data: assetData })\n  }\n\n  // Excel Export Handler\n  const handleExportAssets = () => {\n    if (!filteredAssets || !locations) {\n      toast({ title: \"Error\", description: \"No data available to export\", variant: \"destructive\" })\n      return\n    }\n    \n    ExcelExporter.exportAssets(filteredAssets, locations)\n    toast({ title: \"Success\", description: `Exported ${filteredAssets.length} assets to Excel` })\n  }\n\n  // Excel Import Handler\n  const handleImportAssets = async () => {\n    if (!importFile) {\n      toast({ title: \"Error\", description: \"Please select a file to import\", variant: \"destructive\" })\n      return\n    }\n\n    setIsImporting(true)\n    setImportErrors([])\n\n    try {\n      // Parse Excel file\n      const data = await ExcelImporter.parseExcelFile(importFile)\n      \n      if (data.length === 0) {\n        toast({ title: \"Error\", description: \"The Excel file is empty\", variant: \"destructive\" })\n        setIsImporting(false)\n        return\n      }\n\n      // Validate data\n      const { valid, errors } = ExcelImporter.validateAssetData(data)\n      \n      if (errors.length > 0) {\n        setImportErrors(errors)\n        setIsImporting(false)\n        return\n      }\n\n      // Import valid assets\n      let successCount = 0\n      let errorCount = 0\n      \n      for (const assetData of valid) {\n        try {\n          const response = await fetch('/api/assets', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(assetData),\n          })\n          \n          if (response.ok) {\n            successCount++\n          } else {\n            errorCount++\n            const errorData = await response.json()\n            setImportErrors(prev => [...prev, `Asset ${assetData.assetId}: ${errorData.message || 'Import failed'}`])\n          }\n        } catch (error) {\n          errorCount++\n          setImportErrors(prev => [...prev, `Asset ${assetData.assetId}: Network error`])\n        }\n      }\n\n      // Refresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n\n      if (successCount > 0) {\n        toast({ \n          title: \"Import Complete\", \n          description: `Successfully imported ${successCount} assets${errorCount > 0 ? `, ${errorCount} failed` : ''}` \n        })\n        \n        if (errorCount === 0) {\n          setIsImportDialogOpen(false)\n          setImportFile(null)\n        }\n      } else {\n        toast({ title: \"Import Failed\", description: \"No assets were imported\", variant: \"destructive\" })\n      }\n\n    } catch (error) {\n      toast({ title: \"Error\", description: \"Failed to parse Excel file\", variant: \"destructive\" })\n      setImportErrors(['Failed to parse Excel file. Please ensure it\\'s a valid Excel file.'])\n    } finally {\n      setIsImporting(false)\n    }\n  }\n\n  if (assetsLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Assets</h1>\n          <p className=\"text-muted-foreground\">\n            Manage all BODYCRAFT IT assets across {locations?.length || 0} locations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={isImportDialogOpen} onOpenChange={setIsImportDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" className=\"gap-2\">\n                <Upload className=\"h-4 w-4\" />\n                Import Excel\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Import Assets from Excel</DialogTitle>\n                <DialogDescription>\n                  Upload an Excel file to import multiple assets. Download the template first if you need the correct format.\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"flex gap-2\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => ExcelImporter.downloadAssetTemplate()}\n                    className=\"gap-2\"\n                  >\n                    <Download className=\"h-4 w-4\" />\n                    Download Template\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"excel-file\">Excel File *</Label>\n                  <Input\n                    id=\"excel-file\"\n                    type=\"file\"\n                    accept=\".xlsx,.xls\"\n                    onChange={(e) => {\n                      const file = e.target.files?.[0]\n                      if (file) {\n                        setImportFile(file)\n                        setImportErrors([])\n                      }\n                    }}\n                  />\n                </div>\n                \n                {importErrors.length > 0 && (\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-red-600\">Import Errors:</Label>\n                    <div className=\"bg-red-50 p-3 rounded max-h-32 overflow-y-auto\">\n                      {importErrors.map((error, index) => (\n                        <div key={index} className=\"text-sm text-red-600\">• {error}</div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n              <DialogFooter>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsImportDialogOpen(false)\n                    setImportFile(null)\n                    setImportErrors([])\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleImportAssets}\n                  disabled={!importFile || isImporting}\n                >\n                  {isImporting ? \"Importing...\" : \"Import Assets\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n          <Button \n            variant=\"outline\" \n            className=\"gap-2\"\n            onClick={handleExportAssets}\n          >\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Asset\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Asset</DialogTitle>\n                <DialogDescription>\n                  Add a new IT asset to the BODYCRAFT inventory\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateAsset} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assetId\">Asset ID *</Label>\n                    <Input\n                      id=\"assetId\"\n                      name=\"assetId\"\n                      placeholder=\"BFC001\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assetType\">Asset Type *</Label>\n                    <Select name=\"assetType\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Laptop\">Laptop</SelectItem>\n                        <SelectItem value=\"Desktop\">Desktop</SelectItem>\n                        <SelectItem value=\"Monitor\">Monitor</SelectItem>\n                        <SelectItem value=\"Mobile\">Mobile</SelectItem>\n                        <SelectItem value=\"Tablet\">Tablet</SelectItem>\n                        <SelectItem value=\"Router\">Router</SelectItem>\n                        <SelectItem value=\"Switch\">Switch</SelectItem>\n                        <SelectItem value=\"Printer\">Printer</SelectItem>\n                        <SelectItem value=\"UPS\">UPS</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"brand\">Brand *</Label>\n                    <Input\n                      id=\"brand\"\n                      name=\"brand\"\n                      placeholder=\"Dell, HP, Lenovo...\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"modelName\">Model Name *</Label>\n                    <Input\n                      id=\"modelName\"\n                      name=\"modelName\"\n                      placeholder=\"ThinkPad E15, OptiPlex 3080...\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serviceTag\">Service Tag</Label>\n                    <Input\n                      id=\"serviceTag\"\n                      name=\"serviceTag\"\n                      placeholder=\"Manufacturer service tag\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"locationId\">Location</Label>\n                    <Select name=\"locationId\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select location\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {locations?.map(location => (\n                          <SelectItem key={location.id} value={location.id.toString()}>\n                            {location.outletName}, {location.city}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"purchaseDate\">Purchase Date</Label>\n                    <Input\n                      id=\"purchaseDate\"\n                      name=\"purchaseDate\"\n                      type=\"date\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"warrantyExpiry\">Warranty Expiry</Label>\n                    <Input\n                      id=\"warrantyExpiry\"\n                      name=\"warrantyExpiry\"\n                      type=\"date\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"status\">Status</Label>\n                    <Select name=\"status\" defaultValue=\"available\">\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"available\">Available</SelectItem>\n                        <SelectItem value=\"assigned\">Assigned</SelectItem>\n                        <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                        <SelectItem value=\"retired\">Retired</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"condition\">Condition</Label>\n                    <Select name=\"condition\" defaultValue=\"good\">\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"excellent\">Excellent</SelectItem>\n                        <SelectItem value=\"good\">Good</SelectItem>\n                        <SelectItem value=\"fair\">Fair</SelectItem>\n                        <SelectItem value=\"poor\">Poor</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createAssetMutation.isPending}>\n                    {createAssetMutation.isPending ? \"Creating...\" : \"Create Asset\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Assets</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{assets?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across {locations?.length || 0} locations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Available</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {assets?.filter(a => a.status === 'available').length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Ready for assignment\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Assigned</CardTitle>\n            <User className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {assets?.filter(a => a.status === 'assigned').length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently in use\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Maintenance</CardTitle>\n            <Clock className=\"h-4 w-4 text-yellow-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {assets?.filter(a => a.status === 'maintenance').length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Under service\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Assets</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by Asset ID, Model, Brand, or Service Tag...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"available\">Available</SelectItem>\n                  <SelectItem value=\"assigned\">Assigned</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"retired\">Retired</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  {assetTypes.map(type => (\n                    <SelectItem key={type} value={type}>{type}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredAssets.length} of {assets?.length || 0} assets\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Assets Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Asset</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Condition</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Assigned To</TableHead>\n                <TableHead>Service Tag</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredAssets.map((asset) => (\n                <TableRow key={asset.assetId}>\n                  <TableCell>\n                    <div className=\"flex items-center gap-3\">\n                      {getAssetIcon(asset.assetType)}\n                      <div>\n                        <div className=\"font-medium\">{asset.assetId}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {asset.brand} {asset.modelName}\n                        </div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\">{asset.assetType}</Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <div \n                        className={`w-2 h-2 rounded-full ${statusColors[asset.status]}`}\n                      />\n                      <span className=\"capitalize\">{asset.status}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <div \n                        className={`w-2 h-2 rounded-full ${conditionColors[asset.condition]}`}\n                      />\n                      <span className=\"capitalize\">{asset.condition}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-1\">\n                      <MapPin className=\"h-3 w-3 text-muted-foreground\" />\n                      {getLocationName(asset.locationId)}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-1\">\n                      <User className=\"h-3 w-3 text-muted-foreground\" />\n                      {getEmployeeName(asset.currentUserId)}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm font-mono\">\n                      {asset.serviceTag || \"—\"}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                        <DropdownMenuItem\n                          onClick={() => {\n                            setSelectedAsset(asset)\n                            setIsViewDialogOpen(true)\n                          }}\n                        >\n                          <Eye className=\"mr-2 h-4 w-4\" />\n                          View Details\n                        </DropdownMenuItem>\n                        <DropdownMenuItem\n                          onClick={() => {\n                            setSelectedAsset(asset)\n                            setIsEditDialogOpen(true)\n                          }}\n                        >\n                          <Edit className=\"mr-2 h-4 w-4\" />\n                          Edit Asset\n                        </DropdownMenuItem>\n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem\n                          onClick={() => deleteAssetMutation.mutate(asset.assetId)}\n                          className=\"text-red-600\"\n                        >\n                          <Trash2 className=\"mr-2 h-4 w-4\" />\n                          Delete Asset\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Asset Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Asset Details</DialogTitle>\n            <DialogDescription>\n              Complete information for {selectedAsset?.assetId}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedAsset && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Asset ID</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAsset.assetId}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Type</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded flex items-center gap-2\">\n                    {getAssetIcon(selectedAsset.assetType)}\n                    {selectedAsset.assetType}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Brand</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAsset.brand}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Model</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAsset.modelName}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded flex items-center gap-2\">\n                    <div className={`w-2 h-2 rounded-full ${statusColors[selectedAsset.status]}`} />\n                    <span className=\"capitalize\">{selectedAsset.status}</span>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Condition</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded flex items-center gap-2\">\n                    <div className={`w-2 h-2 rounded-full ${conditionColors[selectedAsset.condition]}`} />\n                    <span className=\"capitalize\">{selectedAsset.condition}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Location</Label>\n                <div className=\"text-sm p-2 bg-muted rounded\">\n                  {getLocationName(selectedAsset.locationId)}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Assigned To</Label>\n                <div className=\"text-sm p-2 bg-muted rounded\">\n                  {getEmployeeName(selectedAsset.currentUserId)}\n                </div>\n              </div>\n\n              {selectedAsset.serviceTag && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Service Tag</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded font-mono\">\n                    {selectedAsset.serviceTag}\n                  </div>\n                </div>\n              )}\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Purchase Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAsset.purchaseDate || \"Not specified\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Warranty Expiry</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAsset.warrantyExpiry || \"Not specified\"}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Asset Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Asset</DialogTitle>\n            <DialogDescription>\n              Update information for {selectedAsset?.assetId}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedAsset && (\n            <form onSubmit={handleUpdateAsset} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-assetType\">Asset Type *</Label>\n                  <Select name=\"assetType\" defaultValue={selectedAsset.assetType} required>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Laptop\">Laptop</SelectItem>\n                      <SelectItem value=\"Desktop\">Desktop</SelectItem>\n                      <SelectItem value=\"Monitor\">Monitor</SelectItem>\n                      <SelectItem value=\"Mobile\">Mobile</SelectItem>\n                      <SelectItem value=\"Tablet\">Tablet</SelectItem>\n                      <SelectItem value=\"Router\">Router</SelectItem>\n                      <SelectItem value=\"Switch\">Switch</SelectItem>\n                      <SelectItem value=\"Printer\">Printer</SelectItem>\n                      <SelectItem value=\"UPS\">UPS</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-brand\">Brand *</Label>\n                  <Input\n                    id=\"edit-brand\"\n                    name=\"brand\"\n                    defaultValue={selectedAsset.brand}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-modelName\">Model Name *</Label>\n                  <Input\n                    id=\"edit-modelName\"\n                    name=\"modelName\"\n                    defaultValue={selectedAsset.modelName}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-serviceTag\">Service Tag</Label>\n                  <Input\n                    id=\"edit-serviceTag\"\n                    name=\"serviceTag\"\n                    defaultValue={selectedAsset.serviceTag || \"\"}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-locationId\">Location</Label>\n                  <Select name=\"locationId\" defaultValue={selectedAsset.locationId?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select location\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {locations?.map(location => (\n                        <SelectItem key={location.id} value={location.id.toString()}>\n                          {location.outletName}, {location.city}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-purchaseDate\">Purchase Date</Label>\n                  <Input\n                    id=\"edit-purchaseDate\"\n                    name=\"purchaseDate\"\n                    type=\"date\"\n                    defaultValue={selectedAsset.purchaseDate || \"\"}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-warrantyExpiry\">Warranty Expiry</Label>\n                  <Input\n                    id=\"edit-warrantyExpiry\"\n                    name=\"warrantyExpiry\"\n                    type=\"date\"\n                    defaultValue={selectedAsset.warrantyExpiry || \"\"}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-status\">Status</Label>\n                  <Select name=\"status\" defaultValue={selectedAsset.status}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"available\">Available</SelectItem>\n                      <SelectItem value=\"assigned\">Assigned</SelectItem>\n                      <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                      <SelectItem value=\"retired\">Retired</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-condition\">Condition</Label>\n                <Select name=\"condition\" defaultValue={selectedAsset.condition}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"excellent\">Excellent</SelectItem>\n                    <SelectItem value=\"good\">Good</SelectItem>\n                    <SelectItem value=\"fair\">Fair</SelectItem>\n                    <SelectItem value=\"poor\">Poor</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <DialogFooter>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsEditDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateAssetMutation.isPending}>\n                  {updateAssetMutation.isPending ? \"Updating...\" : \"Update Asset\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":43472},"AutoDesignPro/client/src/pages/assignments.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Calendar,\n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  User,\n  Laptop,\n  ArrowRightLeft,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Undo,\n  Package,\n  MapPin,\n  AlertTriangle\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface Assignment {\n  assetId: string\n  employeeId: number\n  assignedDate: string\n  returnedDate: string | null\n  assignmentReason: string\n  returnReason: string | null\n  conditionOnAssignment: \"excellent\" | \"good\" | \"fair\" | \"poor\"\n  conditionOnReturn: \"excellent\" | \"good\" | \"fair\" | \"poor\" | null\n  backupDetails: string | null\n  createdBy: number\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  assetType: string\n  status: \"available\" | \"assigned\" | \"maintenance\" | \"retired\"\n  condition: \"excellent\" | \"good\" | \"fair\" | \"poor\"\n  locationId: number | null\n  currentUserId: number | null\n}\n\ninterface Employee {\n  id: number\n  employeeCode: string\n  firstName: string\n  lastName: string\n  department: string\n  designation: string\n  status: \"active\" | \"inactive\" | \"on_leave\"\n  locationId: number | null\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\nexport default function AssignmentsPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isAssignDialogOpen, setIsAssignDialogOpen] = useState(false)\n  const [isReturnDialogOpen, setIsReturnDialogOpen] = useState(false)\n  const [isTransferDialogOpen, setIsTransferDialogOpen] = useState(false)\n  const [selectedAssignment, setSelectedAssignment] = useState<Assignment | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Fetch data\n  const { data: assignments, isLoading: assignmentsLoading } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n  })\n\n  const { data: assets } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: employees } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  })\n\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Filter assignments\n  const filteredAssignments = assignments?.filter(assignment => {\n    const asset = assets?.find(a => a.assetId === assignment.assetId)\n    const employee = employees?.find(e => e.id === assignment.employeeId)\n    \n    const matchesSearch = \n      assignment.assetId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee?.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee?.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee?.employeeCode.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset?.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset?.modelName.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const isActive = !assignment.returnedDate\n    const isReturned = assignment.returnedDate !== null\n    \n    const matchesStatus = \n      statusFilter === \"all\" || \n      (statusFilter === \"active\" && isActive) ||\n      (statusFilter === \"returned\" && isReturned)\n      \n    const matchesLocation = locationFilter === \"all\" || employee?.locationId?.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesLocation\n  }) || []\n\n  // Available assets for assignment (not currently assigned)\n  const availableAssets = assets?.filter(asset => \n    asset.status === \"available\" && \n    !assignments?.some(assignment => \n      assignment.assetId === asset.assetId && !assignment.returnedDate\n    )\n  ) || []\n\n  // Active employees for assignment\n  const activeEmployees = employees?.filter(emp => emp.status === \"active\") || []\n\n  // Assign asset mutation\n  const assignAssetMutation = useMutation({\n    mutationFn: async (assignmentData: any) => {\n      const response = await fetch('/api/assignments', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(assignmentData),\n      })\n      if (!response.ok) throw new Error('Failed to assign asset')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assignments'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset assigned successfully\" })\n      setIsAssignDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to assign asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Return asset mutation\n  const returnAssetMutation = useMutation({\n    mutationFn: async (returnData: any) => {\n      const response = await fetch(`/api/assignments/${returnData.assetId}/${returnData.employeeId}/return`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(returnData),\n      })\n      if (!response.ok) throw new Error('Failed to return asset')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assignments'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset returned successfully\" })\n      setIsReturnDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to return asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Transfer asset mutation (return + new assignment in one operation)\n  const transferAssetMutation = useMutation({\n    mutationFn: async (transferData: any) => {\n      const response = await fetch(`/api/assignments/${transferData.assetId}/transfer`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(transferData),\n      })\n      if (!response.ok) throw new Error('Failed to transfer asset')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assignments'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Asset transferred successfully\" })\n      setIsTransferDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to transfer asset\", variant: \"destructive\" })\n    }\n  })\n\n  // Helper functions\n  const getAssetInfo = (assetId: string) => {\n    return assets?.find(asset => asset.assetId === assetId)\n  }\n\n  const getEmployeeInfo = (employeeId: number) => {\n    return employees?.find(employee => employee.id === employeeId)\n  }\n\n  const getLocationName = (locationId: number | null) => {\n    if (!locationId) return \"No location\"\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown\"\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const handleAssignAsset = (event: React.FormEvent) => {\n    event.preventDefault()\n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const assignmentData = {\n      assetId: formData.get('assetId'),\n      employeeId: parseInt(formData.get('employeeId') as string),\n      assignmentReason: formData.get('assignmentReason'),\n      conditionOnAssignment: formData.get('conditionOnAssignment'),\n      backupDetails: formData.get('backupDetails') || null,\n      createdBy: 1, // TODO: Get from authentication context\n    }\n\n    assignAssetMutation.mutate(assignmentData)\n  }\n\n  const handleReturnAsset = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedAssignment) return\n    \n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const returnData = {\n      assetId: selectedAssignment.assetId,\n      employeeId: selectedAssignment.employeeId,\n      returnReason: formData.get('returnReason'),\n      conditionOnReturn: formData.get('conditionOnReturn'),\n    }\n\n    returnAssetMutation.mutate(returnData)\n  }\n\n  const handleTransferAsset = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedAssignment) return\n    \n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const transferData = {\n      assetId: selectedAssignment.assetId,\n      fromEmployeeId: selectedAssignment.employeeId,\n      toEmployeeId: parseInt(formData.get('toEmployeeId') as string),\n      returnReason: formData.get('returnReason'),\n      conditionOnReturn: formData.get('conditionOnReturn'),\n      newAssignmentReason: formData.get('newAssignmentReason'),\n      conditionOnNewAssignment: formData.get('conditionOnNewAssignment'),\n    }\n\n    transferAssetMutation.mutate(transferData)\n  }\n\n  if (assignmentsLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Assignments</h1>\n          <p className=\"text-muted-foreground\">\n            Manage asset assignments with complete history preservation\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Excel\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n          <Dialog open={isAssignDialogOpen} onOpenChange={setIsAssignDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Assign Asset\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Assign Asset to Employee</DialogTitle>\n                <DialogDescription>\n                  Create a new asset assignment with complete tracking\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleAssignAsset} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assetId\">Asset *</Label>\n                    <Select name=\"assetId\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select asset\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {availableAssets.map(asset => (\n                          <SelectItem key={asset.assetId} value={asset.assetId}>\n                            {asset.assetId} - {asset.brand} {asset.modelName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"employeeId\">Employee *</Label>\n                    <Select name=\"employeeId\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select employee\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {activeEmployees.map(employee => (\n                          <SelectItem key={employee.id} value={employee.id.toString()}>\n                            {employee.firstName} {employee.lastName} ({employee.employeeCode})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"assignmentReason\">Assignment Reason *</Label>\n                  <Select name=\"assignmentReason\" required>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select reason\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"New Employee\">New Employee</SelectItem>\n                      <SelectItem value=\"Replacement\">Replacement</SelectItem>\n                      <SelectItem value=\"Upgrade\">Upgrade</SelectItem>\n                      <SelectItem value=\"Temporary\">Temporary</SelectItem>\n                      <SelectItem value=\"Project Requirement\">Project Requirement</SelectItem>\n                      <SelectItem value=\"Department Transfer\">Department Transfer</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"conditionOnAssignment\">Condition on Assignment *</Label>\n                  <Select name=\"conditionOnAssignment\" required>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select condition\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"excellent\">Excellent</SelectItem>\n                      <SelectItem value=\"good\">Good</SelectItem>\n                      <SelectItem value=\"fair\">Fair</SelectItem>\n                      <SelectItem value=\"poor\">Poor</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"backupDetails\">Backup Details</Label>\n                  <Textarea\n                    id=\"backupDetails\"\n                    name=\"backupDetails\"\n                    placeholder=\"Previous user data backup information (if applicable)\"\n                    rows={3}\n                  />\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsAssignDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={assignAssetMutation.isPending}>\n                    {assignAssetMutation.isPending ? \"Assigning...\" : \"Assign Asset\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Assignments</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{assignments?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Complete history preserved\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Assignments</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {assignments?.filter(a => !a.returnedDate).length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently assigned\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Returned Assets</CardTitle>\n            <Undo className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {assignments?.filter(a => a.returnedDate).length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Successfully returned\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Available for Assignment</CardTitle>\n            <Package className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{availableAssets.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Ready to assign\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Assignments</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by Asset ID, Employee Name, Employee Code...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Assignments</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"returned\">Returned</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredAssignments.length} of {assignments?.length || 0} assignments\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Assignments Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Asset</TableHead>\n                <TableHead>Employee</TableHead>\n                <TableHead>Assigned Date</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Condition</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Reason</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredAssignments.map((assignment, index) => {\n                const asset = getAssetInfo(assignment.assetId)\n                const employee = getEmployeeInfo(assignment.employeeId)\n                const isActive = !assignment.returnedDate\n                \n                return (\n                  <TableRow key={`${assignment.assetId}-${assignment.employeeId}-${index}`}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <Laptop className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">{assignment.assetId}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {asset?.brand} {asset?.modelName}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <User className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">\n                            {employee?.firstName} {employee?.lastName}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground font-mono\">\n                            {employee?.employeeCode}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                        {formatDate(assignment.assignedDate)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        {isActive ? (\n                          <>\n                            <div className=\"w-2 h-2 rounded-full bg-green-500\" />\n                            <span>Active</span>\n                          </>\n                        ) : (\n                          <>\n                            <div className=\"w-2 h-2 rounded-full bg-blue-500\" />\n                            <span>Returned</span>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {formatDate(assignment.returnedDate!)}\n                            </div>\n                          </>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div className={`w-2 h-2 rounded-full ${\n                          assignment.conditionOnAssignment === 'excellent' ? 'bg-green-500' :\n                          assignment.conditionOnAssignment === 'good' ? 'bg-blue-500' :\n                          assignment.conditionOnAssignment === 'fair' ? 'bg-yellow-500' : 'bg-red-500'\n                        }`} />\n                        <span className=\"capitalize\">{assignment.conditionOnAssignment}</span>\n                        {assignment.conditionOnReturn && (\n                          <>\n                            <span className=\"text-muted-foreground\">→</span>\n                            <div className={`w-2 h-2 rounded-full ${\n                              assignment.conditionOnReturn === 'excellent' ? 'bg-green-500' :\n                              assignment.conditionOnReturn === 'good' ? 'bg-blue-500' :\n                              assignment.conditionOnReturn === 'fair' ? 'bg-yellow-500' : 'bg-red-500'\n                            }`} />\n                            <span className=\"capitalize text-sm\">{assignment.conditionOnReturn}</span>\n                          </>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"h-3 w-3 text-muted-foreground\" />\n                        {getLocationName(employee?.locationId)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {assignment.assignmentReason}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedAssignment(assignment)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          {isActive && (\n                            <>\n                              <DropdownMenuItem\n                                onClick={() => {\n                                  setSelectedAssignment(assignment)\n                                  setIsReturnDialogOpen(true)\n                                }}\n                              >\n                                <Undo className=\"mr-2 h-4 w-4\" />\n                                Return Asset\n                              </DropdownMenuItem>\n                              <DropdownMenuItem\n                                onClick={() => {\n                                  setSelectedAssignment(assignment)\n                                  setIsTransferDialogOpen(true)\n                                }}\n                              >\n                                <ArrowRightLeft className=\"mr-2 h-4 w-4\" />\n                                Transfer Asset\n                              </DropdownMenuItem>\n                            </>\n                          )}\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Assignment Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Assignment Details</DialogTitle>\n            <DialogDescription>\n              Complete assignment information with history\n            </DialogDescription>\n          </DialogHeader>\n          {selectedAssignment && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Asset</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAssignment.assetId}\n                    <div className=\"text-xs text-muted-foreground\">\n                      {getAssetInfo(selectedAssignment.assetId)?.brand} {getAssetInfo(selectedAssignment.assetId)?.modelName}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Employee</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getEmployeeInfo(selectedAssignment.employeeId)?.firstName} {getEmployeeInfo(selectedAssignment.employeeId)?.lastName}\n                    <div className=\"text-xs text-muted-foreground font-mono\">\n                      {getEmployeeInfo(selectedAssignment.employeeId)?.employeeCode}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Assigned Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDate(selectedAssignment.assignedDate)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Return Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAssignment.returnedDate ? formatDate(selectedAssignment.returnedDate) : \"Not returned\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Assignment Reason</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAssignment.assignmentReason}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Return Reason</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAssignment.returnReason || \"Not applicable\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Condition on Assignment</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded capitalize\">\n                    {selectedAssignment.conditionOnAssignment}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Condition on Return</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded capitalize\">\n                    {selectedAssignment.conditionOnReturn || \"Not applicable\"}\n                  </div>\n                </div>\n              </div>\n\n              {selectedAssignment.backupDetails && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Backup Details</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedAssignment.backupDetails}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Return Asset Dialog */}\n      <Dialog open={isReturnDialogOpen} onOpenChange={setIsReturnDialogOpen}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Return Asset</DialogTitle>\n            <DialogDescription>\n              Record the return of {selectedAssignment?.assetId} from {getEmployeeInfo(selectedAssignment?.employeeId || 0)?.firstName} {getEmployeeInfo(selectedAssignment?.employeeId || 0)?.lastName}\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleReturnAsset} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"returnReason\">Return Reason *</Label>\n              <Select name=\"returnReason\" required>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select return reason\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Employee Left\">Employee Left</SelectItem>\n                  <SelectItem value=\"Upgrade\">Upgrade</SelectItem>\n                  <SelectItem value=\"Replacement\">Replacement</SelectItem>\n                  <SelectItem value=\"Maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"Department Transfer\">Department Transfer</SelectItem>\n                  <SelectItem value=\"Project Ended\">Project Ended</SelectItem>\n                  <SelectItem value=\"Retirement\">Retirement</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"conditionOnReturn\">Condition on Return *</Label>\n              <Select name=\"conditionOnReturn\" required>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select condition\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"excellent\">Excellent</SelectItem>\n                  <SelectItem value=\"good\">Good</SelectItem>\n                  <SelectItem value=\"fair\">Fair</SelectItem>\n                  <SelectItem value=\"poor\">Poor</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <DialogFooter>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setIsReturnDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={returnAssetMutation.isPending}>\n                {returnAssetMutation.isPending ? \"Processing...\" : \"Return Asset\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Transfer Asset Dialog */}\n      <Dialog open={isTransferDialogOpen} onOpenChange={setIsTransferDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Transfer Asset</DialogTitle>\n            <DialogDescription>\n              Transfer {selectedAssignment?.assetId} from {getEmployeeInfo(selectedAssignment?.employeeId || 0)?.firstName} {getEmployeeInfo(selectedAssignment?.employeeId || 0)?.lastName} to another employee\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleTransferAsset} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"toEmployeeId\">Transfer to Employee *</Label>\n              <Select name=\"toEmployeeId\" required>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select new assignee\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {activeEmployees.filter(emp => emp.id !== selectedAssignment?.employeeId).map(employee => (\n                    <SelectItem key={employee.id} value={employee.id.toString()}>\n                      {employee.firstName} {employee.lastName} ({employee.employeeCode})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"returnReason\">Return Reason *</Label>\n                <Select name=\"returnReason\" required>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select reason\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Transfer\">Transfer</SelectItem>\n                    <SelectItem value=\"Replacement\">Replacement</SelectItem>\n                    <SelectItem value=\"Department Change\">Department Change</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"conditionOnReturn\">Condition on Return *</Label>\n                <Select name=\"conditionOnReturn\" required>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Condition\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"excellent\">Excellent</SelectItem>\n                    <SelectItem value=\"good\">Good</SelectItem>\n                    <SelectItem value=\"fair\">Fair</SelectItem>\n                    <SelectItem value=\"poor\">Poor</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"newAssignmentReason\">New Assignment Reason *</Label>\n                <Select name=\"newAssignmentReason\" required>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select reason\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Transfer\">Transfer</SelectItem>\n                    <SelectItem value=\"Replacement\">Replacement</SelectItem>\n                    <SelectItem value=\"New Employee\">New Employee</SelectItem>\n                    <SelectItem value=\"Department Change\">Department Change</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"conditionOnNewAssignment\">Condition for New Assignment *</Label>\n                <Select name=\"conditionOnNewAssignment\" required>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Condition\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"excellent\">Excellent</SelectItem>\n                    <SelectItem value=\"good\">Good</SelectItem>\n                    <SelectItem value=\"fair\">Fair</SelectItem>\n                    <SelectItem value=\"poor\">Poor</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <DialogFooter>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setIsTransferDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={transferAssetMutation.isPending}>\n                {transferAssetMutation.isPending ? \"Processing...\" : \"Transfer Asset\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":39825},"AutoDesignPro/client/src/pages/biometric.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Fingerprint, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Monitor,\n  Scan,\n  Shield,\n  MapPin,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Settings,\n  Power,\n  User,\n  Users,\n  Key\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface BiometricSystem {\n  id: number\n  systemName: string\n  systemType: \"fingerprint_scanner\" | \"face_recognition\" | \"iris_scanner\" | \"palm_scanner\" | \"access_controller\"\n  brand: string\n  model: string\n  serialNumber: string | null\n  ipAddress: string | null\n  macAddress: string | null\n  locationId: number\n  installationDate: string\n  warrantyUntil: string | null\n  status: \"active\" | \"inactive\" | \"maintenance\" | \"fault\"\n  enrolledUsers: number | null\n  maxUsers: number | null\n  accessLevel: \"entry_only\" | \"full_access\" | \"restricted\"\n  integrationSystem: string | null\n  firmwareVersion: string | null\n  lastSyncDate: string | null\n  maintenanceContract: string | null\n  notes: string | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  active: \"bg-green-500\",\n  inactive: \"bg-gray-500\",\n  maintenance: \"bg-yellow-500\",\n  fault: \"bg-red-500\"\n}\n\n// System type icons\nconst systemTypeIcons: Record<string, any> = {\n  fingerprint_scanner: Fingerprint,\n  face_recognition: Scan,\n  iris_scanner: Eye,\n  palm_scanner: User,\n  access_controller: Key\n}\n\nexport default function BiometricPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedSystem, setSelectedSystem] = useState<BiometricSystem | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Mock biometric data - In real app, this would come from API\n  const mockBiometricData: BiometricSystem[] = [\n    {\n      id: 1,\n      systemName: \"Main Entrance Fingerprint Scanner\",\n      systemType: \"fingerprint_scanner\",\n      brand: \"ZKTeco\",\n      model: \"F18\",\n      serialNumber: \"ZK123456789\",\n      ipAddress: \"192.168.1.110\",\n      macAddress: \"00:11:22:33:44:99\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2027-01-15\",\n      status: \"active\",\n      enrolledUsers: 85,\n      maxUsers: 3000,\n      accessLevel: \"full_access\",\n      integrationSystem: \"HRMS Integration\",\n      firmwareVersion: \"6.60.5.9\",\n      lastSyncDate: \"2024-01-20T08:00:00Z\",\n      maintenanceContract: \"BiometricTech Solutions\",\n      notes: \"Primary attendance and access control for all employees\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-20T08:30:00Z\"\n    },\n    {\n      id: 2,\n      systemName: \"Manager Cabin Face Recognition\",\n      systemType: \"face_recognition\",\n      brand: \"Hikvision\",\n      model: \"DS-K1T341AMF\",\n      serialNumber: \"HV987654321\",\n      ipAddress: \"192.168.1.111\",\n      macAddress: \"00:11:22:33:44:AA\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2026-01-15\",\n      status: \"active\",\n      enrolledUsers: 12,\n      maxUsers: 500,\n      accessLevel: \"restricted\",\n      integrationSystem: \"Access Control System\",\n      firmwareVersion: \"2.2.25\",\n      lastSyncDate: \"2024-01-20T06:00:00Z\",\n      maintenanceContract: \"SecureTech Solutions\",\n      notes: \"Restricted access for management and senior staff only\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-20T06:15:00Z\"\n    },\n    {\n      id: 3,\n      systemName: \"Store Exit Fingerprint Reader\",\n      systemType: \"fingerprint_scanner\",\n      brand: \"eSSL\",\n      model: \"X990\",\n      serialNumber: \"ES555666777\",\n      ipAddress: \"192.168.1.112\",\n      macAddress: \"00:11:22:33:44:BB\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2025-01-15\",\n      status: \"maintenance\",\n      enrolledUsers: 85,\n      maxUsers: 2000,\n      accessLevel: \"entry_only\",\n      integrationSystem: \"Attendance System\",\n      firmwareVersion: \"3.4.1\",\n      lastSyncDate: \"2024-01-18T17:00:00Z\",\n      maintenanceContract: \"Local Tech Services\",\n      notes: \"Exit scanner for attendance tracking. Under maintenance for sensor cleaning\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-18T17:30:00Z\"\n    },\n    {\n      id: 4,\n      systemName: \"Koramangala Access Controller\",\n      systemType: \"access_controller\",\n      brand: \"ZKTeco\",\n      model: \"inBio160\",\n      serialNumber: \"ZK888999000\",\n      ipAddress: \"192.168.2.110\",\n      macAddress: \"00:11:22:33:44:CC\",\n      locationId: 2,\n      installationDate: \"2023-12-01\",\n      warrantyUntil: \"2025-12-01\",\n      status: \"active\",\n      enrolledUsers: 45,\n      maxUsers: 30000,\n      accessLevel: \"full_access\",\n      integrationSystem: \"Door Control + CCTV\",\n      firmwareVersion: \"4.4.8\",\n      lastSyncDate: \"2024-01-19T09:00:00Z\",\n      maintenanceContract: \"ZKTeco Service\",\n      notes: \"Central access control system managing multiple doors and entry points\",\n      createdAt: \"2023-12-01T00:00:00Z\",\n      updatedAt: \"2024-01-19T09:30:00Z\"\n    },\n    {\n      id: 5,\n      systemName: \"Staff Room Palm Scanner\",\n      systemType: \"palm_scanner\",\n      brand: \"Fujitsu\",\n      model: \"PalmSecure-F Pro\",\n      serialNumber: \"FJ111222333\",\n      ipAddress: \"192.168.1.113\",\n      macAddress: \"00:11:22:33:44:DD\",\n      locationId: 1,\n      installationDate: \"2024-02-01\",\n      warrantyUntil: \"2027-02-01\",\n      status: \"active\",\n      enrolledUsers: 25,\n      maxUsers: 1000,\n      accessLevel: \"restricted\",\n      integrationSystem: \"Staff Management System\",\n      firmwareVersion: \"1.2.3\",\n      lastSyncDate: \"2024-01-20T07:30:00Z\",\n      maintenanceContract: \"Fujitsu Support\",\n      notes: \"High-security palm scanner for staff room and sensitive areas access\",\n      createdAt: \"2024-02-01T00:00:00Z\",\n      updatedAt: \"2024-01-20T07:45:00Z\"\n    }\n  ]\n\n  // Fetch data\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Use mock data for biometric systems\n  const biometricSystems = mockBiometricData\n\n  // Filter biometric systems\n  const filteredSystems = biometricSystems?.filter(system => {\n    const location = locations?.find(l => l.id === system.locationId)\n    \n    const matchesSearch = \n      system.systemName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.model.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.serialNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.ipAddress?.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === \"all\" || system.status === statusFilter\n    const matchesType = typeFilter === \"all\" || system.systemType === typeFilter\n    const matchesLocation = locationFilter === \"all\" || system.locationId.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesType && matchesLocation\n  }) || []\n\n  // Helper functions\n  const getLocationName = (locationId: number) => {\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown\"\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const formatDateTime = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  }\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status) {\n      case \"active\": return \"bg-green-100 text-green-800\"\n      case \"inactive\": return \"bg-gray-100 text-gray-800\"\n      case \"maintenance\": return \"bg-yellow-100 text-yellow-800\"\n      case \"fault\": return \"bg-red-100 text-red-800\"\n      default: return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  const getAccessLevelBadgeColor = (level: string) => {\n    switch (level) {\n      case \"full_access\": return \"bg-blue-100 text-blue-800\"\n      case \"restricted\": return \"bg-orange-100 text-orange-800\"\n      case \"entry_only\": return \"bg-gray-100 text-gray-800\"\n      default: return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  const getSystemTypeIcon = (type: string) => {\n    return systemTypeIcons[type] || Settings\n  }\n\n  const getSystemTypeLabel = (type: string) => {\n    switch (type) {\n      case \"fingerprint_scanner\": return \"Fingerprint Scanner\"\n      case \"face_recognition\": return \"Face Recognition\"\n      case \"iris_scanner\": return \"Iris Scanner\"\n      case \"palm_scanner\": return \"Palm Scanner\"\n      case \"access_controller\": return \"Access Controller\"\n      default: return type.charAt(0).toUpperCase() + type.slice(1)\n    }\n  }\n\n  const getAccessLevelLabel = (level: string) => {\n    switch (level) {\n      case \"full_access\": return \"Full Access\"\n      case \"restricted\": return \"Restricted\"\n      case \"entry_only\": return \"Entry Only\"\n      default: return level.charAt(0).toUpperCase() + level.slice(1)\n    }\n  }\n\n  // Calculate system metrics\n  const totalSystems = biometricSystems.length\n  const activeSystems = biometricSystems.filter(s => s.status === \"active\").length\n  const totalEnrolledUsers = biometricSystems.reduce((sum, s) => sum + (s.enrolledUsers || 0), 0)\n  const totalCapacity = biometricSystems.reduce((sum, s) => sum + (s.maxUsers || 0), 0)\n  const utilizationRate = totalCapacity > 0 ? Math.round((totalEnrolledUsers / totalCapacity) * 100) : 0\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Biometric Systems</h1>\n          <p className=\"text-muted-foreground\">\n            Manage access control and attendance systems across all BODYCRAFT locations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Systems\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export Report\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Biometric System\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Add Biometric System</DialogTitle>\n                <DialogDescription>\n                  Register a new biometric access control or attendance system\n                </DialogDescription>\n              </DialogHeader>\n              <form className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"systemName\">System Name *</Label>\n                    <Input\n                      id=\"systemName\"\n                      name=\"systemName\"\n                      placeholder=\"Main Entrance Scanner\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"systemType\">System Type *</Label>\n                    <Select name=\"systemType\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"fingerprint_scanner\">Fingerprint Scanner</SelectItem>\n                        <SelectItem value=\"face_recognition\">Face Recognition</SelectItem>\n                        <SelectItem value=\"iris_scanner\">Iris Scanner</SelectItem>\n                        <SelectItem value=\"palm_scanner\">Palm Scanner</SelectItem>\n                        <SelectItem value=\"access_controller\">Access Controller</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"brand\">Brand *</Label>\n                    <Input\n                      id=\"brand\"\n                      name=\"brand\"\n                      placeholder=\"ZKTeco, Hikvision, eSSL\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"model\">Model *</Label>\n                    <Input\n                      id=\"model\"\n                      name=\"model\"\n                      placeholder=\"F18, X990, inBio160\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serialNumber\">Serial Number</Label>\n                    <Input\n                      id=\"serialNumber\"\n                      name=\"serialNumber\"\n                      placeholder=\"ZK123456789\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"locationId\">Location *</Label>\n                    <Select name=\"locationId\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select location\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {locations?.map(location => (\n                          <SelectItem key={location.id} value={location.id.toString()}>\n                            {location.outletName}, {location.city}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"ipAddress\">IP Address</Label>\n                    <Input\n                      id=\"ipAddress\"\n                      name=\"ipAddress\"\n                      placeholder=\"192.168.1.110\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"maxUsers\">Max Users Capacity</Label>\n                    <Input\n                      id=\"maxUsers\"\n                      name=\"maxUsers\"\n                      type=\"number\"\n                      placeholder=\"3000\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"accessLevel\">Access Level *</Label>\n                    <Select name=\"accessLevel\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select level\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"full_access\">Full Access</SelectItem>\n                        <SelectItem value=\"restricted\">Restricted</SelectItem>\n                        <SelectItem value=\"entry_only\">Entry Only</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"installationDate\">Installation Date *</Label>\n                    <Input\n                      id=\"installationDate\"\n                      name=\"installationDate\"\n                      type=\"date\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"integrationSystem\">Integration System</Label>\n                  <Input\n                    id=\"integrationSystem\"\n                    name=\"integrationSystem\"\n                    placeholder=\"HRMS, Access Control, Attendance System\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notes\">Notes</Label>\n                  <Textarea\n                    id=\"notes\"\n                    name=\"notes\"\n                    placeholder=\"Additional notes about the biometric system\"\n                    rows={3}\n                  />\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">\n                    Add Biometric System\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Systems</CardTitle>\n            <Fingerprint className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalSystems}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Biometric access systems\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Systems</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{activeSystems}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently operational\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Enrolled Users</CardTitle>\n            <Users className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalEnrolledUsers}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Total user registrations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Utilization</CardTitle>\n            <Shield className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{utilizationRate}%</div>\n            <div className=\"mt-2\">\n              <Progress value={utilizationRate} className=\"h-2\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Systems</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by System Name, Brand, Model, Serial Number, IP Address...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"fault\">Fault</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"fingerprint_scanner\">Fingerprint</SelectItem>\n                  <SelectItem value=\"face_recognition\">Face Recognition</SelectItem>\n                  <SelectItem value=\"iris_scanner\">Iris Scanner</SelectItem>\n                  <SelectItem value=\"palm_scanner\">Palm Scanner</SelectItem>\n                  <SelectItem value=\"access_controller\">Access Controller</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredSystems.length} of {biometricSystems?.length || 0} biometric systems\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Biometric Systems Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>System</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Brand/Model</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Users</TableHead>\n                <TableHead>Access Level</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredSystems.map((system) => {\n                const SystemIcon = getSystemTypeIcon(system.systemType)\n                const utilizationPercent = system.maxUsers && system.enrolledUsers \n                  ? Math.round((system.enrolledUsers / system.maxUsers) * 100)\n                  : 0\n                \n                return (\n                  <TableRow key={system.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <SystemIcon className=\"h-8 w-8 p-1.5 bg-muted rounded-full\" />\n                        <div>\n                          <div className=\"font-medium\">{system.systemName}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {system.serialNumber || \"No serial number\"}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {getSystemTypeLabel(system.systemType)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{system.brand}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {system.model}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"h-3 w-3 text-muted-foreground\" />\n                        {getLocationName(system.locationId)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {system.enrolledUsers && system.maxUsers ? (\n                          <div>\n                            <div className=\"font-medium\">{system.enrolledUsers} / {system.maxUsers}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {utilizationPercent}% used\n                            </div>\n                          </div>\n                        ) : (\n                          \"Not specified\"\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"secondary\" \n                        className={getAccessLevelBadgeColor(system.accessLevel)}\n                      >\n                        {getAccessLevelLabel(system.accessLevel)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"secondary\" \n                        className={getStatusBadgeColor(system.status)}\n                      >\n                        {system.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedSystem(system)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit System\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Users className=\"mr-2 h-4 w-4\" />\n                            Manage Users\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Settings className=\"mr-2 h-4 w-4\" />\n                            Configure\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem className=\"text-red-600\">\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Remove System\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View System Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Biometric System Details</DialogTitle>\n            <DialogDescription>\n              Complete information about this biometric access control system\n            </DialogDescription>\n          </DialogHeader>\n          {selectedSystem && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">System Name</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded font-medium\">\n                    {selectedSystem.systemName}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">System Type</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getSystemTypeLabel(selectedSystem.systemType)}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Brand</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.brand}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Model</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.model}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Serial Number</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.serialNumber || \"Not specified\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Location</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getLocationName(selectedSystem.locationId)}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">IP Address</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.ipAddress || \"Not configured\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Access Level</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    <Badge className={getAccessLevelBadgeColor(selectedSystem.accessLevel)}>\n                      {getAccessLevelLabel(selectedSystem.accessLevel)}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Enrolled Users</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.enrolledUsers || \"0\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Max Capacity</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.maxUsers || \"N/A\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Utilization</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.maxUsers && selectedSystem.enrolledUsers \n                      ? `${Math.round((selectedSystem.enrolledUsers / selectedSystem.maxUsers) * 100)}%`\n                      : \"N/A\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Installation Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDate(selectedSystem.installationDate)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Warranty Until</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.warrantyUntil ? formatDate(selectedSystem.warrantyUntil) : \"No warranty\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    <Badge className={getStatusBadgeColor(selectedSystem.status)}>\n                      {selectedSystem.status}\n                    </Badge>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Firmware Version</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.firmwareVersion || \"Not specified\"}\n                  </div>\n                </div>\n              </div>\n\n              {selectedSystem.integrationSystem && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Integration System</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.integrationSystem}\n                  </div>\n                </div>\n              )}\n\n              {selectedSystem.lastSyncDate && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Last Sync</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDateTime(selectedSystem.lastSyncDate)}\n                  </div>\n                </div>\n              )}\n\n              {selectedSystem.maintenanceContract && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Maintenance Contract</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.maintenanceContract}\n                  </div>\n                </div>\n              )}\n\n              {selectedSystem.notes && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Notes</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.notes}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":37392},"AutoDesignPro/client/src/pages/cctv.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Camera, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Monitor,\n  HardDrive,\n  Wifi,\n  MapPin,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Settings,\n  Power,\n  Shield,\n  Video\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface CCTVSystem {\n  id: number\n  systemName: string\n  systemType: \"nvr\" | \"dvr\" | \"ip_camera\" | \"analog_camera\" | \"monitoring_station\"\n  brand: string\n  model: string\n  serialNumber: string | null\n  ipAddress: string | null\n  macAddress: string | null\n  locationId: number\n  installationDate: string\n  warrantyUntil: string | null\n  status: \"active\" | \"inactive\" | \"maintenance\" | \"fault\"\n  cameraCount: number | null\n  storageCapacity: string | null\n  recordingQuality: string | null\n  remoteAccess: boolean\n  maintenanceContract: string | null\n  lastMaintenanceDate: string | null\n  notes: string | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  active: \"bg-green-500\",\n  inactive: \"bg-gray-500\",\n  maintenance: \"bg-yellow-500\",\n  fault: \"bg-red-500\"\n}\n\n// System type icons\nconst systemTypeIcons: Record<string, any> = {\n  nvr: HardDrive,\n  dvr: HardDrive,\n  ip_camera: Camera,\n  analog_camera: Video,\n  monitoring_station: Monitor\n}\n\nexport default function CCTVPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedSystem, setSelectedSystem] = useState<CCTVSystem | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Mock CCTV data - In real app, this would come from API\n  const mockCCTVData: CCTVSystem[] = [\n    {\n      id: 1,\n      systemName: \"JP Nagar Store Main NVR\",\n      systemType: \"nvr\",\n      brand: \"Hikvision\",\n      model: \"DS-7616NI-I2/16P\",\n      serialNumber: \"HV123456789\",\n      ipAddress: \"192.168.1.100\",\n      macAddress: \"00:11:22:33:44:55\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2027-01-15\",\n      status: \"active\",\n      cameraCount: 16,\n      storageCapacity: \"8TB\",\n      recordingQuality: \"4MP\",\n      remoteAccess: true,\n      maintenanceContract: \"SecureTech Solutions\",\n      lastMaintenanceDate: \"2024-01-10\",\n      notes: \"Main surveillance system for store entrance, cash counter, and storage areas\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-10T10:30:00Z\"\n    },\n    {\n      id: 2,\n      systemName: \"Entrance Camera Bank 1\",\n      systemType: \"ip_camera\",\n      brand: \"Dahua\",\n      model: \"IPC-HDBW4231E-AS\",\n      serialNumber: \"DH987654321\",\n      ipAddress: \"192.168.1.101\",\n      macAddress: \"00:11:22:33:44:66\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2026-01-15\",\n      status: \"active\",\n      cameraCount: 4,\n      storageCapacity: null,\n      recordingQuality: \"2MP\",\n      remoteAccess: true,\n      maintenanceContract: \"SecureTech Solutions\",\n      lastMaintenanceDate: \"2024-01-10\",\n      notes: \"Covers main entrance, customer parking, and loading dock\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-10T10:30:00Z\"\n    },\n    {\n      id: 3,\n      systemName: \"Koramangala DVR System\", \n      systemType: \"dvr\",\n      brand: \"CP Plus\",\n      model: \"CP-UVR-0801E1-CS\",\n      serialNumber: \"CP555666777\",\n      ipAddress: \"192.168.1.150\",\n      macAddress: \"00:11:22:33:44:77\",\n      locationId: 2,\n      installationDate: \"2023-12-01\",\n      warrantyUntil: \"2025-12-01\",\n      status: \"maintenance\",\n      cameraCount: 8,\n      storageCapacity: \"2TB\",\n      recordingQuality: \"1080p\",\n      remoteAccess: false,\n      maintenanceContract: \"Local Security Services\",\n      lastMaintenanceDate: \"2024-01-05\",\n      notes: \"Scheduled for upgrade to IP system. Current analog cameras need replacement\",\n      createdAt: \"2023-12-01T00:00:00Z\",\n      updatedAt: \"2024-01-05T14:20:00Z\"\n    },\n    {\n      id: 4,\n      systemName: \"Store Monitoring Station\",\n      systemType: \"monitoring_station\",\n      brand: \"Samsung\",\n      model: \"SRN-4000-2TB\",\n      serialNumber: \"SM111222333\",\n      ipAddress: \"192.168.1.200\",\n      macAddress: \"00:11:22:33:44:88\",\n      locationId: 1,\n      installationDate: \"2024-01-15\",\n      warrantyUntil: \"2027-01-15\",\n      status: \"active\",\n      cameraCount: null,\n      storageCapacity: \"2TB\",\n      recordingQuality: null,\n      remoteAccess: true,\n      maintenanceContract: \"Samsung Care\",\n      lastMaintenanceDate: null,\n      notes: \"Central monitoring workstation for security personnel\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-01T00:00:00Z\"\n    }\n  ]\n\n  // Fetch data\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Use mock data for CCTV systems\n  const cctvSystems = mockCCTVData\n\n  // Filter CCTV systems\n  const filteredSystems = cctvSystems?.filter(system => {\n    const location = locations?.find(l => l.id === system.locationId)\n    \n    const matchesSearch = \n      system.systemName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.model.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.serialNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      system.ipAddress?.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === \"all\" || system.status === statusFilter\n    const matchesType = typeFilter === \"all\" || system.systemType === typeFilter\n    const matchesLocation = locationFilter === \"all\" || system.locationId.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesType && matchesLocation\n  }) || []\n\n  // Helper functions\n  const getLocationName = (locationId: number) => {\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown\"\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status) {\n      case \"active\": return \"bg-green-100 text-green-800\"\n      case \"inactive\": return \"bg-gray-100 text-gray-800\"\n      case \"maintenance\": return \"bg-yellow-100 text-yellow-800\"\n      case \"fault\": return \"bg-red-100 text-red-800\"\n      default: return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  const getSystemTypeIcon = (type: string) => {\n    return systemTypeIcons[type] || Settings\n  }\n\n  const getSystemTypeLabel = (type: string) => {\n    switch (type) {\n      case \"nvr\": return \"Network Video Recorder\"\n      case \"dvr\": return \"Digital Video Recorder\"\n      case \"ip_camera\": return \"IP Camera\"\n      case \"analog_camera\": return \"Analog Camera\"\n      case \"monitoring_station\": return \"Monitoring Station\"\n      default: return type.charAt(0).toUpperCase() + type.slice(1)\n    }\n  }\n\n  // Calculate system metrics\n  const totalSystems = cctvSystems.length\n  const activeSystems = cctvSystems.filter(s => s.status === \"active\").length\n  const faultySystems = cctvSystems.filter(s => s.status === \"fault\").length\n  const totalCameras = cctvSystems.reduce((sum, s) => sum + (s.cameraCount || 0), 0)\n  const systemHealth = totalSystems > 0 ? Math.round((activeSystems / totalSystems) * 100) : 0\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">CCTV Systems</h1>\n          <p className=\"text-muted-foreground\">\n            Monitor and manage surveillance systems across all BODYCRAFT locations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Systems\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export Report\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add CCTV System\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Add CCTV System</DialogTitle>\n                <DialogDescription>\n                  Register a new surveillance system or component\n                </DialogDescription>\n              </DialogHeader>\n              <form className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"systemName\">System Name *</Label>\n                    <Input\n                      id=\"systemName\"\n                      name=\"systemName\"\n                      placeholder=\"Main Store NVR\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"systemType\">System Type *</Label>\n                    <Select name=\"systemType\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"nvr\">Network Video Recorder</SelectItem>\n                        <SelectItem value=\"dvr\">Digital Video Recorder</SelectItem>\n                        <SelectItem value=\"ip_camera\">IP Camera</SelectItem>\n                        <SelectItem value=\"analog_camera\">Analog Camera</SelectItem>\n                        <SelectItem value=\"monitoring_station\">Monitoring Station</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"brand\">Brand *</Label>\n                    <Input\n                      id=\"brand\"\n                      name=\"brand\"\n                      placeholder=\"Hikvision, Dahua, CP Plus\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"model\">Model *</Label>\n                    <Input\n                      id=\"model\"\n                      name=\"model\"\n                      placeholder=\"DS-7616NI-I2/16P\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serialNumber\">Serial Number</Label>\n                    <Input\n                      id=\"serialNumber\"\n                      name=\"serialNumber\"\n                      placeholder=\"HV123456789\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"locationId\">Location *</Label>\n                    <Select name=\"locationId\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select location\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {locations?.map(location => (\n                          <SelectItem key={location.id} value={location.id.toString()}>\n                            {location.outletName}, {location.city}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"ipAddress\">IP Address</Label>\n                    <Input\n                      id=\"ipAddress\"\n                      name=\"ipAddress\"\n                      placeholder=\"192.168.1.100\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"macAddress\">MAC Address</Label>\n                    <Input\n                      id=\"macAddress\"\n                      name=\"macAddress\"\n                      placeholder=\"00:11:22:33:44:55\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"installationDate\">Installation Date *</Label>\n                    <Input\n                      id=\"installationDate\"\n                      name=\"installationDate\"\n                      type=\"date\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"warrantyUntil\">Warranty Until</Label>\n                    <Input\n                      id=\"warrantyUntil\"\n                      name=\"warrantyUntil\"\n                      type=\"date\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"cameraCount\">Camera Count</Label>\n                    <Input\n                      id=\"cameraCount\"\n                      name=\"cameraCount\"\n                      type=\"number\"\n                      placeholder=\"16\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"storageCapacity\">Storage Capacity</Label>\n                    <Input\n                      id=\"storageCapacity\"\n                      name=\"storageCapacity\"\n                      placeholder=\"8TB\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notes\">Notes</Label>\n                  <Textarea\n                    id=\"notes\"\n                    name=\"notes\"\n                    placeholder=\"Additional notes about the system configuration\"\n                    rows={3}\n                  />\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">\n                    Add CCTV System\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Systems</CardTitle>\n            <Camera className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalSystems}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              All surveillance systems\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Systems</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{activeSystems}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Operational systems\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Cameras</CardTitle>\n            <Video className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalCameras}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across all systems\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">System Health</CardTitle>\n            <Shield className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{systemHealth}%</div>\n            <div className=\"mt-2\">\n              <Progress value={systemHealth} className=\"h-2\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Systems</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by System Name, Brand, Model, Serial Number, IP Address...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"fault\">Fault</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"nvr\">NVR Systems</SelectItem>\n                  <SelectItem value=\"dvr\">DVR Systems</SelectItem>\n                  <SelectItem value=\"ip_camera\">IP Cameras</SelectItem>\n                  <SelectItem value=\"analog_camera\">Analog Cameras</SelectItem>\n                  <SelectItem value=\"monitoring_station\">Monitoring Stations</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredSystems.length} of {cctvSystems?.length || 0} CCTV systems\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* CCTV Systems Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>System</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Brand/Model</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Network</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Cameras</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredSystems.map((system) => {\n                const SystemIcon = getSystemTypeIcon(system.systemType)\n                \n                return (\n                  <TableRow key={system.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <SystemIcon className=\"h-8 w-8 p-1.5 bg-muted rounded-full\" />\n                        <div>\n                          <div className=\"font-medium\">{system.systemName}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {system.serialNumber || \"No serial number\"}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {getSystemTypeLabel(system.systemType)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{system.brand}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {system.model}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"h-3 w-3 text-muted-foreground\" />\n                        {getLocationName(system.locationId)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {system.ipAddress ? (\n                          <div>\n                            <div>{system.ipAddress}</div>\n                            {system.remoteAccess && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                <Wifi className=\"h-2 w-2 mr-1\" />\n                                Remote\n                              </Badge>\n                            )}\n                          </div>\n                        ) : (\n                          \"No IP configured\"\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"secondary\" \n                        className={getStatusBadgeColor(system.status)}\n                      >\n                        {system.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-center\">\n                        {system.cameraCount ? (\n                          <div className=\"flex items-center gap-1\">\n                            <Camera className=\"h-3 w-3\" />\n                            {system.cameraCount}\n                          </div>\n                        ) : (\n                          \"N/A\"\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedSystem(system)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit System\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Settings className=\"mr-2 h-4 w-4\" />\n                            Configure\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem className=\"text-red-600\">\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Remove System\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View System Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>CCTV System Details</DialogTitle>\n            <DialogDescription>\n              Complete information about this surveillance system\n            </DialogDescription>\n          </DialogHeader>\n          {selectedSystem && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">System Name</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded font-medium\">\n                    {selectedSystem.systemName}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">System Type</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getSystemTypeLabel(selectedSystem.systemType)}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Brand</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.brand}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Model</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.model}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Serial Number</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.serialNumber || \"Not specified\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Location</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getLocationName(selectedSystem.locationId)}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">IP Address</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.ipAddress || \"Not configured\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">MAC Address</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.macAddress || \"Not specified\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Camera Count</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.cameraCount || \"N/A\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Storage</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.storageCapacity || \"N/A\"}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Recording Quality</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.recordingQuality || \"N/A\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Installation Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDate(selectedSystem.installationDate)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Warranty Until</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.warrantyUntil ? formatDate(selectedSystem.warrantyUntil) : \"No warranty\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    <Badge className={getStatusBadgeColor(selectedSystem.status)}>\n                      {selectedSystem.status}\n                    </Badge>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Remote Access</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.remoteAccess ? (\n                      <Badge variant=\"outline\" className=\"text-green-600\">\n                        <Wifi className=\"h-3 w-3 mr-1\" />\n                        Enabled\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"outline\" className=\"text-gray-600\">\n                        Disabled\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {selectedSystem.maintenanceContract && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Maintenance Contract</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.maintenanceContract}\n                    {selectedSystem.lastMaintenanceDate && (\n                      <div className=\"text-xs text-muted-foreground mt-1\">\n                        Last maintenance: {formatDate(selectedSystem.lastMaintenanceDate)}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {selectedSystem.notes && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Notes</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedSystem.notes}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":34567},"AutoDesignPro/client/src/pages/compliance.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Shield, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Calendar,\n  FileText,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Building2,\n  HardDrive,\n  Key,\n  Monitor,\n  Camera,\n  Fingerprint,\n  Settings,\n  Archive\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface ComplianceRecord {\n  id: number\n  type: \"backup\" | \"security_audit\" | \"policy_review\" | \"system_update\" | \"data_retention\" | \"access_review\"\n  category: \"data_backup\" | \"security\" | \"compliance\" | \"maintenance\" | \"governance\"\n  title: string\n  description: string\n  assetId: string | null\n  locationId: number | null\n  dueDate: string\n  completedDate: string | null\n  status: \"pending\" | \"completed\" | \"overdue\" | \"exempted\"\n  assignedTo: string\n  evidenceUrl: string | null\n  complianceNotes: string | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  assetType: string\n  status: \"available\" | \"assigned\" | \"maintenance\" | \"retired\"\n  locationId: number | null\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  pending: \"bg-yellow-500\",\n  completed: \"bg-green-500\",\n  overdue: \"bg-red-500\",\n  exempted: \"bg-gray-500\"\n}\n\n// Type color mapping\nconst typeColors: Record<string, string> = {\n  backup: \"bg-blue-500\",\n  security_audit: \"bg-red-500\",\n  policy_review: \"bg-purple-500\",\n  system_update: \"bg-orange-500\",\n  data_retention: \"bg-cyan-500\",\n  access_review: \"bg-pink-500\"\n}\n\n// Category icons\nconst categoryIcons: Record<string, any> = {\n  data_backup: HardDrive,\n  security: Shield,\n  compliance: FileText,\n  maintenance: Settings,\n  governance: Building2\n}\n\nexport default function CompliancePage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\")\n  const [categoryFilter, setCategoryFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedRecord, setSelectedRecord] = useState<ComplianceRecord | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [isCompleteDialogOpen, setIsCompleteDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Mock compliance data - In real app, this would come from API\n  const mockComplianceData: ComplianceRecord[] = [\n    {\n      id: 1,\n      type: \"backup\",\n      category: \"data_backup\",\n      title: \"Weekly System Backup Verification\",\n      description: \"Verify that all critical systems have been backed up and backups are recoverable\",\n      assetId: \"BFC001\",\n      locationId: 1,\n      dueDate: \"2024-01-15\",\n      completedDate: \"2024-01-14\",\n      status: \"completed\",\n      assignedTo: \"Rajesh Kumar\",\n      evidenceUrl: \"backup_verification_20240114.pdf\",\n      complianceNotes: \"All backups verified successfully. Test restore completed for critical files.\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-14T10:30:00Z\"\n    },\n    {\n      id: 2,\n      type: \"security_audit\",\n      category: \"security\",\n      title: \"Quarterly Access Review\",\n      description: \"Review and validate user access permissions across all systems\",\n      assetId: null,\n      locationId: 1,\n      dueDate: \"2024-01-20\",\n      completedDate: null,\n      status: \"pending\",\n      assignedTo: \"Priya Singh\",\n      evidenceUrl: null,\n      complianceNotes: null,\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-01T00:00:00Z\"\n    },\n    {\n      id: 3,\n      type: \"policy_review\",\n      category: \"governance\",\n      title: \"IT Security Policy Annual Review\",\n      description: \"Annual review and update of IT security policies and procedures\",\n      assetId: null,\n      locationId: 2,\n      dueDate: \"2024-01-10\",\n      completedDate: null,\n      status: \"overdue\",\n      assignedTo: \"Admin Team\",\n      evidenceUrl: null,\n      complianceNotes: \"Policy review delayed due to management changes\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-01T00:00:00Z\"\n    },\n    {\n      id: 4,\n      type: \"system_update\",\n      category: \"maintenance\",\n      title: \"Critical Security Patches\",\n      description: \"Install latest security patches on all Windows systems\",\n      assetId: \"BFC003\",\n      locationId: 2,\n      dueDate: \"2024-01-18\",\n      completedDate: \"2024-01-17\",\n      status: \"completed\",\n      assignedTo: \"IT Support\",\n      evidenceUrl: \"patch_report_20240117.xlsx\",\n      complianceNotes: \"Security patches applied to 15 systems. Reboot completed successfully.\",\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-17T16:45:00Z\"\n    },\n    {\n      id: 5,\n      type: \"data_retention\",\n      category: \"compliance\",\n      title: \"Data Retention Policy Compliance\",\n      description: \"Ensure old backup data is archived according to retention policy\",\n      assetId: \"BFC006\",\n      locationId: 1,\n      dueDate: \"2024-01-25\",\n      completedDate: null,\n      status: \"pending\",\n      assignedTo: \"Data Manager\",\n      evidenceUrl: null,\n      complianceNotes: null,\n      createdAt: \"2024-01-01T00:00:00Z\",\n      updatedAt: \"2024-01-01T00:00:00Z\"\n    }\n  ]\n\n  // Fetch data\n  const { data: assets } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Use mock data for compliance records\n  const compliance = mockComplianceData\n\n  // Helper function to get compliance status\n  const getComplianceStatus = (record: ComplianceRecord) => {\n    if (record.status === \"exempted\") return \"exempted\"\n    if (record.completedDate) return \"completed\"\n    \n    const dueDate = new Date(record.dueDate)\n    const today = new Date()\n    today.setHours(0, 0, 0, 0)\n    \n    if (dueDate < today) return \"overdue\"\n    return \"pending\"\n  }\n\n  // Filter compliance records\n  const filteredCompliance = compliance?.filter(record => {\n    const asset = assets?.find(a => a.assetId === record.assetId)\n    const location = locations?.find(l => l.id === record.locationId)\n    const status = getComplianceStatus(record)\n    \n    const matchesSearch = \n      record.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      record.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      record.assignedTo.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      record.assetId?.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === \"all\" || status === statusFilter\n    const matchesType = typeFilter === \"all\" || record.type === typeFilter\n    const matchesCategory = categoryFilter === \"all\" || record.category === categoryFilter\n    const matchesLocation = locationFilter === \"all\" || record.locationId?.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesType && matchesCategory && matchesLocation\n  }) || []\n\n  // Helper functions\n  const getAssetInfo = (assetId: string | null) => {\n    if (!assetId) return null\n    return assets?.find(asset => asset.assetId === assetId)\n  }\n\n  const getLocationName = (locationId: number | null) => {\n    if (!locationId) return \"All Locations\"\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown\"\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"bg-green-100 text-green-800\"\n      case \"pending\": return \"bg-yellow-100 text-yellow-800\" \n      case \"overdue\": return \"bg-red-100 text-red-800\"\n      case \"exempted\": return \"bg-gray-100 text-gray-800\"\n      default: return \"bg-gray-100 text-gray-800\"\n    }\n  }\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"backup\": return HardDrive\n      case \"security_audit\": return Shield\n      case \"policy_review\": return FileText\n      case \"system_update\": return Monitor\n      case \"data_retention\": return Archive\n      case \"access_review\": return Key\n      default: return Settings\n    }\n  }\n\n  // Calculate compliance metrics\n  const totalRecords = compliance.length\n  const completedRecords = compliance.filter(r => r.completedDate).length\n  const pendingRecords = compliance.filter(r => !r.completedDate && getComplianceStatus(r) === \"pending\").length\n  const overdueRecords = compliance.filter(r => getComplianceStatus(r) === \"overdue\").length\n  const complianceRate = totalRecords > 0 ? Math.round((completedRecords / totalRecords) * 100) : 0\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Backup & Compliance</h1>\n          <p className=\"text-muted-foreground\">\n            Monitor compliance activities and backup verification across all locations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Tasks\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export Report\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Compliance Task\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create Compliance Task</DialogTitle>\n                <DialogDescription>\n                  Add a new compliance monitoring task or backup verification\n                </DialogDescription>\n              </DialogHeader>\n              <form className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"type\">Task Type *</Label>\n                    <Select name=\"type\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select task type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"backup\">Backup Verification</SelectItem>\n                        <SelectItem value=\"security_audit\">Security Audit</SelectItem>\n                        <SelectItem value=\"policy_review\">Policy Review</SelectItem>\n                        <SelectItem value=\"system_update\">System Update</SelectItem>\n                        <SelectItem value=\"data_retention\">Data Retention</SelectItem>\n                        <SelectItem value=\"access_review\">Access Review</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"category\">Category *</Label>\n                    <Select name=\"category\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select category\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"data_backup\">Data Backup</SelectItem>\n                        <SelectItem value=\"security\">Security</SelectItem>\n                        <SelectItem value=\"compliance\">Compliance</SelectItem>\n                        <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                        <SelectItem value=\"governance\">Governance</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Task Title *</Label>\n                  <Input\n                    id=\"title\"\n                    name=\"title\"\n                    placeholder=\"Weekly backup verification\"\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Description *</Label>\n                  <Textarea\n                    id=\"description\"\n                    name=\"description\"\n                    placeholder=\"Detailed description of the compliance task\"\n                    rows={3}\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assetId\">Related Asset (Optional)</Label>\n                    <Select name=\"assetId\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select asset\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"\">No specific asset</SelectItem>\n                        {assets?.map(asset => (\n                          <SelectItem key={asset.assetId} value={asset.assetId}>\n                            {asset.assetId} - {asset.brand} {asset.modelName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"locationId\">Location *</Label>\n                    <Select name=\"locationId\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select location\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {locations?.map(location => (\n                          <SelectItem key={location.id} value={location.id.toString()}>\n                            {location.outletName}, {location.city}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"dueDate\">Due Date *</Label>\n                    <Input\n                      id=\"dueDate\"\n                      name=\"dueDate\"\n                      type=\"date\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assignedTo\">Assigned To *</Label>\n                    <Input\n                      id=\"assignedTo\"\n                      name=\"assignedTo\"\n                      placeholder=\"John Doe / IT Team\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">\n                    Create Compliance Task\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Tasks</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalRecords}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              All compliance tasks\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Completed</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{completedRecords}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Tasks completed\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Overdue</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{overdueRecords}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Past due date\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Compliance Rate</CardTitle>\n            <Shield className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{complianceRate}%</div>\n            <div className=\"mt-2\">\n              <Progress value={complianceRate} className=\"h-2\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Compliance</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by Title, Description, Asset ID, Assigned Person...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"overdue\">Overdue</SelectItem>\n                  <SelectItem value=\"exempted\">Exempted</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"backup\">Backup</SelectItem>\n                  <SelectItem value=\"security_audit\">Security Audit</SelectItem>\n                  <SelectItem value=\"policy_review\">Policy Review</SelectItem>\n                  <SelectItem value=\"system_update\">System Update</SelectItem>\n                  <SelectItem value=\"data_retention\">Data Retention</SelectItem>\n                  <SelectItem value=\"access_review\">Access Review</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"data_backup\">Data Backup</SelectItem>\n                  <SelectItem value=\"security\">Security</SelectItem>\n                  <SelectItem value=\"compliance\">Compliance</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"governance\">Governance</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredCompliance.length} of {compliance?.length || 0} compliance records\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Compliance Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Task</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Asset/Location</TableHead>\n                <TableHead>Due Date</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Assigned To</TableHead>\n                <TableHead>Evidence</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredCompliance.map((record) => {\n                const asset = getAssetInfo(record.assetId)\n                const status = getComplianceStatus(record)\n                const TypeIcon = getTypeIcon(record.type)\n                \n                return (\n                  <TableRow key={record.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <TypeIcon className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">{record.title}</div>\n                          <div className=\"text-sm text-muted-foreground truncate max-w-xs\">\n                            {record.description}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className={`w-2 h-2 rounded-full ${typeColors[record.type]}`}\n                        />\n                        <span className=\"capitalize\">{record.type.replace('_', ' ')}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        {asset ? (\n                          <>\n                            <div className=\"font-medium\">{record.assetId}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {asset.brand} {asset.modelName}\n                            </div>\n                          </>\n                        ) : (\n                          <div className=\"text-sm text-muted-foreground\">\n                            {getLocationName(record.locationId)}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                        {formatDate(record.dueDate)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"secondary\" \n                        className={getStatusBadgeColor(status)}\n                      >\n                        {status}\n                      </Badge>\n                      {record.completedDate && (\n                        <div className=\"text-xs text-muted-foreground mt-1\">\n                          Completed: {formatDate(record.completedDate)}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {record.assignedTo}\n                    </TableCell>\n                    <TableCell>\n                      {record.evidenceUrl ? (\n                        <div className=\"flex items-center gap-1 text-green-600\">\n                          <CheckCircle className=\"h-3 w-3\" />\n                          <span className=\"text-xs\">Evidence</span>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center gap-1 text-gray-400\">\n                          <XCircle className=\"h-3 w-3\" />\n                          <span className=\"text-xs\">No evidence</span>\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedRecord(record)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit Task\n                          </DropdownMenuItem>\n                          {!record.completedDate && (\n                            <DropdownMenuItem>\n                              <CheckCircle className=\"mr-2 h-4 w-4\" />\n                              Mark Complete\n                            </DropdownMenuItem>\n                          )}\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem className=\"text-red-600\">\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete Task\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Record Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Compliance Task Details</DialogTitle>\n            <DialogDescription>\n              Complete information about this compliance task\n            </DialogDescription>\n          </DialogHeader>\n          {selectedRecord && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Task Type</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded capitalize\">\n                    {selectedRecord.type.replace('_', ' ')}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Category</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded capitalize\">\n                    {selectedRecord.category.replace('_', ' ')}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Title</Label>\n                <div className=\"text-sm p-2 bg-muted rounded font-medium\">\n                  {selectedRecord.title}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Description</Label>\n                <div className=\"text-sm p-2 bg-muted rounded\">\n                  {selectedRecord.description}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Due Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDate(selectedRecord.dueDate)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    <Badge className={getStatusBadgeColor(getComplianceStatus(selectedRecord))}>\n                      {getComplianceStatus(selectedRecord)}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Assigned To</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedRecord.assignedTo}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Evidence</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedRecord.evidenceUrl ? (\n                      <div className=\"flex items-center gap-2 text-green-600\">\n                        <CheckCircle className=\"h-4 w-4\" />\n                        {selectedRecord.evidenceUrl}\n                      </div>\n                    ) : (\n                      <div className=\"text-gray-500\">No evidence uploaded</div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {selectedRecord.complianceNotes && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Compliance Notes</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedRecord.complianceNotes}\n                  </div>\n                </div>\n              )}\n\n              {selectedRecord.assetId && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Related Asset</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedRecord.assetId}\n                    {getAssetInfo(selectedRecord.assetId) && (\n                      <div className=\"text-xs text-muted-foreground\">\n                        {getAssetInfo(selectedRecord.assetId)?.brand} {getAssetInfo(selectedRecord.assetId)?.modelName}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":33903},"AutoDesignPro/client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { \n  Laptop, \n  Users, \n  MapPin, \n  Wrench, \n  Clock, \n  CheckCircle, \n  AlertTriangle,\n  TrendingUp,\n  TrendingDown,\n  Camera,\n  Fingerprint,\n  Shield,\n  DollarSign,\n  Calendar,\n  Activity,\n  Server,\n  Wifi,\n  Database,\n  AlertCircle,\n  Eye\n} from \"lucide-react\"\n\n// TypeScript interfaces\ninterface Asset {\n  assetId: string\n  assetType: string\n  brand: string\n  modelName: string\n  serialNumber: string\n  purchaseDate: string\n  purchaseCost: number\n  warrantyUntil: string | null\n  status: \"assigned\" | \"available\" | \"maintenance\" | \"retired\"\n  condition: \"excellent\" | \"good\" | \"fair\" | \"poor\"\n  locationId: number | null\n}\n\ninterface Employee {\n  id: number\n  employeeCode: string\n  firstName: string\n  lastName: string\n  email: string\n  department: string\n  position: string\n  locationId: number | null\n}\n\ninterface Assignment {\n  id: number\n  assetId: string\n  employeeId: number\n  assignedDate: string\n  returnedDate: string | null\n  notes: string | null\n}\n\ninterface Maintenance {\n  id: number\n  assetId: string\n  maintenanceType: \"preventive\" | \"corrective\" | \"warranty\"\n  description: string\n  scheduledDate: string\n  completedDate: string | null\n  cost: number | null\n  vendor: string | null\n  status: \"scheduled\" | \"in_progress\" | \"completed\" | \"cancelled\"\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n  manager: string | null\n  contactEmail: string | null\n  contactPhone: string | null\n}\n\nexport default function Dashboard() {\n  // Fetch all data for dashboard statistics\n  const { data: assets = [], isLoading: assetsLoading } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: employees = [], isLoading: employeesLoading } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  })\n\n  const { data: assignments = [], isLoading: assignmentsLoading } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n  })\n\n  const { data: maintenance = [], isLoading: maintenanceLoading } = useQuery<Maintenance[]>({\n    queryKey: [\"/api/maintenance\"],\n  })\n\n  const { data: locations = [], isLoading: locationsLoading } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Mock data for CCTV and Biometric systems (would come from API in real app)\n  const cctvSystems = 4 // Total CCTV systems\n  const cctvActive = 3 // Active systems\n  const biometricSystems = 5 // Total biometric systems\n  const biometricActive = 4 // Active systems\n  const totalCameras = 28 // Total cameras across all systems\n  const enrolledUsers = 252 // Total enrolled users in biometric systems\n\n  // Calculate comprehensive statistics\n  const totalAssets = assets.length\n  const totalEmployees = employees.length\n  const totalLocations = locations.length\n  \n  // Assignment statistics\n  const activeAssignments = assignments.filter(a => !a.returnedDate).length\n  const availableAssets = totalAssets - activeAssignments\n  const assignmentRate = totalAssets > 0 ? Math.round((activeAssignments / totalAssets) * 100) : 0\n  \n  // Maintenance statistics  \n  const maintenanceDue = maintenance.filter(m => !m.completedDate && m.status !== \"cancelled\").length\n  const maintenanceCompleted = maintenance.filter(m => m.completedDate).length\n  const maintenanceInProgress = maintenance.filter(m => !m.completedDate && m.status === \"in_progress\").length\n  \n  // Asset condition analysis\n  const assetConditions = assets.reduce((acc, asset) => {\n    acc[asset.condition] = (acc[asset.condition] || 0) + 1\n    return acc\n  }, {} as Record<string, number>)\n\n  // Asset distribution by type\n  const assetTypeDistribution = assets.reduce((acc, asset) => {\n    acc[asset.assetType] = (acc[asset.assetType] || 0) + 1\n    return acc\n  }, {} as Record<string, number>)\n\n  // Asset distribution by status\n  const assetStatusDistribution = assets.reduce((acc, asset) => {\n    acc[asset.status] = (acc[asset.status] || 0) + 1\n    return acc\n  }, {} as Record<string, number>)\n\n  // Cost analysis\n  const totalAssetValue = assets.reduce((sum, asset) => sum + (asset.purchaseCost || 0), 0)\n  const avgAssetCost = totalAssets > 0 ? totalAssetValue / totalAssets : 0\n  const maintenanceCosts = maintenance.reduce((sum, m) => sum + (m.cost || 0), 0)\n\n  // Location distribution\n  const locationDistribution = assets.reduce((acc, asset) => {\n    if (asset.locationId) {\n      const location = locations.find(l => l.id === asset.locationId)\n      if (location) {\n        const locationName = `${location.outletName}, ${location.city}`\n        acc[locationName] = (acc[locationName] || 0) + 1\n      }\n    }\n    return acc\n  }, {} as Record<string, number>)\n\n  // Recent activities (recent assignments with details)\n  const recentAssignments = assignments\n    .slice(-8)\n    .reverse()\n    .map(assignment => {\n      const asset = assets.find(a => a.assetId === assignment.assetId)\n      const employee = employees.find(e => e.id === assignment.employeeId)\n      return {\n        ...assignment,\n        asset,\n        employee\n      }\n    })\n    .filter(item => item.asset && item.employee)\n\n  // Warranty analysis\n  const currentDate = new Date()\n  const expiringSoon = assets.filter(asset => {\n    if (!asset.warrantyUntil) return false\n    const warrantyDate = new Date(asset.warrantyUntil)\n    const daysUntilExpiry = (warrantyDate.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24)\n    return daysUntilExpiry <= 90 && daysUntilExpiry > 0\n  }).length\n\n  // System health scores\n  const assetHealthScore = totalAssets > 0 ? Math.round(((totalAssets - maintenanceDue) / totalAssets) * 100) : 100\n  const cctvHealthScore = cctvSystems > 0 ? Math.round((cctvActive / cctvSystems) * 100) : 100\n  const biometricHealthScore = biometricSystems > 0 ? Math.round((biometricActive / biometricSystems) * 100) : 100\n  const overallSystemHealth = Math.round((assetHealthScore + cctvHealthScore + biometricHealthScore) / 3)\n\n  const isLoading = assetsLoading || employeesLoading || assignmentsLoading || maintenanceLoading || locationsLoading\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            {[...Array(8)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\" data-testid=\"dashboard-page\">\n      {/* Header with System Health */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"title-dashboard\">Dashboard</h1>\n          <p className=\"text-muted-foreground\">\n            Comprehensive overview of BODYCRAFT IT asset management system across {totalLocations} locations\n          </p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"text-right\">\n            <div className=\"text-sm text-muted-foreground\">System Health</div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"text-2xl font-bold\">{overallSystemHealth}%</div>\n              {overallSystemHealth >= 90 ? (\n                <CheckCircle className=\"h-6 w-6 text-green-500\" />\n              ) : overallSystemHealth >= 70 ? (\n                <AlertTriangle className=\"h-6 w-6 text-yellow-500\" />\n              ) : (\n                <AlertCircle className=\"h-6 w-6 text-red-500\" />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Enhanced Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card data-testid=\"card-total-assets\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Assets</CardTitle>\n            <Laptop className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-assets\">{totalAssets}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Worth ₹{(totalAssetValue / 100000).toFixed(1)}L • {totalLocations} locations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-assigned-assets\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Asset Utilization</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-assigned-assets\">{assignmentRate}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {activeAssignments} assigned • {availableAssets} available\n            </p>\n            <Progress value={assignmentRate} className=\"mt-2\" />\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-maintenance-status\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Maintenance</CardTitle>\n            <Wrench className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">{maintenanceDue}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Due • {maintenanceInProgress} in progress • {maintenanceCompleted} completed\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-system-health\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">System Health</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{assetHealthScore}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Asset reliability • {expiringSoon} warranties expiring\n            </p>\n            <Progress value={assetHealthScore} className=\"mt-2\" />\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Integration Systems Overview */}\n      <div className=\"grid gap-4 md:grid-cols-3 lg:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">CCTV Systems</CardTitle>\n            <Camera className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold\">{cctvActive}/{cctvSystems}</div>\n                <p className=\"text-xs text-muted-foreground\">{totalCameras} cameras active</p>\n              </div>\n              <Badge variant={cctvHealthScore >= 90 ? \"default\" : \"destructive\"}>\n                {cctvHealthScore}% uptime\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Biometric Systems</CardTitle>\n            <Fingerprint className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold\">{biometricActive}/{biometricSystems}</div>\n                <p className=\"text-xs text-muted-foreground\">{enrolledUsers} users enrolled</p>\n              </div>\n              <Badge variant={biometricHealthScore >= 90 ? \"default\" : \"destructive\"}>\n                {biometricHealthScore}% uptime\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Financial Overview</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div>\n                <div className=\"text-2xl font-bold\">₹{(maintenanceCosts / 100000).toFixed(1)}L</div>\n                <p className=\"text-xs text-muted-foreground\">Total maintenance spend</p>\n              </div>\n              <div className=\"text-xs\">\n                Avg asset cost: ₹{avgAssetCost.toLocaleString('en-IN')}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Enhanced Analytics Charts */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {/* Asset Distribution by Type */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Asset Distribution by Type</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {Object.entries(assetTypeDistribution)\n              .sort(([,a], [,b]) => (b as number) - (a as number))\n              .map(([type, count]) => (\n                <div key={type} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-purple-500 rounded\"></div>\n                    <span className=\"text-sm capitalize\">{type}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-24 bg-muted rounded-full h-2\">\n                      <div \n                        className=\"bg-purple-500 h-2 rounded-full\" \n                        style={{width: `${totalAssets > 0 ? ((count as number) / totalAssets) * 100 : 0}%`}}\n                      ></div>\n                    </div>\n                    <span className=\"text-sm font-medium w-8 text-right\">{count as number}</span>\n                  </div>\n                </div>\n              ))}\n          </CardContent>\n        </Card>\n\n        {/* Asset Status Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Asset Status Overview</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {Object.entries(assetStatusDistribution).map(([status, count]) => {\n              const percentage = totalAssets > 0 ? ((count as number) / totalAssets) * 100 : 0\n              const statusColors = {\n                assigned: \"bg-blue-500\",\n                available: \"bg-green-500\", \n                maintenance: \"bg-yellow-500\",\n                retired: \"bg-red-500\"\n              }\n              const statusColor = statusColors[status as keyof typeof statusColors] || \"bg-gray-500\"\n              \n              return (\n                <div key={status} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"outline\" className={`${statusColor.replace('bg-', 'border-')} text-xs`}>\n                      {count as number}\n                    </Badge>\n                    <span className=\"text-sm capitalize\">{status}</span>\n                  </div>\n                  <span className=\"text-sm text-muted-foreground\">\n                    {percentage.toFixed(1)}%\n                  </span>\n                </div>\n              )\n            })}\n          </CardContent>\n        </Card>\n\n        {/* Location Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Assets by Location</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {Object.entries(locationDistribution)\n              .sort(([,a], [,b]) => (b as number) - (a as number))\n              .slice(0, 5) // Show top 5 locations\n              .map(([location, count]) => (\n                <div key={location} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"h-3 w-3 text-muted-foreground\" />\n                    <span className=\"text-sm\">{location}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-16 bg-muted rounded-full h-2\">\n                      <div \n                        className=\"bg-blue-500 h-2 rounded-full\" \n                        style={{width: `${totalAssets > 0 ? ((count as number) / totalAssets) * 100 : 0}%`}}\n                      ></div>\n                    </div>\n                    <span className=\"text-sm font-medium w-6 text-right\">{count as number}</span>\n                  </div>\n                </div>\n              ))}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activities and Quick Actions */}\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        {/* Recent Activities */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Clock className=\"h-5 w-5\" />\n              Recent Activities\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {recentAssignments.length > 0 ? (\n              recentAssignments.slice(0, 6).map((item) => (\n                <div key={item.id} className=\"flex items-start gap-3 p-3 rounded-lg bg-muted/50\">\n                  <div className=\"mt-0.5\">\n                    <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  </div>\n                  <div className=\"flex-1 space-y-1\">\n                    <p className=\"text-sm font-medium\">\n                      {item.asset?.assetId} assigned to {item.employee?.firstName} {item.employee?.lastName}\n                    </p>\n                    <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                      <span>{item.asset?.brand} {item.asset?.modelName}</span>\n                      <span>•</span>\n                      <span>{new Date(item.assignedDate).toLocaleDateString('en-IN')}</span>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-sm text-muted-foreground\">No recent activities</div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Asset Condition Analysis */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Shield className=\"h-5 w-5\" />\n              Asset Condition Analysis\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {Object.entries(assetConditions)\n              .sort(([,a], [,b]) => (b as number) - (a as number))\n              .map(([condition, count]) => {\n                const percentage = totalAssets > 0 ? ((count as number) / totalAssets) * 100 : 0\n                const conditionColors = {\n                  excellent: \"bg-green-500\",\n                  good: \"bg-blue-500\",\n                  fair: \"bg-yellow-500\", \n                  poor: \"bg-red-500\"\n                }\n                const conditionColor = conditionColors[condition as keyof typeof conditionColors] || \"bg-gray-500\"\n                \n                return (\n                  <div key={condition} className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm capitalize font-medium\">{condition}</span>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {count as number} assets ({percentage.toFixed(1)}%)\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div \n                        className={`${conditionColor} h-2 rounded-full`} \n                        style={{width: `${percentage}%`}}\n                      ></div>\n                    </div>\n                  </div>\n                )\n              })}\n            \n            {expiringSoon > 0 && (\n              <div className=\"mt-4 p-3 rounded-lg bg-yellow-50 border border-yellow-200\">\n                <div className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n                  <span className=\"text-sm font-medium text-yellow-800\">\n                    {expiringSoon} asset{expiringSoon > 1 ? 's' : ''} warranty expiring within 90 days\n                  </span>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">Common tasks and management actions</p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-3 md:grid-cols-2 lg:grid-cols-4\">\n            <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center gap-2\">\n              <Laptop className=\"h-5 w-5\" />\n              <div className=\"text-center\">\n                <div className=\"font-medium\">Add Asset</div>\n                <div className=\"text-xs text-muted-foreground\">Register new equipment</div>\n              </div>\n            </Button>\n            \n            <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              <div className=\"text-center\">\n                <div className=\"font-medium\">Assign Asset</div>\n                <div className=\"text-xs text-muted-foreground\">Assign to employee</div>\n              </div>\n            </Button>\n            \n            <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center gap-2\">\n              <Wrench className=\"h-5 w-5\" />\n              <div className=\"text-center\">\n                <div className=\"font-medium\">Schedule Maintenance</div>\n                <div className=\"text-xs text-muted-foreground\">Preventive service</div>\n              </div>\n            </Button>\n            \n            <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center gap-2\">\n              <Eye className=\"h-5 w-5\" />\n              <div className=\"text-center\">\n                <div className=\"font-medium\">View Reports</div>\n                <div className=\"text-xs text-muted-foreground\">Analytics & insights</div>\n              </div>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":23150},"AutoDesignPro/client/src/pages/employees.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Users, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  User,\n  MapPin,\n  Briefcase,\n  Phone,\n  Mail,\n  Calendar,\n  Badge as BadgeIcon,\n  Building2,\n  Laptop\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { useToast } from \"@/hooks/use-toast\"\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  active: \"bg-green-500\",\n  inactive: \"bg-red-500\",\n  on_leave: \"bg-yellow-500\",\n}\n\ninterface Employee {\n  id: number\n  employeeCode: string\n  firstName: string\n  lastName: string\n  department: string\n  designation: string\n  email: string\n  phone: string\n  status: \"active\" | \"inactive\" | \"on_leave\"\n  locationId: number | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  assetType: string\n  currentUserId: number | null\n}\n\ninterface Assignment {\n  assetId: string\n  employeeId: number\n  assignedDate: string\n  returnedDate: string | null\n}\n\nexport default function EmployeesPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [departmentFilter, setDepartmentFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Fetch data\n  const { data: employees, isLoading: employeesLoading } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  })\n\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  const { data: assets } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: assignments } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n  })\n\n  // Get unique departments for filter\n  const departments = [...new Set(employees?.map(emp => emp.department) || [])]\n\n  // Filter employees\n  const filteredEmployees = employees?.filter(employee => {\n    const matchesSearch = \n      employee.employeeCode.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.department.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.designation.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === \"all\" || employee.status === statusFilter\n    const matchesDepartment = departmentFilter === \"all\" || employee.department === departmentFilter\n    const matchesLocation = locationFilter === \"all\" || employee.locationId?.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesDepartment && matchesLocation\n  }) || []\n\n  // Create employee mutation\n  const createEmployeeMutation = useMutation({\n    mutationFn: async (employeeData: any) => {\n      const response = await fetch('/api/employees', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(employeeData),\n      })\n      if (!response.ok) throw new Error('Failed to create employee')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] })\n      toast({ title: \"Success\", description: \"Employee created successfully\" })\n      setIsCreateDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create employee\", variant: \"destructive\" })\n    }\n  })\n\n  // Update employee mutation  \n  const updateEmployeeMutation = useMutation({\n    mutationFn: async ({ employeeId, data }: { employeeId: number, data: any }) => {\n      const response = await fetch(`/api/employees/${employeeId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      })\n      if (!response.ok) throw new Error('Failed to update employee')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] })\n      toast({ title: \"Success\", description: \"Employee updated successfully\" })\n      setIsEditDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update employee\", variant: \"destructive\" })\n    }\n  })\n\n  // Delete employee mutation\n  const deleteEmployeeMutation = useMutation({\n    mutationFn: async (employeeId: number) => {\n      const response = await fetch(`/api/employees/${employeeId}`, {\n        method: 'DELETE',\n      })\n      if (!response.ok) throw new Error('Failed to delete employee')\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] })\n      toast({ title: \"Success\", description: \"Employee deleted successfully\" })\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete employee\", variant: \"destructive\" })\n    }\n  })\n\n  // Helper functions\n  const getLocationName = (locationId: number | null) => {\n    if (!locationId) return \"No location assigned\"\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown location\"\n  }\n\n  const getEmployeeAssets = (employeeId: number) => {\n    const activeAssignments = assignments?.filter(\n      assignment => assignment.employeeId === employeeId && !assignment.returnedDate\n    ) || []\n    \n    return activeAssignments.map(assignment => {\n      const asset = assets?.find(a => a.assetId === assignment.assetId)\n      return asset\n    }).filter(Boolean)\n  }\n\n  const handleCreateEmployee = (event: React.FormEvent) => {\n    event.preventDefault()\n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const employeeData = {\n      employeeCode: formData.get('employeeCode'),\n      firstName: formData.get('firstName'),\n      lastName: formData.get('lastName'),\n      department: formData.get('department'),\n      designation: formData.get('designation'),\n      email: formData.get('email'),\n      phone: formData.get('phone'),\n      status: formData.get('status'),\n      locationId: formData.get('locationId') ? parseInt(formData.get('locationId') as string) : null,\n    }\n\n    createEmployeeMutation.mutate(employeeData)\n  }\n\n  const handleUpdateEmployee = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedEmployee) return\n    \n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const employeeData = {\n      firstName: formData.get('firstName'),\n      lastName: formData.get('lastName'),\n      department: formData.get('department'),\n      designation: formData.get('designation'),\n      email: formData.get('email'),\n      phone: formData.get('phone'),\n      status: formData.get('status'),\n      locationId: formData.get('locationId') ? parseInt(formData.get('locationId') as string) : null,\n    }\n\n    updateEmployeeMutation.mutate({ employeeId: selectedEmployee.id, data: employeeData })\n  }\n\n  if (employeesLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Employees</h1>\n          <p className=\"text-muted-foreground\">\n            Manage BODYCRAFT staff across {locations?.length || 0} locations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Excel\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Employee\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Employee</DialogTitle>\n                <DialogDescription>\n                  Add a new employee to the BODYCRAFT workforce\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateEmployee} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"employeeCode\">Employee Code *</Label>\n                  <Input\n                    id=\"employeeCode\"\n                    name=\"employeeCode\"\n                    placeholder=\"BFC2024001\"\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\">First Name *</Label>\n                    <Input\n                      id=\"firstName\"\n                      name=\"firstName\"\n                      placeholder=\"John\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastName\">Last Name *</Label>\n                    <Input\n                      id=\"lastName\"\n                      name=\"lastName\"\n                      placeholder=\"Doe\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"department\">Department *</Label>\n                    <Select name=\"department\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select department\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"IT\">IT</SelectItem>\n                        <SelectItem value=\"Sales\">Sales</SelectItem>\n                        <SelectItem value=\"Marketing\">Marketing</SelectItem>\n                        <SelectItem value=\"Operations\">Operations</SelectItem>\n                        <SelectItem value=\"Finance\">Finance</SelectItem>\n                        <SelectItem value=\"HR\">HR</SelectItem>\n                        <SelectItem value=\"Management\">Management</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"designation\">Designation *</Label>\n                    <Input\n                      id=\"designation\"\n                      name=\"designation\"\n                      placeholder=\"Software Engineer, Sales Manager...\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address *</Label>\n                    <Input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      placeholder=\"john.doe@bodycraft.com\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone Number *</Label>\n                    <Input\n                      id=\"phone\"\n                      name=\"phone\"\n                      placeholder=\"+91 9876543210\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"locationId\">Location</Label>\n                    <Select name=\"locationId\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select location\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {locations?.map(location => (\n                          <SelectItem key={location.id} value={location.id.toString()}>\n                            {location.outletName}, {location.city}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"status\">Status</Label>\n                    <Select name=\"status\" defaultValue=\"active\">\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"inactive\">Inactive</SelectItem>\n                        <SelectItem value=\"on_leave\">On Leave</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createEmployeeMutation.isPending}>\n                    {createEmployeeMutation.isPending ? \"Creating...\" : \"Create Employee\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Employees</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{employees?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across {departments.length} departments\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active</CardTitle>\n            <BadgeIcon className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {employees?.filter(emp => emp.status === 'active').length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently working\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">With Assets</CardTitle>\n            <Laptop className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {employees?.filter(emp => \n                assignments?.some(assignment => \n                  assignment.employeeId === emp.id && !assignment.returnedDate\n                )\n              ).length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Have assigned assets\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Departments</CardTitle>\n            <Building2 className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{departments.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Active departments\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Employees</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by Name, Employee Code, Email, Department...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  <SelectItem value=\"on_leave\">On Leave</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Department\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Departments</SelectItem>\n                  {departments.map(dept => (\n                    <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredEmployees.length} of {employees?.length || 0} employees\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Employees Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Employee</TableHead>\n                <TableHead>Department</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Contact</TableHead>\n                <TableHead>Assigned Assets</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredEmployees.map((employee) => {\n                const employeeAssets = getEmployeeAssets(employee.id)\n                return (\n                  <TableRow key={employee.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <User className=\"h-8 w-8 p-1.5 bg-muted rounded-full\" />\n                        <div>\n                          <div className=\"font-medium\">\n                            {employee.firstName} {employee.lastName}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground font-mono\">\n                            {employee.employeeCode}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <Badge variant=\"outline\">{employee.department}</Badge>\n                        <div className=\"text-sm text-muted-foreground mt-1\">\n                          {employee.designation}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className={`w-2 h-2 rounded-full ${statusColors[employee.status]}`}\n                        />\n                        <span className=\"capitalize\">{employee.status.replace('_', ' ')}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"h-3 w-3 text-muted-foreground\" />\n                        {getLocationName(employee.locationId)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center gap-1 text-sm\">\n                          <Mail className=\"h-3 w-3 text-muted-foreground\" />\n                          {employee.email}\n                        </div>\n                        <div className=\"flex items-center gap-1 text-sm\">\n                          <Phone className=\"h-3 w-3 text-muted-foreground\" />\n                          {employee.phone}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        {employeeAssets?.length > 0 ? (\n                          employeeAssets.map((asset, index) => (\n                            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                              {asset.assetId}\n                            </Badge>\n                          ))\n                        ) : (\n                          <span className=\"text-sm text-muted-foreground\">No assets</span>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedEmployee(employee)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedEmployee(employee)\n                              setIsEditDialogOpen(true)\n                            }}\n                          >\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit Employee\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem\n                            onClick={() => deleteEmployeeMutation.mutate(employee.id)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete Employee\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Employee Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Employee Details</DialogTitle>\n            <DialogDescription>\n              Complete information for {selectedEmployee?.firstName} {selectedEmployee?.lastName}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedEmployee && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Employee Code</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded font-mono\">\n                    {selectedEmployee.employeeCode}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Full Name</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedEmployee.firstName} {selectedEmployee.lastName}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Department</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedEmployee.department}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Designation</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedEmployee.designation}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Email</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedEmployee.email}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Phone</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedEmployee.phone}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded flex items-center gap-2\">\n                    <div className={`w-2 h-2 rounded-full ${statusColors[selectedEmployee.status]}`} />\n                    <span className=\"capitalize\">{selectedEmployee.status.replace('_', ' ')}</span>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Location</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {getLocationName(selectedEmployee.locationId)}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Assigned Assets</Label>\n                <div className=\"p-2 bg-muted rounded\">\n                  {getEmployeeAssets(selectedEmployee.id)?.length > 0 ? (\n                    <div className=\"flex flex-wrap gap-2\">\n                      {getEmployeeAssets(selectedEmployee.id).map((asset, index) => (\n                        <Badge key={index} variant=\"secondary\">\n                          {asset.assetId} ({asset.brand} {asset.modelName})\n                        </Badge>\n                      ))}\n                    </div>\n                  ) : (\n                    <span className=\"text-sm text-muted-foreground\">No assets assigned</span>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Employee Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Employee</DialogTitle>\n            <DialogDescription>\n              Update information for {selectedEmployee?.firstName} {selectedEmployee?.lastName}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedEmployee && (\n            <form onSubmit={handleUpdateEmployee} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-firstName\">First Name *</Label>\n                  <Input\n                    id=\"edit-firstName\"\n                    name=\"firstName\"\n                    defaultValue={selectedEmployee.firstName}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-lastName\">Last Name *</Label>\n                  <Input\n                    id=\"edit-lastName\"\n                    name=\"lastName\"\n                    defaultValue={selectedEmployee.lastName}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-department\">Department *</Label>\n                  <Select name=\"department\" defaultValue={selectedEmployee.department} required>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"IT\">IT</SelectItem>\n                      <SelectItem value=\"Sales\">Sales</SelectItem>\n                      <SelectItem value=\"Marketing\">Marketing</SelectItem>\n                      <SelectItem value=\"Operations\">Operations</SelectItem>\n                      <SelectItem value=\"Finance\">Finance</SelectItem>\n                      <SelectItem value=\"HR\">HR</SelectItem>\n                      <SelectItem value=\"Management\">Management</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-designation\">Designation *</Label>\n                  <Input\n                    id=\"edit-designation\"\n                    name=\"designation\"\n                    defaultValue={selectedEmployee.designation}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-email\">Email Address *</Label>\n                  <Input\n                    id=\"edit-email\"\n                    name=\"email\"\n                    type=\"email\"\n                    defaultValue={selectedEmployee.email}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-phone\">Phone Number *</Label>\n                  <Input\n                    id=\"edit-phone\"\n                    name=\"phone\"\n                    defaultValue={selectedEmployee.phone}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-locationId\">Location</Label>\n                  <Select name=\"locationId\" defaultValue={selectedEmployee.locationId?.toString() || \"\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select location\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {locations?.map(location => (\n                        <SelectItem key={location.id} value={location.id.toString()}>\n                          {location.outletName}, {location.city}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-status\">Status</Label>\n                  <Select name=\"status\" defaultValue={selectedEmployee.status}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"inactive\">Inactive</SelectItem>\n                      <SelectItem value=\"on_leave\">On Leave</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsEditDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateEmployeeMutation.isPending}>\n                  {updateEmployeeMutation.isPending ? \"Updating...\" : \"Update Employee\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":36261},"AutoDesignPro/client/src/pages/locations.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  MapPin, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Building2,\n  Users,\n  Laptop,\n  Phone,\n  Mail,\n  User,\n  Package,\n  BarChart3,\n  Clock\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n  address: string\n  managerName: string\n  contactDetails: string\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  assetType: string\n  status: \"available\" | \"assigned\" | \"maintenance\" | \"retired\"\n  locationId: number | null\n}\n\ninterface Employee {\n  id: number\n  employeeCode: string\n  firstName: string\n  lastName: string\n  department: string\n  locationId: number | null\n  status: \"active\" | \"inactive\" | \"on_leave\"\n}\n\ninterface Assignment {\n  assetId: string\n  employeeId: number\n  assignedDate: string\n  returnedDate: string | null\n}\n\nexport default function LocationsPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [stateFilter, setStateFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedLocation, setSelectedLocation] = useState<Location | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Fetch data\n  const { data: locations, isLoading: locationsLoading } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  const { data: assets } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: employees } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  })\n\n  const { data: assignments } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n  })\n\n  // Get unique states for filter\n  const states = [...new Set(locations?.map(loc => loc.state) || [])]\n\n  // Filter locations\n  const filteredLocations = locations?.filter(location => {\n    const matchesSearch = \n      location.outletName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      location.city.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      location.managerName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      location.address.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesState = stateFilter === \"all\" || location.state === stateFilter\n    \n    return matchesSearch && matchesState\n  }) || []\n\n  // Create location mutation\n  const createLocationMutation = useMutation({\n    mutationFn: async (locationData: any) => {\n      const response = await fetch('/api/locations', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(locationData),\n      })\n      if (!response.ok) throw new Error('Failed to create location')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/locations'] })\n      toast({ title: \"Success\", description: \"Location created successfully\" })\n      setIsCreateDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create location\", variant: \"destructive\" })\n    }\n  })\n\n  // Update location mutation  \n  const updateLocationMutation = useMutation({\n    mutationFn: async ({ locationId, data }: { locationId: number, data: any }) => {\n      const response = await fetch(`/api/locations/${locationId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      })\n      if (!response.ok) throw new Error('Failed to update location')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/locations'] })\n      toast({ title: \"Success\", description: \"Location updated successfully\" })\n      setIsEditDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update location\", variant: \"destructive\" })\n    }\n  })\n\n  // Delete location mutation\n  const deleteLocationMutation = useMutation({\n    mutationFn: async (locationId: number) => {\n      const response = await fetch(`/api/locations/${locationId}`, {\n        method: 'DELETE',\n      })\n      if (!response.ok) throw new Error('Failed to delete location')\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/locations'] })\n      toast({ title: \"Success\", description: \"Location deleted successfully\" })\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete location\", variant: \"destructive\" })\n    }\n  })\n\n  // Helper functions\n  const getLocationAssets = (locationId: number) => {\n    return assets?.filter(asset => asset.locationId === locationId) || []\n  }\n\n  const getLocationEmployees = (locationId: number) => {\n    return employees?.filter(employee => employee.locationId === locationId) || []\n  }\n\n  const getActiveAssignments = (locationId: number) => {\n    const locationEmployees = getLocationEmployees(locationId)\n    const employeeIds = locationEmployees.map(emp => emp.id)\n    return assignments?.filter(assignment => \n      employeeIds.includes(assignment.employeeId) && !assignment.returnedDate\n    ) || []\n  }\n\n  const getAssetTypeDistribution = (locationId: number) => {\n    const locationAssets = getLocationAssets(locationId)\n    const distribution: Record<string, number> = {}\n    locationAssets.forEach(asset => {\n      distribution[asset.assetType] = (distribution[asset.assetType] || 0) + 1\n    })\n    return distribution\n  }\n\n  const handleCreateLocation = (event: React.FormEvent) => {\n    event.preventDefault()\n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const locationData = {\n      outletName: formData.get('outletName'),\n      city: formData.get('city'),\n      state: formData.get('state'),\n      address: formData.get('address'),\n      managerName: formData.get('managerName'),\n      contactDetails: formData.get('contactDetails'),\n    }\n\n    createLocationMutation.mutate(locationData)\n  }\n\n  const handleUpdateLocation = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedLocation) return\n    \n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const locationData = {\n      outletName: formData.get('outletName'),\n      city: formData.get('city'),\n      state: formData.get('state'),\n      address: formData.get('address'),\n      managerName: formData.get('managerName'),\n      contactDetails: formData.get('contactDetails'),\n    }\n\n    updateLocationMutation.mutate({ locationId: selectedLocation.id, data: locationData })\n  }\n\n  if (locationsLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Locations</h1>\n          <p className=\"text-muted-foreground\">\n            Manage BODYCRAFT outlets across India with location-specific analytics\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Excel\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Location\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Location</DialogTitle>\n                <DialogDescription>\n                  Add a new BODYCRAFT outlet location\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateLocation} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"outletName\">Outlet Name *</Label>\n                    <Input\n                      id=\"outletName\"\n                      name=\"outletName\"\n                      placeholder=\"JP Nagar Outlet\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"city\">City *</Label>\n                    <Input\n                      id=\"city\"\n                      name=\"city\"\n                      placeholder=\"Bangalore\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"state\">State *</Label>\n                  <Select name=\"state\" required>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select state\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Karnataka\">Karnataka</SelectItem>\n                      <SelectItem value=\"Tamil Nadu\">Tamil Nadu</SelectItem>\n                      <SelectItem value=\"Andhra Pradesh\">Andhra Pradesh</SelectItem>\n                      <SelectItem value=\"Telangana\">Telangana</SelectItem>\n                      <SelectItem value=\"Kerala\">Kerala</SelectItem>\n                      <SelectItem value=\"Maharashtra\">Maharashtra</SelectItem>\n                      <SelectItem value=\"Gujarat\">Gujarat</SelectItem>\n                      <SelectItem value=\"Delhi\">Delhi</SelectItem>\n                      <SelectItem value=\"Punjab\">Punjab</SelectItem>\n                      <SelectItem value=\"Haryana\">Haryana</SelectItem>\n                      <SelectItem value=\"Uttar Pradesh\">Uttar Pradesh</SelectItem>\n                      <SelectItem value=\"Rajasthan\">Rajasthan</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Complete Address *</Label>\n                  <Input\n                    id=\"address\"\n                    name=\"address\"\n                    placeholder=\"123 Main Street, JP Nagar, Bangalore\"\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"managerName\">Manager Name *</Label>\n                    <Input\n                      id=\"managerName\"\n                      name=\"managerName\"\n                      placeholder=\"John Doe\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"contactDetails\">Contact Details *</Label>\n                    <Input\n                      id=\"contactDetails\"\n                      name=\"contactDetails\"\n                      placeholder=\"+91 9876543210, manager@bodycraft.com\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createLocationMutation.isPending}>\n                    {createLocationMutation.isPending ? \"Creating...\" : \"Create Location\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Outlets</CardTitle>\n            <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{locations?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across {states.length} states\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Assets</CardTitle>\n            <Package className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{assets?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Distributed across locations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Employees</CardTitle>\n            <Users className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{employees?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Working across locations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Assignments</CardTitle>\n            <Laptop className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {assignments?.filter(a => !a.returnedDate).length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently active\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Locations</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by Outlet Name, City, Manager Name...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={stateFilter} onValueChange={setStateFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"State\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All States</SelectItem>\n                  {states.map(state => (\n                    <SelectItem key={state} value={state}>{state}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredLocations.length} of {locations?.length || 0} locations\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Locations Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Location</TableHead>\n                <TableHead>Manager</TableHead>\n                <TableHead>Assets</TableHead>\n                <TableHead>Employees</TableHead>\n                <TableHead>Active Assignments</TableHead>\n                <TableHead>Contact</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredLocations.map((location) => {\n                const locationAssets = getLocationAssets(location.id)\n                const locationEmployees = getLocationEmployees(location.id)\n                const activeAssignments = getActiveAssignments(location.id)\n                \n                return (\n                  <TableRow key={location.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <Building2 className=\"h-8 w-8 p-1.5 bg-muted rounded-full\" />\n                        <div>\n                          <div className=\"font-medium\">{location.outletName}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {location.city}, {location.state}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <User className=\"h-3 w-3 text-muted-foreground\" />\n                        {location.managerName}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-col gap-1\">\n                        <Badge variant=\"outline\" className=\"w-fit\">\n                          {locationAssets.length} Total\n                        </Badge>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {locationAssets.filter(a => a.status === 'available').length} Available\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-col gap-1\">\n                        <Badge variant=\"outline\" className=\"w-fit\">\n                          {locationEmployees.length} Total\n                        </Badge>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {locationEmployees.filter(e => e.status === 'active').length} Active\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-2 h-2 rounded-full bg-green-500\" />\n                        <span>{activeAssignments.length}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {location.contactDetails}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedLocation(location)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedLocation(location)\n                              setIsEditDialogOpen(true)\n                            }}\n                          >\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit Location\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <BarChart3 className=\"mr-2 h-4 w-4\" />\n                            View Analytics\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem\n                            onClick={() => deleteLocationMutation.mutate(location.id)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete Location\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Location Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle>Location Analytics - {selectedLocation?.outletName}</DialogTitle>\n            <DialogDescription>\n              Comprehensive overview of assets, employees, and activities\n            </DialogDescription>\n          </DialogHeader>\n          {selectedLocation && (\n            <div className=\"space-y-6\">\n              {/* Basic Info */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Location Details</Label>\n                  <div className=\"text-sm p-3 bg-muted rounded\">\n                    <div className=\"font-medium\">{selectedLocation.outletName}</div>\n                    <div>{selectedLocation.city}, {selectedLocation.state}</div>\n                    <div className=\"text-xs text-muted-foreground mt-1\">\n                      {selectedLocation.address}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Management</Label>\n                  <div className=\"text-sm p-3 bg-muted rounded\">\n                    <div className=\"font-medium\">{selectedLocation.managerName}</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {selectedLocation.contactDetails}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Statistics Cards */}\n              <div className=\"grid grid-cols-4 gap-4\">\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <Package className=\"h-4 w-4 text-blue-500\" />\n                      <div>\n                        <div className=\"text-lg font-bold\">\n                          {getLocationAssets(selectedLocation.id).length}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Assets</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <Users className=\"h-4 w-4 text-green-500\" />\n                      <div>\n                        <div className=\"text-lg font-bold\">\n                          {getLocationEmployees(selectedLocation.id).length}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Employees</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <Laptop className=\"h-4 w-4 text-purple-500\" />\n                      <div>\n                        <div className=\"text-lg font-bold\">\n                          {getActiveAssignments(selectedLocation.id).length}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Active</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className=\"h-4 w-4 text-yellow-500\" />\n                      <div>\n                        <div className=\"text-lg font-bold\">\n                          {getLocationAssets(selectedLocation.id).filter(a => a.status === 'available').length}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Available</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Asset Type Distribution */}\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Asset Distribution by Type</Label>\n                <div className=\"space-y-2\">\n                  {Object.entries(getAssetTypeDistribution(selectedLocation.id)).map(([type, count]) => {\n                    const total = getLocationAssets(selectedLocation.id).length\n                    const percentage = total > 0 ? (count / total) * 100 : 0\n                    return (\n                      <div key={type} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"text-sm\">{type}</div>\n                          <Badge variant=\"secondary\">{count}</Badge>\n                        </div>\n                        <div className=\"flex items-center gap-2 w-32\">\n                          <Progress value={percentage} className=\"h-2\" />\n                          <div className=\"text-xs text-muted-foreground w-10\">\n                            {percentage.toFixed(0)}%\n                          </div>\n                        </div>\n                      </div>\n                    )\n                  })}\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Location Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Location</DialogTitle>\n            <DialogDescription>\n              Update information for {selectedLocation?.outletName}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedLocation && (\n            <form onSubmit={handleUpdateLocation} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-outletName\">Outlet Name *</Label>\n                  <Input\n                    id=\"edit-outletName\"\n                    name=\"outletName\"\n                    defaultValue={selectedLocation.outletName}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-city\">City *</Label>\n                  <Input\n                    id=\"edit-city\"\n                    name=\"city\"\n                    defaultValue={selectedLocation.city}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-state\">State *</Label>\n                <Select name=\"state\" defaultValue={selectedLocation.state} required>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Karnataka\">Karnataka</SelectItem>\n                    <SelectItem value=\"Tamil Nadu\">Tamil Nadu</SelectItem>\n                    <SelectItem value=\"Andhra Pradesh\">Andhra Pradesh</SelectItem>\n                    <SelectItem value=\"Telangana\">Telangana</SelectItem>\n                    <SelectItem value=\"Kerala\">Kerala</SelectItem>\n                    <SelectItem value=\"Maharashtra\">Maharashtra</SelectItem>\n                    <SelectItem value=\"Gujarat\">Gujarat</SelectItem>\n                    <SelectItem value=\"Delhi\">Delhi</SelectItem>\n                    <SelectItem value=\"Punjab\">Punjab</SelectItem>\n                    <SelectItem value=\"Haryana\">Haryana</SelectItem>\n                    <SelectItem value=\"Uttar Pradesh\">Uttar Pradesh</SelectItem>\n                    <SelectItem value=\"Rajasthan\">Rajasthan</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-address\">Complete Address *</Label>\n                <Input\n                  id=\"edit-address\"\n                  name=\"address\"\n                  defaultValue={selectedLocation.address}\n                  required\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-managerName\">Manager Name *</Label>\n                  <Input\n                    id=\"edit-managerName\"\n                    name=\"managerName\"\n                    defaultValue={selectedLocation.managerName}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-contactDetails\">Contact Details *</Label>\n                  <Input\n                    id=\"edit-contactDetails\"\n                    name=\"contactDetails\"\n                    defaultValue={selectedLocation.contactDetails}\n                    required\n                  />\n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsEditDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateLocationMutation.isPending}>\n                  {updateLocationMutation.isPending ? \"Updating...\" : \"Update Location\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":32640},"AutoDesignPro/client/src/pages/maintenance.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Wrench, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  Download,\n  Upload,\n  MoreHorizontal,\n  Calendar,\n  DollarSign,\n  User,\n  Package,\n  Clock,\n  CheckCircle,\n  AlertTriangle,\n  XCircle,\n  Laptop,\n  MapPin,\n  FileText,\n  Settings\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface Maintenance {\n  id: number\n  assetId: string\n  maintenanceType: \"preventive\" | \"corrective\"\n  description: string\n  scheduledDate: string\n  completedDate: string | null\n  cost: number | null\n  technicianName: string | null\n  partsReplaced: string | null\n  createdAt: string\n  updatedAt: string\n}\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  assetType: string\n  status: \"available\" | \"assigned\" | \"maintenance\" | \"retired\"\n  locationId: number | null\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\n// Status color mapping\nconst statusColors: Record<string, string> = {\n  scheduled: \"bg-blue-500\",\n  in_progress: \"bg-yellow-500\", \n  completed: \"bg-green-500\",\n  overdue: \"bg-red-500\"\n}\n\n// Maintenance type color mapping\nconst typeColors: Record<string, string> = {\n  preventive: \"bg-blue-500\",\n  corrective: \"bg-orange-500\"\n}\n\nexport default function MaintenancePage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\")\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedMaintenance, setSelectedMaintenance] = useState<Maintenance | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [isCompleteDialogOpen, setIsCompleteDialogOpen] = useState(false)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Fetch data\n  const { data: maintenance, isLoading: maintenanceLoading } = useQuery<Maintenance[]>({\n    queryKey: [\"/api/maintenance\"],\n  })\n\n  const { data: assets } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: locations } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Helper function to get maintenance status\n  const getMaintenanceStatus = (maintenance: Maintenance) => {\n    if (maintenance.completedDate) return \"completed\"\n    \n    const scheduledDate = new Date(maintenance.scheduledDate)\n    const today = new Date()\n    today.setHours(0, 0, 0, 0)\n    \n    if (scheduledDate < today) return \"overdue\"\n    if (scheduledDate.toDateString() === today.toDateString()) return \"in_progress\"\n    return \"scheduled\"\n  }\n\n  // Filter maintenance records\n  const filteredMaintenance = maintenance?.filter(record => {\n    const asset = assets?.find(a => a.assetId === record.assetId)\n    const location = locations?.find(l => l.id === asset?.locationId)\n    const status = getMaintenanceStatus(record)\n    \n    const matchesSearch = \n      record.assetId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset?.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset?.modelName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      record.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      record.technicianName?.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === \"all\" || status === statusFilter\n    const matchesType = typeFilter === \"all\" || record.maintenanceType === typeFilter\n    const matchesLocation = locationFilter === \"all\" || asset?.locationId?.toString() === locationFilter\n    \n    return matchesSearch && matchesStatus && matchesType && matchesLocation\n  }) || []\n\n  // Create maintenance mutation\n  const createMaintenanceMutation = useMutation({\n    mutationFn: async (maintenanceData: any) => {\n      const response = await fetch('/api/maintenance', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(maintenanceData),\n      })\n      if (!response.ok) throw new Error('Failed to create maintenance record')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/maintenance'] })\n      toast({ title: \"Success\", description: \"Maintenance scheduled successfully\" })\n      setIsCreateDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to schedule maintenance\", variant: \"destructive\" })\n    }\n  })\n\n  // Update maintenance mutation  \n  const updateMaintenanceMutation = useMutation({\n    mutationFn: async ({ maintenanceId, data }: { maintenanceId: number, data: any }) => {\n      const response = await fetch(`/api/maintenance/${maintenanceId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      })\n      if (!response.ok) throw new Error('Failed to update maintenance record')\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/maintenance'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Maintenance updated successfully\" })\n      setIsEditDialogOpen(false)\n      setIsCompleteDialogOpen(false)\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update maintenance\", variant: \"destructive\" })\n    }\n  })\n\n  // Delete maintenance mutation\n  const deleteMaintenanceMutation = useMutation({\n    mutationFn: async (maintenanceId: number) => {\n      const response = await fetch(`/api/maintenance/${maintenanceId}`, {\n        method: 'DELETE',\n      })\n      if (!response.ok) throw new Error('Failed to delete maintenance record')\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/maintenance'] })\n      toast({ title: \"Success\", description: \"Maintenance record deleted successfully\" })\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete maintenance record\", variant: \"destructive\" })\n    }\n  })\n\n  // Helper functions\n  const getAssetInfo = (assetId: string) => {\n    return assets?.find(asset => asset.assetId === assetId)\n  }\n\n  const getLocationName = (locationId: number | null) => {\n    if (!locationId) return \"No location\"\n    const location = locations?.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown\"\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const formatCurrency = (amount: number | null) => {\n    if (amount === null) return \"Not specified\"\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR'\n    }).format(amount)\n  }\n\n  const handleCreateMaintenance = (event: React.FormEvent) => {\n    event.preventDefault()\n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const maintenanceData = {\n      assetId: formData.get('assetId'),\n      maintenanceType: formData.get('maintenanceType'),\n      description: formData.get('description'),\n      scheduledDate: formData.get('scheduledDate'),\n      cost: formData.get('cost') ? parseFloat(formData.get('cost') as string) : null,\n      technicianName: formData.get('technicianName') || null,\n      partsReplaced: formData.get('partsReplaced') || null,\n    }\n\n    createMaintenanceMutation.mutate(maintenanceData)\n  }\n\n  const handleUpdateMaintenance = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedMaintenance) return\n    \n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const maintenanceData = {\n      description: formData.get('description'),\n      scheduledDate: formData.get('scheduledDate'),\n      cost: formData.get('cost') ? parseFloat(formData.get('cost') as string) : null,\n      technicianName: formData.get('technicianName') || null,\n      partsReplaced: formData.get('partsReplaced') || null,\n    }\n\n    updateMaintenanceMutation.mutate({ maintenanceId: selectedMaintenance.id, data: maintenanceData })\n  }\n\n  const handleCompleteMaintenance = (event: React.FormEvent) => {\n    event.preventDefault()\n    if (!selectedMaintenance) return\n    \n    const formData = new FormData(event.target as HTMLFormElement)\n    \n    const maintenanceData = {\n      completedDate: new Date().toISOString(),\n      cost: formData.get('cost') ? parseFloat(formData.get('cost') as string) : selectedMaintenance.cost,\n      technicianName: formData.get('technicianName') || selectedMaintenance.technicianName,\n      partsReplaced: formData.get('partsReplaced') || selectedMaintenance.partsReplaced,\n    }\n\n    updateMaintenanceMutation.mutate({ maintenanceId: selectedMaintenance.id, data: maintenanceData })\n  }\n\n  if (maintenanceLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const totalCost = maintenance?.reduce((sum, record) => sum + (record.cost || 0), 0) || 0\n  const pendingMaintenance = maintenance?.filter(record => !record.completedDate).length || 0\n  const overdueMaintenance = maintenance?.filter(record => getMaintenanceStatus(record) === \"overdue\").length || 0\n  const completedMaintenance = maintenance?.filter(record => record.completedDate).length || 0\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Maintenance</h1>\n          <p className=\"text-muted-foreground\">\n            Schedule and track asset maintenance across all locations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Import Excel\n          </Button>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Schedule Maintenance\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Schedule Maintenance</DialogTitle>\n                <DialogDescription>\n                  Create a new maintenance record for an asset\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateMaintenance} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assetId\">Asset *</Label>\n                    <Select name=\"assetId\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select asset\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {assets?.map(asset => (\n                          <SelectItem key={asset.assetId} value={asset.assetId}>\n                            {asset.assetId} - {asset.brand} {asset.modelName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"maintenanceType\">Type *</Label>\n                    <Select name=\"maintenanceType\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"preventive\">Preventive</SelectItem>\n                        <SelectItem value=\"corrective\">Corrective</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Description *</Label>\n                  <Textarea\n                    id=\"description\"\n                    name=\"description\"\n                    placeholder=\"Describe the maintenance work to be performed\"\n                    rows={3}\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"scheduledDate\">Scheduled Date *</Label>\n                    <Input\n                      id=\"scheduledDate\"\n                      name=\"scheduledDate\"\n                      type=\"date\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"cost\">Estimated Cost</Label>\n                    <Input\n                      id=\"cost\"\n                      name=\"cost\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"0.00\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"technicianName\">Technician Name</Label>\n                    <Input\n                      id=\"technicianName\"\n                      name=\"technicianName\"\n                      placeholder=\"John Doe, ABC Services\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"partsReplaced\">Expected Parts</Label>\n                    <Input\n                      id=\"partsReplaced\"\n                      name=\"partsReplaced\"\n                      placeholder=\"Hard drive, RAM, etc.\"\n                    />\n                  </div>\n                </div>\n\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createMaintenanceMutation.isPending}>\n                    {createMaintenanceMutation.isPending ? \"Scheduling...\" : \"Schedule Maintenance\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Maintenance</CardTitle>\n            <Wrench className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{maintenance?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              All maintenance records\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n            <Clock className=\"h-4 w-4 text-yellow-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{pendingMaintenance}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Not yet completed\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Overdue</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{overdueMaintenance}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Past due date\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Cost</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatCurrency(totalCost)}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              All maintenance costs\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Search & Filter Maintenance</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by Asset ID, Brand, Description, Technician...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                  <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"overdue\">Overdue</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-[140px]\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"preventive\">Preventive</SelectItem>\n                  <SelectItem value=\"corrective\">Corrective</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  {locations?.map(location => (\n                    <SelectItem key={location.id} value={location.id.toString()}>\n                      {location.outletName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Showing {filteredMaintenance.length} of {maintenance?.length || 0} maintenance records\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Maintenance Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Asset</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Description</TableHead>\n                <TableHead>Scheduled Date</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Cost</TableHead>\n                <TableHead>Technician</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredMaintenance.map((record) => {\n                const asset = getAssetInfo(record.assetId)\n                const status = getMaintenanceStatus(record)\n                \n                return (\n                  <TableRow key={record.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <Laptop className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">{record.assetId}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {asset?.brand} {asset?.modelName}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className={`w-2 h-2 rounded-full ${typeColors[record.maintenanceType]}`}\n                        />\n                        <span className=\"capitalize\">{record.maintenanceType}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"max-w-xs\">\n                        <div className=\"text-sm truncate\">{record.description}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {getLocationName(asset?.locationId)}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                        {formatDate(record.scheduledDate)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className={`w-2 h-2 rounded-full ${statusColors[status]}`}\n                        />\n                        <span className=\"capitalize\">{status.replace('_', ' ')}</span>\n                        {record.completedDate && (\n                          <div className=\"text-xs text-muted-foreground\">\n                            {formatDate(record.completedDate)}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {formatCurrency(record.cost)}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <User className=\"h-3 w-3 text-muted-foreground\" />\n                        {record.technicianName || \"Not assigned\"}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedMaintenance(record)\n                              setIsViewDialogOpen(true)\n                            }}\n                          >\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem\n                            onClick={() => {\n                              setSelectedMaintenance(record)\n                              setIsEditDialogOpen(true)\n                            }}\n                          >\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Edit Maintenance\n                          </DropdownMenuItem>\n                          {!record.completedDate && (\n                            <DropdownMenuItem\n                              onClick={() => {\n                                setSelectedMaintenance(record)\n                                setIsCompleteDialogOpen(true)\n                              }}\n                            >\n                              <CheckCircle className=\"mr-2 h-4 w-4\" />\n                              Mark Complete\n                            </DropdownMenuItem>\n                          )}\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem\n                            onClick={() => deleteMaintenanceMutation.mutate(record.id)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete Record\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Maintenance Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Maintenance Details</DialogTitle>\n            <DialogDescription>\n              Complete maintenance record information\n            </DialogDescription>\n          </DialogHeader>\n          {selectedMaintenance && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Asset</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedMaintenance.assetId}\n                    <div className=\"text-xs text-muted-foreground\">\n                      {getAssetInfo(selectedMaintenance.assetId)?.brand} {getAssetInfo(selectedMaintenance.assetId)?.modelName}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Type</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded capitalize\">\n                    {selectedMaintenance.maintenanceType}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Description</Label>\n                <div className=\"text-sm p-2 bg-muted rounded\">\n                  {selectedMaintenance.description}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Scheduled Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatDate(selectedMaintenance.scheduledDate)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Completed Date</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedMaintenance.completedDate ? formatDate(selectedMaintenance.completedDate) : \"Not completed\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Cost</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {formatCurrency(selectedMaintenance.cost)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Technician</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedMaintenance.technicianName || \"Not assigned\"}\n                  </div>\n                </div>\n              </div>\n\n              {selectedMaintenance.partsReplaced && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Parts Replaced</Label>\n                  <div className=\"text-sm p-2 bg-muted rounded\">\n                    {selectedMaintenance.partsReplaced}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Maintenance Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Maintenance</DialogTitle>\n            <DialogDescription>\n              Update maintenance information for {selectedMaintenance?.assetId}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedMaintenance && (\n            <form onSubmit={handleUpdateMaintenance} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-description\">Description *</Label>\n                <Textarea\n                  id=\"edit-description\"\n                  name=\"description\"\n                  defaultValue={selectedMaintenance.description}\n                  rows={3}\n                  required\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-scheduledDate\">Scheduled Date *</Label>\n                  <Input\n                    id=\"edit-scheduledDate\"\n                    name=\"scheduledDate\"\n                    type=\"date\"\n                    defaultValue={selectedMaintenance.scheduledDate}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-cost\">Cost</Label>\n                  <Input\n                    id=\"edit-cost\"\n                    name=\"cost\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    defaultValue={selectedMaintenance.cost?.toString() || \"\"}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-technicianName\">Technician Name</Label>\n                  <Input\n                    id=\"edit-technicianName\"\n                    name=\"technicianName\"\n                    defaultValue={selectedMaintenance.technicianName || \"\"}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-partsReplaced\">Parts Replaced</Label>\n                  <Input\n                    id=\"edit-partsReplaced\"\n                    name=\"partsReplaced\"\n                    defaultValue={selectedMaintenance.partsReplaced || \"\"}\n                  />\n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsEditDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateMaintenanceMutation.isPending}>\n                  {updateMaintenanceMutation.isPending ? \"Updating...\" : \"Update Maintenance\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Complete Maintenance Dialog */}\n      <Dialog open={isCompleteDialogOpen} onOpenChange={setIsCompleteDialogOpen}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Complete Maintenance</DialogTitle>\n            <DialogDescription>\n              Mark maintenance as completed for {selectedMaintenance?.assetId}\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleCompleteMaintenance} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"complete-cost\">Final Cost</Label>\n                <Input\n                  id=\"complete-cost\"\n                  name=\"cost\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  defaultValue={selectedMaintenance?.cost?.toString() || \"\"}\n                  placeholder=\"Final maintenance cost\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"complete-technicianName\">Technician Name</Label>\n                <Input\n                  id=\"complete-technicianName\"\n                  name=\"technicianName\"\n                  defaultValue={selectedMaintenance?.technicianName || \"\"}\n                  placeholder=\"Who performed the work\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"complete-partsReplaced\">Parts Replaced</Label>\n              <Textarea\n                id=\"complete-partsReplaced\"\n                name=\"partsReplaced\"\n                defaultValue={selectedMaintenance?.partsReplaced || \"\"}\n                placeholder=\"List all parts that were replaced\"\n                rows={3}\n              />\n            </div>\n\n            <DialogFooter>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setIsCompleteDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={updateMaintenanceMutation.isPending}>\n                {updateMaintenanceMutation.isPending ? \"Completing...\" : \"Mark Complete\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":36371},"AutoDesignPro/client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"AutoDesignPro/client/src/pages/reports.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  FileText, \n  Plus, \n  Search, \n  Download,\n  Calendar,\n  Filter,\n  BarChart3,\n  PieChart,\n  LineChart,\n  TrendingUp,\n  Clock,\n  Users,\n  Laptop,\n  MapPin,\n  Wrench,\n  Building,\n  Eye,\n  Edit,\n  Trash2,\n  Play,\n  Settings,\n  Save\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\"\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { useToast } from \"@/hooks/use-toast\"\n\n// TypeScript interfaces\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\ninterface ReportTemplate {\n  id: string\n  name: string\n  description: string\n  category: \"assets\" | \"maintenance\" | \"assignments\" | \"locations\" | \"compliance\"\n  icon: any\n  color: string\n  fields: string[]\n  filters: string[]\n  lastRun?: string\n  totalRuns: number\n}\n\ninterface CustomReport {\n  id: string\n  name: string\n  description: string\n  entity: \"assets\" | \"employees\" | \"assignments\" | \"maintenance\" | \"locations\"\n  fields: string[]\n  filters: Record<string, any>\n  createdDate: string\n  createdBy: string\n  lastRun?: string\n  totalRuns: number\n}\n\nexport default function ReportsPage() {\n  const [activeTab, setActiveTab] = useState(\"templates\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [selectedTemplate, setSelectedTemplate] = useState<ReportTemplate | null>(null)\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  \n  // Custom report builder state\n  const [reportName, setReportName] = useState(\"\")\n  const [reportDescription, setReportDescription] = useState(\"\")\n  const [selectedEntity, setSelectedEntity] = useState(\"\")\n  const [selectedFields, setSelectedFields] = useState<string[]>([])\n  const [reportFilters, setReportFilters] = useState<Record<string, any>>({})\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Fetch locations for filtering\n  const { data: locations = [] } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Fetch report templates from API\n  const { data: reportTemplates = [], isLoading: templatesLoading } = useQuery<ReportTemplate[]>({\n    queryKey: [\"/api/reports/templates\"],\n  })\n\n  // Fetch custom reports from API\n  const { data: customReports = [], isLoading: customReportsLoading } = useQuery<CustomReport[]>({\n    queryKey: [\"/api/reports/custom\"],\n  })\n\n  // Helper functions (moved above usage)\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case \"assets\": return Laptop\n      case \"maintenance\": return Wrench\n      case \"assignments\": return Users\n      case \"locations\": return MapPin\n      case \"compliance\": return Building\n      default: return FileText\n    }\n  }\n\n  const getCategoryColorClass = (category: string) => {\n    switch (category) {\n      case \"assets\": return \"bg-blue-500\"\n      case \"maintenance\": return \"bg-orange-500\"\n      case \"assignments\": return \"bg-green-500\"\n      case \"locations\": return \"bg-purple-500\"\n      case \"compliance\": return \"bg-red-500\"\n      default: return \"bg-gray-500\"\n    }\n  }\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case \"assets\": return \"text-blue-600 bg-blue-50\"\n      case \"maintenance\": return \"text-orange-600 bg-orange-50\"\n      case \"assignments\": return \"text-green-600 bg-green-50\"\n      case \"locations\": return \"text-purple-600 bg-purple-50\"\n      case \"compliance\": return \"text-red-600 bg-red-50\"\n      default: return \"text-gray-600 bg-gray-50\"\n    }\n  }\n\n  // Debug logging\n  console.log('Report Templates from API:', reportTemplates)\n  console.log('Custom Reports from API:', customReports)\n  \n  // Log the first template to see structure\n  if (reportTemplates.length > 0) {\n    console.log('First template structure:', reportTemplates[0])\n    console.log('First template totalRuns:', reportTemplates[0].totalRuns)\n    console.log('First template lastRun:', reportTemplates[0].lastRun)\n  }\n\n  // Add icons and colors to templates (using real data from API)\n  const enrichedTemplates = reportTemplates.map(template => ({\n    ...template,\n    icon: getCategoryIcon(template.category),\n    color: getCategoryColorClass(template.category)\n    // lastRun and totalRuns now come directly from API\n  }))\n\n  console.log('Enriched Templates:', enrichedTemplates)\n  if (enrichedTemplates.length > 0) {\n    console.log('First enriched template:', enrichedTemplates[0])\n    console.log('First enriched totalRuns:', enrichedTemplates[0].totalRuns)\n  }\n\n  // Entity field mappings for custom report builder\n  const entityFields = {\n    assets: [\n      { id: \"assetId\", label: \"Asset ID\", type: \"text\" },\n      { id: \"assetType\", label: \"Asset Type\", type: \"text\" }, \n      { id: \"brand\", label: \"Brand\", type: \"text\" },\n      { id: \"model\", label: \"Model\", type: \"text\" },\n      { id: \"serialNumber\", label: \"Serial Number\", type: \"text\" },\n      { id: \"purchaseDate\", label: \"Purchase Date\", type: \"date\" },\n      { id: \"purchaseCost\", label: \"Purchase Cost\", type: \"number\" },\n      { id: \"warrantyUntil\", label: \"Warranty Until\", type: \"date\" },\n      { id: \"status\", label: \"Status\", type: \"select\" },\n      { id: \"condition\", label: \"Condition\", type: \"select\" },\n      { id: \"location\", label: \"Location\", type: \"select\" }\n    ],\n    employees: [\n      { id: \"employeeCode\", label: \"Employee Code\", type: \"text\" },\n      { id: \"firstName\", label: \"First Name\", type: \"text\" },\n      { id: \"lastName\", label: \"Last Name\", type: \"text\" },\n      { id: \"email\", label: \"Email\", type: \"text\" },\n      { id: \"department\", label: \"Department\", type: \"select\" },\n      { id: \"position\", label: \"Position\", type: \"text\" },\n      { id: \"location\", label: \"Location\", type: \"select\" }\n    ],\n    assignments: [\n      { id: \"assetId\", label: \"Asset ID\", type: \"text\" },\n      { id: \"employeeCode\", label: \"Employee Code\", type: \"text\" },\n      { id: \"employeeName\", label: \"Employee Name\", type: \"text\" },\n      { id: \"assignedDate\", label: \"Assigned Date\", type: \"date\" },\n      { id: \"returnedDate\", label: \"Returned Date\", type: \"date\" },\n      { id: \"duration\", label: \"Duration (Days)\", type: \"number\" },\n      { id: \"notes\", label: \"Notes\", type: \"text\" }\n    ],\n    maintenance: [\n      { id: \"assetId\", label: \"Asset ID\", type: \"text\" },\n      { id: \"maintenanceType\", label: \"Maintenance Type\", type: \"select\" },\n      { id: \"description\", label: \"Description\", type: \"text\" },\n      { id: \"scheduledDate\", label: \"Scheduled Date\", type: \"date\" },\n      { id: \"completedDate\", label: \"Completed Date\", type: \"date\" },\n      { id: \"cost\", label: \"Cost\", type: \"number\" },\n      { id: \"vendor\", label: \"Vendor\", type: \"text\" },\n      { id: \"status\", label: \"Status\", type: \"select\" }\n    ],\n    locations: [\n      { id: \"outletName\", label: \"Outlet Name\", type: \"text\" },\n      { id: \"city\", label: \"City\", type: \"text\" },\n      { id: \"state\", label: \"State\", type: \"text\" },\n      { id: \"manager\", label: \"Manager\", type: \"text\" },\n      { id: \"contactEmail\", label: \"Contact Email\", type: \"text\" },\n      { id: \"contactPhone\", label: \"Contact Phone\", type: \"text\" }\n    ]\n  }\n\n  // Handle template report generation\n  const handleRunTemplate = async (template: ReportTemplate, format: string = 'excel') => {\n    try {\n      toast({\n        title: \"Generating Report\",\n        description: `Generating ${template.name}...`\n      })\n\n      const response = await fetch('/api/reports/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          templateId: template.id,\n          filters: {},\n          format: format\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to generate report: ${response.statusText}`)\n      }\n\n      if (format === 'excel' || format === 'csv') {\n        // Handle file download\n        const blob = await response.blob()\n        const url = window.URL.createObjectURL(blob)\n        const contentDisposition = response.headers.get('Content-Disposition')\n        const filename = contentDisposition \n          ? contentDisposition.split('filename=')[1]?.replace(/\"/g, '')\n          : `${template.name.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.${format}`\n        \n        const a = document.createElement('a')\n        a.href = url\n        a.download = filename\n        document.body.appendChild(a)\n        a.click()\n        window.URL.revokeObjectURL(url)\n        document.body.removeChild(a)\n\n        toast({\n          title: \"Report Downloaded\",\n          description: `${template.name} has been downloaded successfully`\n        })\n      } else {\n        // Handle JSON response\n        const data = await response.json()\n        toast({\n          title: \"Report Generated\",\n          description: `Generated ${data.rowCount} records for ${template.name}`\n        })\n      }\n    } catch (error) {\n      console.error('Error generating report:', error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate report. Please try again.\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  // Handle custom report creation\n  const handleCreateCustomReport = async () => {\n    if (!reportName || !selectedEntity) {\n      toast({\n        title: \"Error\", \n        description: \"Please fill in required fields\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    try {\n      const response = await fetch('/api/reports/custom', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: reportName,\n          description: reportDescription,\n          entity: selectedEntity,\n          fields: selectedFields,\n          filters: reportFilters\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to create custom report: ${response.statusText}`)\n      }\n\n      const newReport = await response.json()\n\n      toast({\n        title: \"Success\",\n        description: `Custom report \"${reportName}\" has been created`\n      })\n\n      // Reset form\n      setReportName(\"\")\n      setReportDescription(\"\")\n      setSelectedEntity(\"\")\n      setSelectedFields([])\n      setReportFilters({})\n      setIsCreateDialogOpen(false)\n\n      // Refetch custom reports to update the list\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports/custom\"] })\n\n    } catch (error) {\n      console.error('Error creating custom report:', error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to create custom report. Please try again.\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  // Handle custom report generation\n  const handleRunCustomReport = async (report: CustomReport, format: string = 'excel') => {\n    try {\n      toast({\n        title: \"Generating Report\",\n        description: `Generating ${report.name}...`\n      })\n\n      const response = await fetch(`/api/reports/custom/${report.id}/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          format: format\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to generate custom report: ${response.statusText}`)\n      }\n\n      if (format === 'excel') {\n        // Handle file download\n        const blob = await response.blob()\n        const url = window.URL.createObjectURL(blob)\n        const filename = `${report.name.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.xlsx`\n        \n        const a = document.createElement('a')\n        a.href = url\n        a.download = filename\n        document.body.appendChild(a)\n        a.click()\n        window.URL.revokeObjectURL(url)\n        document.body.removeChild(a)\n\n        toast({\n          title: \"Report Downloaded\", \n          description: `${report.name} has been downloaded successfully`\n        })\n      }\n    } catch (error) {\n      console.error('Error generating custom report:', error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate custom report. Please try again.\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  // Filter enriched templates based on search\n  const filteredTemplates = enrichedTemplates.filter(template => \n    template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    template.description.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  // Filter custom reports based on search\n  const filteredCustomReports = customReports.filter(report => \n    report.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    report.description.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Reports</h1>\n          <p className=\"text-muted-foreground\">\n            Generate comprehensive reports and analytics for BODYCRAFT asset management\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Clock className=\"h-4 w-4\" />\n            Scheduled Reports\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Create Custom Report\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Create Custom Report</DialogTitle>\n                <DialogDescription>\n                  Build a custom report with specific fields and filters\n                </DialogDescription>\n              </DialogHeader>\n              \n              <div className=\"space-y-6\">\n                {/* Report Basic Info */}\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"reportName\">Report Name *</Label>\n                    <Input\n                      id=\"reportName\"\n                      value={reportName}\n                      onChange={(e) => setReportName(e.target.value)}\n                      placeholder=\"Enter report name\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"reportDescription\">Description</Label>\n                    <Textarea\n                      id=\"reportDescription\"\n                      value={reportDescription}\n                      onChange={(e) => setReportDescription(e.target.value)}\n                      placeholder=\"Describe what this report will show\"\n                      rows={3}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"entity\">Data Source *</Label>\n                    <Select value={selectedEntity} onValueChange={setSelectedEntity}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select data source\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"assets\">Assets</SelectItem>\n                        <SelectItem value=\"employees\">Employees</SelectItem>\n                        <SelectItem value=\"assignments\">Assignments</SelectItem>\n                        <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                        <SelectItem value=\"locations\">Locations</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                {/* Field Selection */}\n                {selectedEntity && (\n                  <div className=\"space-y-4\">\n                    <Separator />\n                    <div>\n                      <Label className=\"text-base font-medium\">Report Fields</Label>\n                      <p className=\"text-sm text-muted-foreground\">Select which fields to include in your report</p>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-2 max-h-40 overflow-y-auto p-2 border rounded\">\n                      {entityFields[selectedEntity as keyof typeof entityFields]?.map((field) => (\n                        <label key={field.id} className=\"flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedFields.includes(field.id)}\n                            onChange={(e) => {\n                              if (e.target.checked) {\n                                setSelectedFields([...selectedFields, field.id])\n                              } else {\n                                setSelectedFields(selectedFields.filter(f => f !== field.id))\n                              }\n                            }}\n                            className=\"rounded border-gray-300\"\n                          />\n                          <span className=\"text-sm\">{field.label}</span>\n                        </label>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Filters */}\n                {selectedEntity && (\n                  <div className=\"space-y-4\">\n                    <Separator />\n                    <div>\n                      <Label className=\"text-base font-medium\">Filters</Label>\n                      <p className=\"text-sm text-muted-foreground\">Add filters to refine your report data</p>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label>Location</Label>\n                        <Select \n                          value={reportFilters.location || \"\"} \n                          onValueChange={(value) => setReportFilters({...reportFilters, location: value})}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"All locations\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"\">All Locations</SelectItem>\n                            {locations.map(location => (\n                              <SelectItem key={location.id} value={location.id.toString()}>\n                                {location.outletName}, {location.city}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label>Date Range</Label>\n                        <Select \n                          value={reportFilters.dateRange || \"\"} \n                          onValueChange={(value) => setReportFilters({...reportFilters, dateRange: value})}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"All time\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"\">All Time</SelectItem>\n                            <SelectItem value=\"last7days\">Last 7 Days</SelectItem>\n                            <SelectItem value=\"last30days\">Last 30 Days</SelectItem>\n                            <SelectItem value=\"last3months\">Last 3 Months</SelectItem>\n                            <SelectItem value=\"last6months\">Last 6 Months</SelectItem>\n                            <SelectItem value=\"lastyear\">Last Year</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <DialogFooter>\n                <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={handleCreateCustomReport}>\n                  Create Report\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Report Templates</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{enrichedTemplates.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Pre-built reports available</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Custom Reports</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{customReports.length}</div>\n            <p className=\"text-xs text-muted-foreground\">User-created reports</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Reports Run</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {enrichedTemplates.reduce((sum, r) => sum + (r.totalRuns || 0), 0) + \n               customReports.reduce((sum, r) => sum + (r.totalRuns || 0), 0)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">This month</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Export Formats</CardTitle>\n            <Download className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">3</div>\n            <p className=\"text-xs text-muted-foreground\">Excel, CSV, PDF</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search reports by name or description...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-8\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Report Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"templates\">Report Templates</TabsTrigger>\n          <TabsTrigger value=\"custom\">Custom Reports</TabsTrigger>\n        </TabsList>\n\n        {/* Report Templates Tab */}\n        <TabsContent value=\"templates\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {filteredTemplates.map((template) => {\n              const IconComponent = template.icon\n              return (\n                <Card key={template.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`p-2 rounded-lg ${template.color}`}>\n                          <IconComponent className=\"h-5 w-5 text-white\" />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg\">{template.name}</CardTitle>\n                          <Badge variant=\"outline\" className={getCategoryColor(template.category)}>\n                            {template.category}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      {template.description}\n                    </p>\n                    \n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span>Fields: {template.fields.length}</span>\n                      <span>Runs: {template.totalRuns}</span>\n                      {template.lastRun && (\n                        <span>Last: {new Date(template.lastRun).toLocaleDateString()}</span>\n                      )}\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                      <Button \n                        size=\"sm\" \n                        className=\"flex-1\"\n                        onClick={() => handleRunTemplate(template)}\n                      >\n                        <Play className=\"h-4 w-4 mr-2\" />\n                        Run Report\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => setSelectedTemplate(template)}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              )\n            })}\n          </div>\n        </TabsContent>\n\n        {/* Custom Reports Tab */}\n        <TabsContent value=\"custom\" className=\"space-y-4\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Report Name</TableHead>\n                <TableHead>Entity</TableHead>\n                <TableHead>Created</TableHead>\n                <TableHead>Last Run</TableHead>\n                <TableHead>Total Runs</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredCustomReports.map((report) => (\n                <TableRow key={report.id}>\n                  <TableCell>\n                    <div>\n                      <div className=\"font-medium\">{report.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {report.description}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\" className=\"capitalize\">\n                      {report.entity}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      {new Date(report.createdDate).toLocaleDateString()}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      by {report.createdBy}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {report.lastRun ? (\n                      <div className=\"text-sm\">\n                        {new Date(report.lastRun).toLocaleDateString()}\n                      </div>\n                    ) : (\n                      <span className=\"text-muted-foreground\">Never</span>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"secondary\">\n                      {report.totalRuns}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex gap-2\">\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Play className=\"h-4 w-4\" />\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TabsContent>\n      </Tabs>\n\n      {/* Template Details Dialog */}\n      <Dialog open={!!selectedTemplate} onOpenChange={() => setSelectedTemplate(null)}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Report Template Details</DialogTitle>\n            <DialogDescription>\n              {selectedTemplate?.description}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedTemplate && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Category</Label>\n                  <Badge variant=\"outline\" className={getCategoryColor(selectedTemplate.category)}>\n                    {selectedTemplate.category}\n                  </Badge>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Total Runs</Label>\n                  <div className=\"text-sm\">{selectedTemplate.totalRuns}</div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Included Fields</Label>\n                <div className=\"flex flex-wrap gap-1\">\n                  {selectedTemplate.fields.map(field => (\n                    <Badge key={field} variant=\"secondary\" className=\"text-xs\">\n                      {field}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Available Filters</Label>\n                <div className=\"flex flex-wrap gap-1\">\n                  {selectedTemplate.filters.map(filter => (\n                    <Badge key={filter} variant=\"outline\" className=\"text-xs\">\n                      {filter}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setSelectedTemplate(null)}>\n              Close\n            </Button>\n            <Button onClick={() => selectedTemplate && handleRunTemplate(selectedTemplate)}>\n              Run Report\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":32124},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"AutoDesignPro/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"AutoDesignPro/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"AutoDesignPro/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"AutoDesignPro/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"AutoDesignPro/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"AutoDesignPro/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"AutoDesignPro/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"AutoDesignPro/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"AutoDesignPro/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"AutoDesignPro/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"AutoDesignPro/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"AutoDesignPro/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"AutoDesignPro/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"AutoDesignPro/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"AutoDesignPro/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"AutoDesignPro/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"AutoDesignPro/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"AutoDesignPro/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"AutoDesignPro/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"AutoDesignPro/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"AutoDesignPro/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"AutoDesignPro/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"AutoDesignPro/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"AutoDesignPro/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"AutoDesignPro/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"AutoDesignPro/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"AutoDesignPro/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"AutoDesignPro/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"AutoDesignPro/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"AutoDesignPro/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"AutoDesignPro/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"AutoDesignPro/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"AutoDesignPro/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"AutoDesignPro/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"AutoDesignPro/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"AutoDesignPro/client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"AutoDesignPro/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"AutoDesignPro/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"AutoDesignPro/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"AutoDesignPro/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"AutoDesignPro/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"AutoDesignPro/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"AutoDesignPro/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"AutoDesignPro/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"AutoDesignPro/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"AutoDesignPro/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"AutoDesignPro/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/hikvision-client.ts":{"content":"import { createHash } from 'crypto';\nimport { XMLParser } from 'fast-xml-parser';\n\ninterface HikvisionConfig {\n  baseUrl: string;\n  username: string;\n  password: string;\n}\n\ninterface DigestAuthParams {\n  realm: string;\n  nonce: string;\n  qop?: string;\n  opaque?: string;\n  algorithm?: string;\n}\n\nexport class HikvisionClient {\n  private config: HikvisionConfig;\n\n  constructor(baseUrl: string, username: string, password: string) {\n    this.config = {\n      baseUrl: baseUrl.replace(/\\/$/, ''),\n      username,\n      password,\n    };\n  }\n\n  private async makeRequest(\n    endpoint: string,\n    method: 'GET' | 'POST' | 'PUT' = 'GET',\n    body?: string,\n    isRetry = false\n  ): Promise<Response> {\n    const url = `${this.config.baseUrl}${endpoint}`;\n    \n    const response = await fetch(url, {\n      method,\n      headers: {\n        'Content-Type': 'application/xml',\n      },\n      body,\n    });\n\n    if (response.status === 401 && !isRetry) {\n      const wwwAuth = response.headers.get('www-authenticate');\n      if (wwwAuth && wwwAuth.includes('Digest')) {\n        const authHeader = this.generateDigestAuth(method, endpoint, wwwAuth);\n        return fetch(url, {\n          method,\n          headers: {\n            'Content-Type': 'application/xml',\n            'Authorization': authHeader,\n          },\n          body,\n        });\n      }\n    }\n\n    return response;\n  }\n\n  private generateDigestAuth(method: string, uri: string, wwwAuth: string): string {\n    const params = this.parseDigestAuth(wwwAuth);\n    const ha1 = this.md5(`${this.config.username}:${params.realm}:${this.config.password}`);\n    const ha2 = this.md5(`${method}:${uri}`);\n    \n    let response: string;\n    if (params.qop === 'auth' || params.qop === 'auth-int') {\n      const nc = '00000001';\n      const cnonce = this.generateCnonce();\n      response = this.md5(`${ha1}:${params.nonce}:${nc}:${cnonce}:${params.qop}:${ha2}`);\n      \n      return `Digest username=\"${this.config.username}\", realm=\"${params.realm}\", nonce=\"${params.nonce}\", uri=\"${uri}\", qop=${params.qop}, nc=${nc}, cnonce=\"${cnonce}\", response=\"${response}\"${params.opaque ? `, opaque=\"${params.opaque}\"` : ''}`;\n    } else {\n      response = this.md5(`${ha1}:${params.nonce}:${ha2}`);\n      return `Digest username=\"${this.config.username}\", realm=\"${params.realm}\", nonce=\"${params.nonce}\", uri=\"${uri}\", response=\"${response}\"${params.opaque ? `, opaque=\"${params.opaque}\"` : ''}`;\n    }\n  }\n\n  private parseDigestAuth(wwwAuth: string): DigestAuthParams {\n    const params: any = {};\n    const regex = /(\\w+)[:=]\\s*\"?([^\",]+)\"?/g;\n    let match;\n    \n    while ((match = regex.exec(wwwAuth)) !== null) {\n      params[match[1]] = match[2];\n    }\n    \n    return params;\n  }\n\n  private md5(str: string): string {\n    return createHash('md5').update(str).digest('hex');\n  }\n\n  private generateCnonce(): string {\n    return Math.random().toString(36).substring(2, 15);\n  }\n\n  async getDeviceInfo(): Promise<any> {\n    const response = await this.makeRequest('/ISAPI/System/deviceInfo');\n    const text = await response.text();\n    return this.parseXmlResponse(text);\n  }\n\n  async getSystemStatus(): Promise<any> {\n    const response = await this.makeRequest('/ISAPI/System/status');\n    const text = await response.text();\n    return this.parseXmlResponse(text);\n  }\n\n  async getSnapshot(channel: number = 1): Promise<Buffer> {\n    const response = await this.makeRequest(`/ISAPI/Streaming/channels/${channel}/picture`);\n    if (!response.ok) {\n      throw new Error(`Failed to get snapshot: ${response.statusText}`);\n    }\n    const arrayBuffer = await response.arrayBuffer();\n    return Buffer.from(arrayBuffer);\n  }\n\n  getRtspUrl(channel: number = 1, streamType: 'main' | 'sub' = 'main'): string {\n    const streamId = streamType === 'main' ? `${channel}01` : `${channel}02`;\n    const port = 554;\n    const host = this.config.baseUrl.replace(/^https?:\\/\\//, '');\n    return `rtsp://${this.config.username}:${this.config.password}@${host}:${port}/Streaming/Channels/${streamId}`;\n  }\n\n  getHttpPreviewUrl(channel: number = 1, streamType: 'main' | 'sub' = 'main'): string {\n    const streamId = streamType === 'main' ? `${channel}01` : `${channel}02`;\n    return `${this.config.baseUrl}/ISAPI/Streaming/channels/${streamId}/httpPreview`;\n  }\n\n  async searchRecordings(startTime: Date, endTime: Date, channel: number = 1): Promise<any> {\n    const searchXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<CMSearchDescription>\n  <searchID>C${Date.now()}</searchID>\n  <trackList>\n    <trackID>${channel}01</trackID>\n  </trackList>\n  <timeSpanList>\n    <timeSpan>\n      <startTime>${this.formatDateTime(startTime)}</startTime>\n      <endTime>${this.formatDateTime(endTime)}</endTime>\n    </timeSpan>\n  </timeSpanList>\n  <maxResults>40</maxResults>\n  <searchResultPosition>0</searchResultPosition>\n  <metadataList>\n    <metadataDescriptor>motion</metadataDescriptor>\n  </metadataList>\n</CMSearchDescription>`;\n\n    const response = await this.makeRequest('/ISAPI/ContentMgmt/search', 'POST', searchXml);\n    const text = await response.text();\n    return this.parseXmlResponse(text);\n  }\n\n  getPlaybackUrl(startTime: Date, endTime: Date, channel: number = 1): string {\n    const trackId = `${channel}01`;\n    const start = this.formatDateTime(startTime);\n    const end = this.formatDateTime(endTime);\n    const host = this.config.baseUrl.replace(/^https?:\\/\\//, '');\n    return `rtsp://${this.config.username}:${this.config.password}@${host}:554/Streaming/tracks/${trackId}?starttime=${start}&endtime=${end}`;\n  }\n\n  async checkCameraStatus(): Promise<{ online: boolean; lastOnline?: Date }> {\n    try {\n      const response = await this.makeRequest('/ISAPI/System/status');\n      if (response.ok) {\n        return { online: true, lastOnline: new Date() };\n      }\n      return { online: false };\n    } catch (error) {\n      return { online: false };\n    }\n  }\n\n  private formatDateTime(date: Date): string {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n    return `${year}${month}${day}T${hours}${minutes}${seconds}Z`;\n  }\n\n  private parseXmlResponse(xml: string): any {\n    const parser = new XMLParser({\n      ignoreAttributes: false,\n      attributeNamePrefix: \"@_\",\n      textNodeName: \"_text\",\n      parseAttributeValue: true,\n      trimValues: true,\n    });\n    \n    try {\n      return parser.parse(xml);\n    } catch (error) {\n      console.error(\"XML parsing error:\", error);\n      return {};\n    }\n  }\n}\n","size_bytes":6756},"client/src/hooks/use-user.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  locationId: number | null;\n  status: string;\n  employeeId: number | null;\n}\n\nexport function useUser() {\n  return useQuery<{ user: User }>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n}\n","size_bytes":427},"client/src/pages/warranty.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { \n  Shield,\n  Search,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Calendar,\n  Package,\n  Edit,\n  Download,\n  Filter,\n  Clock\n} from \"lucide-react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Badge } from \"@/components/ui/badge\"\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\"\nimport { Label } from \"@/components/ui/label\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { SidebarTrigger } from \"@/components/ui/sidebar\"\n\ninterface Asset {\n  assetId: string\n  modelName: string\n  brand: string\n  serviceTag: string | null\n  assetType: string\n  purchaseDate: string | null\n  warrantyExpiry: string | null\n  status: \"available\" | \"assigned\" | \"maintenance\" | \"retired\"\n  condition: \"excellent\" | \"good\" | \"fair\" | \"poor\"\n  locationId: number | null\n  currentUserId: number | null\n}\n\ninterface Location {\n  id: number\n  outletName: string\n  city: string\n  state: string\n}\n\nexport default function WarrantyPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\")\n  const [selectedAsset, setSelectedAsset] = useState<Asset | null>(null)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [warrantyDate, setWarrantyDate] = useState(\"\")\n\n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Fetch data\n  const { data: assets = [], isLoading } = useQuery<Asset[]>({\n    queryKey: [\"/api/assets\"],\n  })\n\n  const { data: locations = [] } = useQuery<Location[]>({\n    queryKey: [\"/api/locations\"],\n  })\n\n  // Update warranty mutation\n  const updateWarrantyMutation = useMutation({\n    mutationFn: async ({ assetId, warrantyExpiry }: { assetId: string, warrantyExpiry: string | null }) => {\n      const response = await fetch(`/api/assets/${assetId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ warrantyExpiry }),\n        credentials: 'include'\n      })\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(error.message || 'Failed to update warranty')\n      }\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/assets'] })\n      toast({ title: \"Success\", description: \"Warranty information updated successfully\" })\n      setIsEditDialogOpen(false)\n      setSelectedAsset(null)\n    },\n    onError: (error: Error) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to update warranty\", \n        variant: \"destructive\" \n      })\n    }\n  })\n\n  // Calculate warranty statistics\n  const currentDate = new Date()\n  \n  const assetsWithWarranty = assets.filter(asset => asset.warrantyExpiry)\n  \n  const activeWarranties = assetsWithWarranty.filter(asset => {\n    const warrantyDate = new Date(asset.warrantyExpiry!)\n    return warrantyDate > currentDate\n  }).length\n\n  const expiredWarranties = assetsWithWarranty.filter(asset => {\n    const warrantyDate = new Date(asset.warrantyExpiry!)\n    return warrantyDate <= currentDate\n  }).length\n\n  const expiringSoon = assetsWithWarranty.filter(asset => {\n    const warrantyDate = new Date(asset.warrantyExpiry!)\n    const daysUntilExpiry = (warrantyDate.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24)\n    return daysUntilExpiry > 0 && daysUntilExpiry <= 90\n  }).length\n\n  const noWarrantyInfo = assets.filter(asset => !asset.warrantyExpiry).length\n\n  // Get warranty status\n  const getWarrantyStatus = (warrantyExpiry: string | null) => {\n    if (!warrantyExpiry) return { status: 'no-info', label: 'No Information', color: 'bg-gray-400', days: null }\n    \n    const warrantyDate = new Date(warrantyExpiry)\n    const daysUntilExpiry = (warrantyDate.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24)\n    \n    if (daysUntilExpiry < 0) {\n      return { status: 'expired', label: 'Expired', color: 'bg-red-400', days: Math.abs(Math.floor(daysUntilExpiry)) }\n    } else if (daysUntilExpiry <= 30) {\n      return { status: 'critical', label: 'Expiring Soon (30 days)', color: 'bg-orange-400', days: Math.floor(daysUntilExpiry) }\n    } else if (daysUntilExpiry <= 90) {\n      return { status: 'warning', label: 'Expiring Soon (90 days)', color: 'bg-yellow-400', days: Math.floor(daysUntilExpiry) }\n    } else {\n      return { status: 'active', label: 'Active', color: 'bg-green-400', days: Math.floor(daysUntilExpiry) }\n    }\n  }\n\n  // Get unique asset types for filter\n  const assetTypes = Array.from(new Set(assets.map(asset => asset.assetType)))\n\n  // Filter assets\n  const filteredAssets = assets.filter(asset => {\n    const warrantyStatus = getWarrantyStatus(asset.warrantyExpiry)\n    \n    const matchesSearch = \n      asset.assetId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.modelName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.brand.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = \n      statusFilter === \"all\" || \n      (statusFilter === \"active\" && warrantyStatus.status === \"active\") ||\n      (statusFilter === \"expiring-soon\" && (warrantyStatus.status === \"warning\" || warrantyStatus.status === \"critical\")) ||\n      (statusFilter === \"expired\" && warrantyStatus.status === \"expired\") ||\n      (statusFilter === \"no-info\" && warrantyStatus.status === \"no-info\")\n    \n    const matchesType = typeFilter === \"all\" || asset.assetType === typeFilter\n    \n    return matchesSearch && matchesStatus && matchesType\n  })\n\n  const handleEditWarranty = (asset: Asset) => {\n    setSelectedAsset(asset)\n    setWarrantyDate(asset.warrantyExpiry || \"\")\n    setIsEditDialogOpen(true)\n  }\n\n  const handleUpdateWarranty = (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!selectedAsset) return\n    \n    updateWarrantyMutation.mutate({\n      assetId: selectedAsset.assetId,\n      warrantyExpiry: warrantyDate || null\n    })\n  }\n\n  const getLocationName = (locationId: number | null) => {\n    if (!locationId) return \"Unassigned\"\n    const location = locations.find(loc => loc.id === locationId)\n    return location ? `${location.outletName}, ${location.city}` : \"Unknown\"\n  }\n\n  const formatDate = (dateString: string | null) => {\n    if (!dateString) return \"Not specified\"\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-6 animate-fade-in\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6 animate-fade-in\">\n      <SidebarTrigger data-testid=\"button-sidebar-toggle\" className=\"mb-4 text-white/80 hover:text-white hover:bg-white/10 rounded-md\" />\n      \n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight text-white flex items-center gap-3\">\n            <Shield className=\"h-8 w-8 text-blue-400\" />\n            Warranty Management\n          </h1>\n          <p className=\"text-white/70 mt-1\">\n            Centralized warranty tracking and lifecycle management for enterprise assets\n          </p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card className=\"glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-white/90\">Active Warranties</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{activeWarranties}</div>\n            <p className=\"text-xs text-white/60\">Currently under warranty coverage</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-white/90\">Expiring Soon</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-yellow-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-300\">{expiringSoon}</div>\n            <p className=\"text-xs text-white/60\">Expiring within 90 days</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-white/90\">Expired</CardTitle>\n            <XCircle className=\"h-4 w-4 text-red-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-300\">{expiredWarranties}</div>\n            <p className=\"text-xs text-white/60\">Warranty coverage ended</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-white/90\">No Information</CardTitle>\n            <Package className=\"h-4 w-4 text-gray-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{noWarrantyInfo}</div>\n            <p className=\"text-xs text-white/60\">Missing warranty data</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"glass-card p-4 space-y-4 border-0\">\n        <div className=\"grid gap-4 md:grid-cols-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-white/60\" />\n            <Input\n              placeholder=\"Search assets...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 bg-white/10 border-white/20 text-white placeholder:text-white/50\"\n              data-testid=\"input-search\"\n            />\n          </div>\n\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"bg-white/10 border-white/20 text-white\">\n              <SelectValue placeholder=\"Warranty Status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"active\">Active</SelectItem>\n              <SelectItem value=\"expiring-soon\">Expiring Soon</SelectItem>\n              <SelectItem value=\"expired\">Expired</SelectItem>\n              <SelectItem value=\"no-info\">No Information</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Select value={typeFilter} onValueChange={setTypeFilter}>\n            <SelectTrigger className=\"bg-white/10 border-white/20 text-white\">\n              <SelectValue placeholder=\"Asset Type\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Types</SelectItem>\n              {assetTypes.map(type => (\n                <SelectItem key={type} value={type}>{type}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          <Button variant=\"outline\" className=\"gap-2 border-white/20 text-white hover:bg-white/10\">\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Warranty Table */}\n      <Card className=\"glass-card border-0\">\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow className=\"border-white/10 hover:bg-white/5\">\n                <TableHead className=\"text-white/90\">Asset ID</TableHead>\n                <TableHead className=\"text-white/90\">Details</TableHead>\n                <TableHead className=\"text-white/90\">Purchase Date</TableHead>\n                <TableHead className=\"text-white/90\">Warranty Expiry</TableHead>\n                <TableHead className=\"text-white/90\">Status</TableHead>\n                <TableHead className=\"text-white/90\">Days Remaining</TableHead>\n                <TableHead className=\"text-white/90\">Location</TableHead>\n                <TableHead className=\"text-white/90 text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredAssets.map((asset) => {\n                const warrantyStatus = getWarrantyStatus(asset.warrantyExpiry)\n                \n                return (\n                  <TableRow key={asset.assetId} className=\"border-white/10 hover:bg-white/5\">\n                    <TableCell>\n                      <div className=\"font-mono text-white/90\">{asset.assetId}</div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium text-white/90\">{asset.brand} {asset.modelName}</div>\n                        <div className=\"text-sm text-white/60\">{asset.assetType}</div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2 text-white/80\">\n                        <Calendar className=\"h-4 w-4 text-white/60\" />\n                        {formatDate(asset.purchaseDate)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2 text-white/80\">\n                        <Clock className=\"h-4 w-4 text-white/60\" />\n                        {formatDate(asset.warrantyExpiry)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant=\"outline\" \n                        className={`${warrantyStatus.color} text-white border-0`}\n                      >\n                        {warrantyStatus.label}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-white/80\">\n                        {warrantyStatus.days !== null ? (\n                          warrantyStatus.status === 'expired' ? (\n                            <span className=\"text-red-300\">-{warrantyStatus.days} days</span>\n                          ) : (\n                            <span>{warrantyStatus.days} days</span>\n                          )\n                        ) : (\n                          <span className=\"text-white/50\">N/A</span>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm text-white/80\">{getLocationName(asset.locationId)}</div>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleEditWarranty(asset)}\n                        className=\"text-white/80 hover:text-white hover:bg-white/10\"\n                        data-testid={`button-edit-${asset.assetId}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n\n          {filteredAssets.length === 0 && (\n            <div className=\"p-8 text-center text-white/60\">\n              No assets found matching your filters\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Warranty Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Update Warranty Information</DialogTitle>\n            <DialogDescription>\n              Modify warranty expiry date for {selectedAsset?.assetId}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedAsset && (\n            <form onSubmit={handleUpdateWarranty} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Asset Details</Label>\n                <div className=\"p-3 rounded-lg bg-muted\">\n                  <div className=\"font-medium\">{selectedAsset.brand} {selectedAsset.modelName}</div>\n                  <div className=\"text-sm text-muted-foreground\">{selectedAsset.assetType}</div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"warranty-date\">Warranty Expiry Date</Label>\n                <Input\n                  id=\"warranty-date\"\n                  type=\"date\"\n                  value={warrantyDate}\n                  onChange={(e) => setWarrantyDate(e.target.value)}\n                  data-testid=\"input-warranty-date\"\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  Leave empty to remove warranty information\n                </p>\n              </div>\n\n              <DialogFooter>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsEditDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\"\n                  disabled={updateWarrantyMutation.isPending}\n                  data-testid=\"button-update-warranty\"\n                >\n                  {updateWarrantyMutation.isPending ? \"Updating...\" : \"Update Warranty\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","size_bytes":18749},"client/src/pages/financial-overview.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertInvoiceSchema, type Invoice, type InsertInvoice } from \"@shared/schema\";\nimport { Search, Plus, Download, Trash2, DollarSign, FileText, Clock, CheckCircle, X, Upload, ChevronDown, ChevronUp, XCircle } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { getSignedUploadUrl } from \"@/lib/objectStorage\";\n\nexport default function FinancialOverview() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState<string>(\"all\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);\n  const [uploadedFileUrl, setUploadedFileUrl] = useState<string>(\"\");\n  const [expandedInvoiceId, setExpandedInvoiceId] = useState<number | null>(null);\n\n  const { data: invoices = [], isLoading } = useQuery<Invoice[]>({\n    queryKey: ['/api/invoices'],\n  });\n\n  const form = useForm<InsertInvoice>({\n    resolver: zodResolver(insertInvoiceSchema),\n    defaultValues: {\n      invoiceNumber: \"\",\n      invoiceDate: format(new Date(), \"yyyy-MM-dd\"),\n      amount: \"0\",\n      category: \"hardware\",\n      vendorName: \"\",\n      paymentStatus: \"unpaid\",\n      description: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertInvoice) => {\n      return await apiRequest('POST', '/api/invoices', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      toast({\n        title: \"Success\",\n        description: \"Invoice created successfully\",\n      });\n      setCreateDialogOpen(false);\n      form.reset();\n      setUploadedFileUrl(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest('DELETE', `/api/invoices/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      toast({\n        title: \"Success\",\n        description: \"Invoice deleted successfully\",\n      });\n      setDeleteDialogOpen(false);\n      setSelectedInvoice(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      return await apiRequest('PATCH', `/api/invoices/${id}`, { paymentStatus: status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      toast({\n        title: \"Success\",\n        description: \"Payment status updated successfully\",\n      });\n    },\n  });\n\n\n  const filteredInvoices = invoices.filter((invoice) => {\n    const matchesSearch = \n      invoice.invoiceNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (invoice.vendorName || \"\").toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (invoice.description || \"\").toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesCategory = categoryFilter === \"all\" || invoice.category === categoryFilter;\n    const matchesStatus = statusFilter === \"all\" || invoice.paymentStatus === statusFilter;\n    \n    return matchesSearch && matchesCategory && matchesStatus;\n  });\n\n  // Calculate statistics\n  const totalAmount = invoices.reduce((sum, inv) => sum + parseFloat(inv.amount), 0);\n  const paidAmount = invoices.filter(inv => inv.paymentStatus === \"paid\").reduce((sum, inv) => sum + parseFloat(inv.amount), 0);\n  const pendingAmount = invoices.filter(inv => inv.paymentStatus === \"unpaid\" || inv.paymentStatus === \"pending\").reduce((sum, inv) => sum + parseFloat(inv.amount), 0);\n  const totalInvoices = invoices.length;\n  const paidCount = invoices.filter(inv => inv.paymentStatus === \"paid\").length;\n  const pendingCount = invoices.filter(inv => inv.paymentStatus === \"unpaid\" || inv.paymentStatus === \"pending\").length;\n\n  const onSubmit = (data: InsertInvoice) => {\n    const invoiceData = {\n      ...data,\n      fileUrl: uploadedFileUrl || undefined,\n    };\n    createMutation.mutate(invoiceData);\n  };\n\n  const handleFileUpload = async () => {\n    const fileName = `invoice-${Date.now()}`;\n    return await getSignedUploadUrl(fileName);\n  };\n\n  const handleUploadComplete = (result: any) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const fileUrl = uploadedFile.uploadURL.split('?')[0]; // Remove query params\n      setUploadedFileUrl(fileUrl);\n      toast({\n        title: \"Success\",\n        description: \"File uploaded successfully\",\n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      paid: { variant: \"default\" as const, icon: CheckCircle, className: \"bg-green-500/10 text-green-600 dark:text-green-400 border-green-500/20\" },\n      unpaid: { variant: \"destructive\" as const, icon: X, className: \"bg-red-500/10 text-red-600 dark:text-red-400 border-red-500/20\" },\n      pending: { variant: \"secondary\" as const, icon: Clock, className: \"bg-yellow-500/10 text-yellow-600 dark:text-yellow-400 border-yellow-500/20\" },\n      overdue: { variant: \"destructive\" as const, icon: X, className: \"bg-red-500/10 text-red-600 dark:text-red-400 border-red-500/20\" },\n    };\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n    const Icon = config.icon;\n    \n    return (\n      <Badge variant={config.variant} className={config.className}>\n        <Icon className=\"h-3 w-3 mr-1\" />\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <SidebarTrigger data-testid=\"button-sidebar-toggle\" className=\"mb-4 text-white/80 hover:text-white hover:bg-white/10 rounded-md\" />\n      \n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Financial Overview</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">Manage invoices and track financial data</p>\n        </div>\n        <Button onClick={() => setCreateDialogOpen(true)} className=\"bg-purple-600 hover:bg-purple-700\" data-testid=\"button-create-invoice\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Invoice\n        </Button>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card className=\"glass-card border-0\" data-testid=\"card-total-amount\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Amount</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\" data-testid=\"text-total-amount\">₹{totalAmount.toLocaleString('en-IN')}</div>\n            <p className=\"text-xs text-muted-foreground\">{totalInvoices} total invoices</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0\" data-testid=\"card-paid-amount\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Paid Amount</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\" data-testid=\"text-paid-amount\">₹{paidAmount.toLocaleString('en-IN')}</div>\n            <p className=\"text-xs text-muted-foreground\">{paidCount} paid invoices</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0\" data-testid=\"card-pending-amount\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Amount</CardTitle>\n            <Clock className=\"h-4 w-4 text-yellow-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\" data-testid=\"text-pending-amount\">₹{pendingAmount.toLocaleString('en-IN')}</div>\n            <p className=\"text-xs text-muted-foreground\">{pendingCount} pending invoices</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card border-0\" data-testid=\"card-invoice-count\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Invoices</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white/90\" data-testid=\"text-invoice-count\">{totalInvoices}</div>\n            <p className=\"text-xs text-muted-foreground\">All time records</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <Card className=\"glass-card border-0\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by invoice number, vendor, or description...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 backdrop-blur-sm border-border/40\"\n                data-testid=\"input-search-invoice\"\n              />\n            </div>\n            <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n              <SelectTrigger className=\"w-full md:w-[200px] backdrop-blur-sm border-border/40\" data-testid=\"select-category-filter\">\n                <SelectValue placeholder=\"All Categories\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                <SelectItem value=\"hardware\">Hardware</SelectItem>\n                <SelectItem value=\"software\">Software</SelectItem>\n                <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                <SelectItem value=\"repairs\">Repairs</SelectItem>\n                <SelectItem value=\"internet\">Internet</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full md:w-[200px] backdrop-blur-sm border-border/40\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"paid\">Paid</SelectItem>\n                <SelectItem value=\"unpaid\">Unpaid</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"overdue\">Overdue</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Invoices Table */}\n      <Card className=\"glass-card border-0\">\n        <CardContent className=\"p-0 table-container-stable\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Invoice Details</TableHead>\n                <TableHead>Vendor</TableHead>\n                <TableHead>Category</TableHead>\n                <TableHead>Amount</TableHead>\n                <TableHead>Status</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {isLoading ? (\n                <TableRow>\n                  <TableCell colSpan={5} className=\"text-center py-12 text-muted-foreground\">\n                    <FileText className=\"mx-auto h-12 w-12 mb-4 opacity-40\" />\n                    <p className=\"text-lg font-medium\">Loading invoices...</p>\n                  </TableCell>\n                </TableRow>\n              ) : filteredInvoices.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={5} className=\"text-center py-12 text-muted-foreground\">\n                    <FileText className=\"mx-auto h-12 w-12 mb-4 opacity-40\" />\n                    <p className=\"text-lg font-medium mb-1\">No invoices found</p>\n                    <p className=\"text-sm\">\n                      {searchTerm || categoryFilter !== \"all\" || statusFilter !== \"all\" \n                        ? \"Try adjusting your filters\" \n                        : \"Create your first invoice to get started\"}\n                    </p>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                filteredInvoices.flatMap((invoice) => {\n                  const isExpanded = expandedInvoiceId === invoice.id;\n                  const rows = [\n                    <TableRow\n                      key={`main-${invoice.id}`}\n                      onClick={() => setExpandedInvoiceId(isExpanded ? null : invoice.id)}\n                      className=\"hover:bg-muted/20 transition-all duration-150 border-b border-border/30 group cursor-pointer\"\n                      data-testid={`row-invoice-${invoice.id}`}\n                    >\n                      {/* Invoice Details with Chevron */}\n                      <TableCell className=\"py-3 px-4\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"flex items-center justify-center w-8 h-8 bg-muted/50 rounded-full group-hover:bg-muted transition-colors\">\n                            {isExpanded ? (\n                              <ChevronUp className=\"h-4 w-4\" />\n                            ) : (\n                              <ChevronDown className=\"h-4 w-4\" />\n                            )}\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"p-2 rounded-lg bg-primary/10 text-primary flex-shrink-0 group-hover:bg-primary/15 transition-colors\">\n                              <FileText className=\"h-4 w-4\" />\n                            </div>\n                            <div className=\"min-w-0\">\n                              <div className=\"font-semibold text-sm text-foreground\" data-testid={`text-invoice-number-${invoice.id}`}>\n                                {invoice.invoiceNumber}\n                              </div>\n                              <p className=\"text-sm text-muted-foreground truncate\">\n                                {format(new Date(invoice.invoiceDate), \"MMM dd, yyyy\")}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      </TableCell>\n\n                      {/* Vendor */}\n                      <TableCell className=\"py-3 px-3\">\n                        <span className=\"text-sm font-medium truncate\">\n                          {invoice.vendorName || \"—\"}\n                        </span>\n                      </TableCell>\n\n                      {/* Category */}\n                      <TableCell className=\"py-3 px-3\">\n                        <span className=\"text-sm font-medium capitalize\">\n                          {invoice.category}\n                        </span>\n                      </TableCell>\n\n                      {/* Amount */}\n                      <TableCell className=\"py-3 px-3\">\n                        <span className=\"text-sm font-bold\">\n                          ₹{parseFloat(invoice.amount).toLocaleString('en-IN')}\n                        </span>\n                      </TableCell>\n\n                      {/* Status */}\n                      <TableCell className=\"py-3 px-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`w-2 h-2 rounded-full ${\n                            invoice.paymentStatus === 'paid' ? 'bg-green-500' :\n                            invoice.paymentStatus === 'pending' ? 'bg-yellow-500' :\n                            invoice.paymentStatus === 'overdue' ? 'bg-red-500' :\n                            'bg-red-400'\n                          }`} />\n                          <span className=\"text-sm font-medium capitalize\" data-testid={`text-status-${invoice.id}`}>\n                            {invoice.paymentStatus}\n                          </span>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ];\n\n                  if (isExpanded) {\n                    rows.push(\n                      <TableRow key={`expanded-${invoice.id}`} className=\"bg-muted/10 hover:bg-muted/10\">\n                        <TableCell colSpan={5} className=\"p-6\">\n                          <div className=\"grid grid-cols-3 gap-6\">\n                            {/* Column 1 - Invoice Information */}\n                            <div className=\"space-y-4\">\n                              <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Invoice Information</h4>\n                              <div>\n                                <Label className=\"text-xs text-muted-foreground\">Invoice Number</Label>\n                                <p className=\"text-sm font-medium mt-1\">{invoice.invoiceNumber}</p>\n                              </div>\n                              <div>\n                                <Label className=\"text-xs text-muted-foreground\">Date</Label>\n                                <p className=\"text-sm font-medium mt-1\">{format(new Date(invoice.invoiceDate), \"MMMM dd, yyyy\")}</p>\n                              </div>\n                              <div>\n                                <Label className=\"text-xs text-muted-foreground\">Category</Label>\n                                <p className=\"text-sm font-medium mt-1 capitalize\">{invoice.category}</p>\n                              </div>\n                              <div>\n                                <Label className=\"text-xs text-muted-foreground\">Vendor</Label>\n                                <p className=\"text-sm font-medium mt-1\">{invoice.vendorName || \"—\"}</p>\n                              </div>\n                            </div>\n\n                            {/* Column 2 - Payment Details */}\n                            <div className=\"space-y-4\">\n                              <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Payment Details</h4>\n                              <div>\n                                <Label className=\"text-xs text-muted-foreground\">Amount</Label>\n                                <p className=\"text-sm font-bold mt-1\">₹{parseFloat(invoice.amount).toLocaleString('en-IN')}</p>\n                              </div>\n                              <div>\n                                <Label className=\"text-xs text-muted-foreground\">Payment Status</Label>\n                                <div className=\"mt-1\">\n                                  {getStatusBadge(invoice.paymentStatus)}\n                                </div>\n                              </div>\n                              <div>\n                                <Label className=\"text-xs text-muted-foreground\">Description</Label>\n                                <p className=\"text-sm mt-1\">{invoice.description || \"—\"}</p>\n                              </div>\n                            </div>\n\n                            {/* Column 3 - File & Metadata */}\n                            <div className=\"space-y-4\">\n                              <h4 className=\"font-semibold text-sm uppercase tracking-wide text-muted-foreground\">Attachments & Info</h4>\n                              <div>\n                                <Label className=\"text-xs text-muted-foreground\">Attached File</Label>\n                                {invoice.fileUrl ? (\n                                  <div className=\"mt-1\">\n                                    <a\n                                      href={invoice.fileUrl}\n                                      target=\"_blank\"\n                                      rel=\"noopener noreferrer\"\n                                      className=\"text-sm text-primary hover:underline flex items-center gap-1\"\n                                      onClick={(e) => e.stopPropagation()}\n                                    >\n                                      <Download className=\"h-3 w-3\" />\n                                      Download File\n                                    </a>\n                                  </div>\n                                ) : (\n                                  <p className=\"text-sm mt-1 text-muted-foreground\">No file attached</p>\n                                )}\n                              </div>\n                              <div>\n                                <Label className=\"text-xs text-muted-foreground\">Created At</Label>\n                                <p className=\"text-sm mt-1\">{invoice.createdAt ? format(new Date(invoice.createdAt), \"MMM dd, yyyy HH:mm\") : \"—\"}</p>\n                              </div>\n                              <div>\n                                <Label className=\"text-xs text-muted-foreground\">Last Updated</Label>\n                                <p className=\"text-sm mt-1\">{invoice.updatedAt ? format(new Date(invoice.updatedAt), \"MMM dd, yyyy HH:mm\") : \"—\"}</p>\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Actions Section */}\n                          <div className=\"flex flex-wrap gap-2 mt-6 pt-4 border-t border-border/50\">\n                            {/* Status Change Buttons - Only show relevant options based on current status */}\n                            {invoice.paymentStatus !== \"paid\" && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  updateStatusMutation.mutate({\n                                    id: invoice.id,\n                                    status: \"paid\"\n                                  });\n                                }}\n                                className=\"text-green-600 hover:text-green-700 hover:bg-green-50 dark:hover:bg-green-900/20\"\n                                data-testid={`button-mark-paid-${invoice.id}`}\n                              >\n                                <CheckCircle className=\"mr-2 h-4 w-4\" />\n                                Mark as Paid\n                              </Button>\n                            )}\n                            \n                            {invoice.paymentStatus !== \"pending\" && invoice.paymentStatus !== \"paid\" && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  updateStatusMutation.mutate({\n                                    id: invoice.id,\n                                    status: \"pending\"\n                                  });\n                                }}\n                                className=\"text-yellow-600 hover:text-yellow-700 hover:bg-yellow-50 dark:hover:bg-yellow-900/20\"\n                                data-testid={`button-mark-pending-${invoice.id}`}\n                              >\n                                <Clock className=\"mr-2 h-4 w-4\" />\n                                Mark as Pending\n                              </Button>\n                            )}\n                            \n                            {invoice.paymentStatus !== \"unpaid\" && invoice.paymentStatus !== \"paid\" && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  updateStatusMutation.mutate({\n                                    id: invoice.id,\n                                    status: \"unpaid\"\n                                  });\n                                }}\n                                className=\"text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-900/20\"\n                                data-testid={`button-mark-unpaid-${invoice.id}`}\n                              >\n                                <XCircle className=\"mr-2 h-4 w-4\" />\n                                Mark as Unpaid\n                              </Button>\n                            )}\n\n                            {/* Download File Button */}\n                            {invoice.fileUrl && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  window.open(invoice.fileUrl!, '_blank');\n                                }}\n                                data-testid={`button-download-${invoice.id}`}\n                              >\n                                <Download className=\"mr-2 h-4 w-4\" />\n                                Download File\n                              </Button>\n                            )}\n\n                            {/* Delete Button */}\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                setSelectedInvoice(invoice);\n                                setDeleteDialogOpen(true);\n                              }}\n                              data-testid={`button-delete-${invoice.id}`}\n                            >\n                              <Trash2 className=\"mr-2 h-4 w-4\" />\n                              Delete Invoice\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  }\n\n                  return rows;\n                })\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Create Invoice Dialog */}\n      <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n        <DialogContent className=\"max-w-2xl bg-white dark:bg-gray-800 max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-gray-900 dark:text-white\">Add New Invoice</DialogTitle>\n            <DialogDescription className=\"text-gray-600 dark:text-gray-400\">\n              Create a new invoice record with optional file attachment\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"invoiceNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">Invoice Number *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"INV-2024-001\" className=\"bg-white dark:bg-gray-900\" data-testid=\"input-invoice-number\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"invoiceDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">Invoice Date *</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"date\" className=\"bg-white dark:bg-gray-900\" data-testid=\"input-invoice-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"vendorName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">Vendor</FormLabel>\n                      <FormControl>\n                        <Input {...field} value={field.value || \"\"} placeholder=\"Dell Technologies\" className=\"bg-white dark:bg-gray-900\" data-testid=\"input-vendor\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"amount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">Amount (₹) *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"number\" \n                          step=\"0.01\"\n                          onChange={(e) => field.onChange(e.target.value)}\n                          placeholder=\"50000\" \n                          className=\"bg-white dark:bg-gray-900\" \n                          data-testid=\"input-amount\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"category\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">Category *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"bg-white dark:bg-gray-900\" data-testid=\"select-category\">\n                            <SelectValue placeholder=\"Select category\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"hardware\">Hardware</SelectItem>\n                          <SelectItem value=\"software\">Software</SelectItem>\n                          <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                          <SelectItem value=\"other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"paymentStatus\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">Payment Status *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"bg-white dark:bg-gray-900\" data-testid=\"select-payment-status\">\n                            <SelectValue placeholder=\"Select status\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"paid\">Paid</SelectItem>\n                          <SelectItem value=\"unpaid\">Unpaid</SelectItem>\n                          <SelectItem value=\"pending\">Pending</SelectItem>\n                          <SelectItem value=\"overdue\">Overdue</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700 dark:text-gray-300\">Description *</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"Invoice description\" className=\"bg-white dark:bg-gray-900\" data-testid=\"input-description\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"space-y-2\">\n                <FormLabel className=\"text-gray-700 dark:text-gray-300\">Invoice File (Optional)</FormLabel>\n                <ObjectUploader\n                  maxNumberOfFiles={1}\n                  maxFileSize={10485760}\n                  onGetUploadParameters={handleFileUpload}\n                  onComplete={handleUploadComplete}\n                  buttonClassName=\"w-full bg-purple-600 hover:bg-purple-700\"\n                >\n                  <Upload className=\"h-4 w-4 mr-2\" />\n                  Upload Invoice File\n                </ObjectUploader>\n                {uploadedFileUrl && (\n                  <p className=\"text-sm text-green-600 dark:text-green-400\">File uploaded successfully</p>\n                )}\n              </div>\n\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setCreateDialogOpen(false);\n                    form.reset();\n                    setUploadedFileUrl(\"\");\n                  }}\n                  className=\"border-gray-300 dark:border-gray-600\"\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending}\n                  className=\"bg-purple-600 hover:bg-purple-700\"\n                  data-testid=\"button-submit\"\n                >\n                  {createMutation.isPending ? \"Creating...\" : \"Create Invoice\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <DialogContent className=\"bg-white dark:bg-gray-800\">\n          <DialogHeader>\n            <DialogTitle className=\"text-gray-900 dark:text-white\">Delete Invoice</DialogTitle>\n            <DialogDescription className=\"text-gray-600 dark:text-gray-400\">\n              Are you sure you want to delete invoice {selectedInvoice?.invoiceNumber}? This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setDeleteDialogOpen(false);\n                setSelectedInvoice(null);\n              }}\n              className=\"border-gray-300 dark:border-gray-600\"\n              data-testid=\"button-cancel-delete\"\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => selectedInvoice && deleteMutation.mutate(selectedInvoice.id)}\n              disabled={deleteMutation.isPending}\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteMutation.isPending ? \"Deleting...\" : \"Delete\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":38057},"client/src/pages/compliance-analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  BarChart, Bar, LineChart, Line, PieChart, Pie, Cell,\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer \n} from \"recharts\"\nimport {\n  TrendingUp, TrendingDown, AlertCircle, CheckCircle, Clock, \n  BarChart3, PieChart as PieChartIcon, Activity\n} from \"lucide-react\"\n\nconst COLORS = {\n  completed: '#10b981',\n  pending: '#f59e0b',\n  overdue: '#ef4444',\n  critical: '#dc2626',\n  high: '#f97316',\n  medium: '#eab308',\n  low: '#84cc16',\n}\n\ninterface AnalyticsData {\n  summary: {\n    totalTasks: number\n    completedTasks: number\n    pendingTasks: number\n    overdueTasks: number\n    complianceRate: number\n  }\n  statusDistribution: Record<string, number>\n  priorityDistribution: Record<string, number>\n  typeDistribution: Record<string, number>\n  upcomingTasks: any[]\n  trends: { date: string; completed: number }[]\n}\n\nexport default function ComplianceAnalyticsPage() {\n  const { data: analytics, isLoading } = useQuery<AnalyticsData>({\n    queryKey: [\"/api/compliance/analytics\"],\n  })\n\n  if (isLoading || !analytics) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    )\n  }\n\n  const { summary, statusDistribution, priorityDistribution, typeDistribution, upcomingTasks, trends } = analytics\n\n  // Prepare chart data\n  const statusData = Object.entries(statusDistribution).map(([name, value]) => ({\n    name: name.charAt(0).toUpperCase() + name.slice(1),\n    value,\n  }))\n\n  const priorityData = Object.entries(priorityDistribution).map(([name, value]) => ({\n    name: name.charAt(0).toUpperCase() + name.slice(1),\n    value,\n  }))\n\n  const typeData = Object.entries(typeDistribution).map(([name, value]) => ({\n    name: name.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' '),\n    tasks: value,\n  }))\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Compliance Analytics</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Comprehensive insights and trends for compliance management\n          </p>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-5\">\n        <Card data-testid=\"card-total-tasks\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Tasks</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{summary.totalTasks}</div>\n            <p className=\"text-xs text-muted-foreground\">All compliance tasks</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-completed\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Completed</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{summary.completedTasks}</div>\n            <p className=\"text-xs text-muted-foreground\">Successfully done</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-pending\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n            <Clock className=\"h-4 w-4 text-yellow-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">{summary.pendingTasks}</div>\n            <p className=\"text-xs text-muted-foreground\">In progress</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-overdue\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Overdue</CardTitle>\n            <AlertCircle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{summary.overdueTasks}</div>\n            <p className=\"text-xs text-muted-foreground\">Needs attention</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-compliance-rate\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Compliance Rate</CardTitle>\n            <Activity className=\"h-4 w-4 text-primary\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\">{summary.complianceRate}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {summary.complianceRate >= 80 ? (\n                <span className=\"flex items-center gap-1 text-green-600\">\n                  <TrendingUp className=\"h-3 w-3\" /> Excellent\n                </span>\n              ) : (\n                <span className=\"flex items-center gap-1 text-red-600\">\n                  <TrendingDown className=\"h-3 w-3\" /> Needs improvement\n                </span>\n              )}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Section */}\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {/* Status Distribution */}\n        <Card data-testid=\"card-status-distribution\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <PieChartIcon className=\"h-5 w-5\" />\n              Status Distribution\n            </CardTitle>\n            <CardDescription>Task breakdown by status</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={statusData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ name, value }) => `${name}: ${value}`}\n                  outerRadius={100}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {statusData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[entry.name.toLowerCase() as keyof typeof COLORS]} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Priority Distribution */}\n        <Card data-testid=\"card-priority-distribution\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BarChart3 className=\"h-5 w-5\" />\n              Priority Distribution\n            </CardTitle>\n            <CardDescription>Tasks by priority level</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={priorityData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"value\" fill=\"#8b5cf6\" radius={[8, 8, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Task Type Distribution */}\n        <Card data-testid=\"card-type-distribution\" className=\"md:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BarChart3 className=\"h-5 w-5\" />\n              Task Type Distribution\n            </CardTitle>\n            <CardDescription>Breakdown by compliance task type</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={typeData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"tasks\" fill=\"#06b6d4\" radius={[8, 8, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Compliance Trends */}\n        <Card data-testid=\"card-compliance-trends\" className=\"md:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Activity className=\"h-5 w-5\" />\n              Compliance Trends (Last 30 Days)\n            </CardTitle>\n            <CardDescription>Task completion over time</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={trends}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" tick={{ fontSize: 12 }} />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey=\"completed\" stroke=\"#10b981\" strokeWidth={2} />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Upcoming Tasks */}\n      <Card data-testid=\"card-upcoming-tasks\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Clock className=\"h-5 w-5\" />\n            Upcoming Deadlines (Next 7 Days)\n          </CardTitle>\n          <CardDescription>Tasks requiring attention soon</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {upcomingTasks.length > 0 ? (\n            <div className=\"space-y-3\">\n              {upcomingTasks.map((task, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-3 rounded-lg border bg-card\"\n                  data-testid={`upcoming-task-${index}`}\n                >\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium\">{task.taskName}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {task.taskType.replace('_', ' ').split(' ').map((w: string) => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Badge variant={task.priority === 'critical' ? 'destructive' : 'secondary'}>\n                      {task.priority}\n                    </Badge>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {new Date(task.dueDate).toLocaleDateString('en-IN', {\n                        day: '2-digit',\n                        month: 'short',\n                        year: 'numeric'\n                      })}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-center text-muted-foreground py-8\">No upcoming deadlines in the next 7 days</p>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":11503},"server/ai-orchestrator.ts":{"content":"import OpenAI from 'openai';\nimport type { IStorage } from './storage';\nimport type { \n  InsertComplianceSignal, \n  InsertComplianceRiskScore,\n  InsertAutomationRun,\n  InsertAiRecommendation,\n  InsertComplianceTask,\n  InsertComplianceAssignmentQueue\n} from '@shared/schema';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || '',\n});\n\ninterface RiskFactors {\n  assetAge: number;\n  maintenanceGaps: number;\n  backupMissing: boolean;\n  warrantyExpired: boolean;\n  complianceViolations: number;\n}\n\ninterface AutomationContext {\n  locationId: number;\n  signals: Awaited<ReturnType<IStorage['getActiveComplianceSignals']>>;\n  assets: any[];\n  employees: any[];\n}\n\nexport class AIOrchestrator {\n  constructor(private storage: IStorage) {}\n\n  async runAutomation(locationId?: number): Promise<void> {\n    const runId = await this.startAutomationRun(locationId);\n    \n    try {\n      // Get context data\n      const context = await this.gatherContext(locationId);\n      \n      // Step 1: Analyze signals and generate risk scores\n      await this.analyzeComplianceSignals(context, runId);\n      \n      // Step 2: Generate AI recommendations for remediation\n      await this.generateAIRecommendations(context, runId);\n      \n      // Step 3: Auto-generate compliance tasks\n      await this.autoGenerateTasks(context, runId);\n      \n      // Step 4: Optimize task assignments\n      await this.optimizeAssignments(context, runId);\n      \n      await this.completeAutomationRun(runId, 'completed', {\n        tasksGenerated: context.signals.length,\n        risksDetected: context.signals.length\n      });\n      \n    } catch (error) {\n      console.error('Automation run failed:', error);\n      await this.completeAutomationRun(runId, 'failed');\n      throw error;\n    }\n  }\n\n  private async startAutomationRun(locationId?: number): Promise<number> {\n    const run: InsertAutomationRun = {\n      runType: 'manual',\n      status: 'running',\n      startedAt: new Date()\n    };\n    \n    const result = await this.storage.createAutomationRun(run);\n    return result.id;\n  }\n\n  private async completeAutomationRun(\n    runId: number, \n    status: 'completed' | 'failed',\n    stats?: { tasksGenerated?: number; risksDetected?: number; assignmentsCreated?: number }\n  ): Promise<void> {\n    await this.storage.updateAutomationRun(runId, {\n      status,\n      completedAt: new Date(),\n      ...stats\n    });\n  }\n\n  private async gatherContext(locationId?: number): Promise<AutomationContext> {\n    const signals = await this.storage.getActiveComplianceSignals(\n      locationId ? { locationId } : undefined\n    );\n    \n    // Get all assets for analysis\n    const assets = await this.storage.getAllAssets();\n    const employees = await this.storage.getAllEmployees();\n    \n    return {\n      locationId: locationId || 0,\n      signals,\n      assets: locationId ? assets.filter((a: any) => a.locationId === locationId) : assets,\n      employees: locationId ? employees.filter((e: any) => e.locationId === locationId) : employees\n    };\n  }\n\n  private async analyzeComplianceSignals(\n    context: AutomationContext,\n    runId: number\n  ): Promise<void> {\n    for (const signal of context.signals) {\n      // Calculate risk score based on signal severity and context\n      const riskScore = await this.calculateRiskScore(signal, context);\n      \n      const riskRecord: InsertComplianceRiskScore = {\n        locationId: signal.locationId,\n        assetId: signal.assetId || null,\n        riskScore: riskScore,\n        riskLevel: this.getRiskLevel(riskScore),\n        riskFactors: JSON.stringify({\n          severity: signal.severity,\n          signalType: signal.signalType,\n          automationRunId: runId\n        }),\n        aiModel: 'rule-based-v1',\n        confidence: 90,\n        calculatedAt: new Date()\n      };\n      \n      await this.storage.createComplianceRiskScore(riskRecord);\n    }\n  }\n\n  private async calculateRiskScore(\n    signal: any,\n    context: AutomationContext\n  ): Promise<number> {\n    const factors: RiskFactors = {\n      assetAge: 0,\n      maintenanceGaps: 0,\n      backupMissing: signal.signalType === 'backup_failure',\n      warrantyExpired: signal.signalType === 'warranty_expired',\n      complianceViolations: context.signals.filter(\n        s => s.assetId === signal.assetId && s.status === 'active'\n      ).length\n    };\n    \n    // Find asset if assetId exists\n    if (signal.assetId) {\n      const asset = context.assets.find(a => a.assetId === signal.assetId);\n      if (asset && asset.purchaseDate) {\n        const ageInYears = (Date.now() - new Date(asset.purchaseDate).getTime()) / (365 * 24 * 60 * 60 * 1000);\n        factors.assetAge = ageInYears;\n      }\n    }\n    \n    // Base score from severity\n    let score = signal.severity === 'critical' ? 80 : \n                signal.severity === 'high' ? 60 : \n                signal.severity === 'medium' ? 40 : 20;\n    \n    // Adjust based on factors\n    if (factors.assetAge > 5) score += 10;\n    if (factors.backupMissing) score += 15;\n    if (factors.warrantyExpired) score += 10;\n    score += Math.min(factors.complianceViolations * 5, 20);\n    \n    return Math.min(score, 100);\n  }\n\n  private getRiskLevel(score: number): string {\n    if (score >= 80) return 'critical';\n    if (score >= 60) return 'high';\n    if (score >= 40) return 'medium';\n    return 'low';\n  }\n\n  private async generateAIRecommendations(\n    context: AutomationContext,\n    runId: number\n  ): Promise<void> {\n    for (const signal of context.signals.slice(0, 5)) { // Limit to 5 for API costs\n      try {\n        const recommendation = await this.getAIRecommendation(signal, context);\n        \n        const aiRec: InsertAiRecommendation = {\n          recommendationType: 'remediation',\n          targetType: signal.assetId ? 'asset' : 'location',\n          targetId: signal.assetId || (signal.locationId?.toString() || '0'),\n          title: this.generateTaskTitle(signal),\n          description: recommendation,\n          priority: signal.severity === 'critical' ? 'high' : 'medium',\n          confidence: 85,\n          status: 'pending',\n          aiModel: 'gpt-4o-mini',\n          createdAt: new Date()\n        };\n        \n        await this.storage.createAiRecommendation(aiRec);\n      } catch (error) {\n        console.error('Failed to generate AI recommendation:', error);\n        // Continue with other signals\n      }\n    }\n  }\n\n  private async getAIRecommendation(\n    signal: any,\n    context: AutomationContext\n  ): Promise<string> {\n    const retryWithBackoff = async (attempt: number = 0): Promise<string> => {\n      try {\n        const signalData = signal.signalData ? JSON.parse(signal.signalData) : {};\n        const description = signalData.description || 'No details available';\n        \n        const completion = await openai.chat.completions.create({\n          model: 'gpt-4o-mini',\n          messages: [\n            {\n              role: 'system',\n              content: `You are an IT asset compliance expert for BODYCRAFT, a retail chain with 32 outlets in India. \n              Provide concise, actionable recommendations for compliance issues. Focus on practical steps.`\n            },\n            {\n              role: 'user',\n              content: `Compliance Issue Detected:\n              Type: ${signal.signalType}\n              Severity: ${signal.severity}\n              Description: ${description}\n              Asset ID: ${signal.assetId || 'N/A'}\n              Location: Store #${signal.locationId}\n              \n              Provide a brief remediation plan (2-3 sentences).`\n            }\n          ],\n          max_tokens: 150,\n          temperature: 0.7\n        });\n        \n        return completion.choices[0]?.message?.content || 'Unable to generate recommendation';\n      } catch (error: any) {\n        if (attempt < 3 && (error?.status === 429 || error?.status === 500)) {\n          // Exponential backoff: 1s, 2s, 4s\n          const delay = Math.pow(2, attempt) * 1000;\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return retryWithBackoff(attempt + 1);\n        }\n        throw error;\n      }\n    };\n    \n    return retryWithBackoff();\n  }\n\n  private async autoGenerateTasks(\n    context: AutomationContext,\n    runId: number\n  ): Promise<void> {\n    for (const signal of context.signals) {\n      const signalData = signal.signalData ? JSON.parse(signal.signalData) : {};\n      const description = signalData.description || `Automated task for ${signal.signalType}`;\n      \n      const task: InsertComplianceTask = {\n        taskName: this.generateTaskTitle(signal),\n        description: description,\n        taskType: this.mapCategoryToTaskType(signal.signalType),\n        category: signal.signalType,\n        dueDate: this.calculateDueDate(signal.severity).toISOString(),\n        createdBy: 1, // System user ID\n        status: 'pending',\n        locationId: signal.locationId,\n        assetId: signal.assetId || null,\n        createdAt: new Date()\n      };\n      \n      await this.storage.createComplianceTask(task);\n    }\n  }\n\n  private generateTaskTitle(signal: any): string {\n    const titles: Record<string, string> = {\n      'license_expiring': 'Renew Software License',\n      'warranty_expired': 'Review Warranty Coverage',\n      'backup_failure': 'Resolve Backup Issue',\n      'security_patch': 'Apply Security Updates',\n      'audit_required': 'Complete Compliance Audit'\n    };\n    \n    return titles[signal.category] || `Resolve ${signal.category}`;\n  }\n\n  private mapCategoryToTaskType(category: string): string {\n    const mapping: Record<string, string> = {\n      'license_expiring': 'license_renewal',\n      'warranty_expired': 'warranty_check',\n      'backup_failure': 'backup_verification',\n      'security_patch': 'security_audit',\n      'audit_required': 'documentation'\n    };\n    \n    return mapping[category] || 'general_compliance';\n  }\n\n  private calculateDueDate(severity: string): Date {\n    const now = new Date();\n    const days = severity === 'critical' ? 3 : \n                 severity === 'high' ? 7 : \n                 severity === 'medium' ? 14 : 30;\n    \n    return new Date(now.getTime() + days * 24 * 60 * 60 * 1000);\n  }\n\n  private async optimizeAssignments(\n    context: AutomationContext,\n    runId: number\n  ): Promise<void> {\n    // Get pending tasks for this run\n    const tasks = await this.storage.getComplianceTasks({\n      locationId: context.locationId || undefined,\n      status: 'pending'\n    });\n    \n    for (const taskData of tasks.slice(0, 10)) { // Limit assignments\n      const task = taskData.task;\n      \n      // Find best employee based on workload and expertise\n      const bestEmployee = this.findOptimalAssignment(\n        task,\n        context.employees,\n        tasks\n      );\n      \n      if (bestEmployee) {\n        const assignment: InsertComplianceAssignmentQueue = {\n          taskId: task.id,\n          assignedTo: bestEmployee.id,\n          locationId: task.locationId,\n          assignedAt: new Date(),\n          status: 'assigned',\n          assignmentReason: 'AI optimized based on workload',\n          workloadScore: 50 // Default score\n        };\n        \n        await this.storage.createComplianceAssignment(assignment);\n        \n        // Update task with assignment\n        await this.storage.updateComplianceTask(task.id, {\n          assignedTo: bestEmployee.id\n        });\n      }\n    }\n  }\n\n  private findOptimalAssignment(\n    task: any,\n    employees: any[],\n    allTasks: any[]\n  ): any {\n    // Filter employees by location\n    const locationEmployees = employees.filter(\n      e => e.locationId === task.locationId\n    );\n    \n    if (locationEmployees.length === 0) return null;\n    \n    // Calculate workload for each employee\n    const workloads = locationEmployees.map(emp => {\n      const assignedTasks = allTasks.filter(\n        t => t.task.assignedTo === emp.id && t.task.status === 'pending'\n      ).length;\n      \n      return {\n        employee: emp,\n        workload: assignedTasks\n      };\n    });\n    \n    // Sort by workload (ascending) and return employee with least work\n    workloads.sort((a, b) => a.workload - b.workload);\n    return workloads[0].employee;\n  }\n\n  async getPredictiveAlerts(locationId?: number): Promise<any[]> {\n    const assets = await this.storage.getAllAssets();\n    const filteredAssets = locationId \n      ? assets.filter((a: any) => a.locationId === locationId) \n      : assets;\n    \n    const alerts: any[] = [];\n    \n    for (const asset of filteredAssets) {\n      // Check warranty expiration\n      if (asset.warrantyExpiry) {\n        const daysUntilExpiry = Math.ceil(\n          (new Date(asset.warrantyExpiry).getTime() - Date.now()) / (24 * 60 * 60 * 1000)\n        );\n        \n        if (daysUntilExpiry > 0 && daysUntilExpiry <= 30) {\n          alerts.push({\n            type: 'warranty_expiring',\n            severity: daysUntilExpiry <= 7 ? 'high' : 'medium',\n            assetId: asset.assetId,\n            daysUntil: daysUntilExpiry,\n            message: `Warranty expires in ${daysUntilExpiry} days`,\n            predictedDate: asset.warrantyExpiry\n          });\n        }\n      }\n      \n      // Check asset age\n      if (asset.purchaseDate) {\n        const ageInYears = (Date.now() - new Date(asset.purchaseDate).getTime()) / (365 * 24 * 60 * 60 * 1000);\n        \n        if (ageInYears >= 4.5) {\n          alerts.push({\n            type: 'replacement_due',\n            severity: ageInYears >= 5 ? 'high' : 'medium',\n            assetId: asset.assetId,\n            message: `Asset is ${Math.floor(ageInYears)} years old, consider replacement`,\n            predictedDate: new Date(Date.now() + 180 * 24 * 60 * 60 * 1000) // 6 months\n          });\n        }\n      }\n    }\n    \n    return alerts;\n  }\n\n  async getRiskInsights(locationId?: number): Promise<any> {\n    const riskScores = await this.storage.getLatestRiskScores(\n      locationId ? { locationId } : undefined\n    );\n    \n    // Group by location\n    const byLocation: Record<number, any> = {};\n    \n    for (const score of riskScores) {\n      const locId = score.locationId || 0;\n      if (!byLocation[locId]) {\n        byLocation[locId] = {\n          locationId: locId,\n          averageRisk: 0,\n          criticalCount: 0,\n          highCount: 0,\n          mediumCount: 0,\n          lowCount: 0,\n          scores: []\n        };\n      }\n      \n      byLocation[locId].scores.push(score);\n      \n      if (score.riskLevel === 'critical') byLocation[locId].criticalCount++;\n      else if (score.riskLevel === 'high') byLocation[locId].highCount++;\n      else if (score.riskLevel === 'medium') byLocation[locId].mediumCount++;\n      else byLocation[locId].lowCount++;\n    }\n    \n    // Calculate averages\n    Object.values(byLocation).forEach(loc => {\n      const total = loc.scores.reduce((sum: number, s: any) => sum + s.riskScore, 0);\n      loc.averageRisk = loc.scores.length > 0 ? total / loc.scores.length : 0;\n    });\n    \n    return Object.values(byLocation);\n  }\n}\n","size_bytes":15019},"server/backup-verifier.ts":{"content":"import type { IStorage } from './storage';\nimport type { \n  InsertBackupVerification,\n  InsertComplianceSignal,\n  InsertComplianceTask\n} from '@shared/schema';\n\ninterface BackupCheckResult {\n  assetId: string;\n  lastBackupDate: Date | null;\n  backupStatus: 'success' | 'failed' | 'missing';\n  backupSize: number;\n  backupLocation: string;\n  issues: string[];\n}\n\nexport class BackupVerifier {\n  constructor(private storage: IStorage) {}\n\n  async runVerification(locationId?: number): Promise<void> {\n    console.log(`Starting backup verification for location ${locationId || 'all'}`);\n    \n    // Get all assets to check\n    const assets = await this.storage.getAllAssets();\n    const filteredAssets = locationId \n      ? assets.filter((a: any) => a.locationId === locationId)\n      : assets;\n\n    for (const asset of filteredAssets) {\n      try {\n        // Check backup status for each asset\n        const backupResult = await this.checkBackupStatus(asset);\n        \n        // Store verification result\n        await this.storeVerificationResult(asset, backupResult);\n        \n        // Create compliance signal if backup failed or missing\n        if (backupResult.backupStatus !== 'success') {\n          await this.createBackupSignal(asset, backupResult);\n          \n          // Auto-create compliance task\n          await this.createBackupTask(asset, backupResult);\n        }\n      } catch (error) {\n        console.error(`Failed to verify backup for asset ${asset.assetId}:`, error);\n      }\n    }\n    \n    console.log(`Backup verification completed for ${filteredAssets.length} assets`);\n  }\n\n  private async checkBackupStatus(asset: any): Promise<BackupCheckResult> {\n    // In a real implementation, this would:\n    // 1. Check Hikvision CCTV backup status (for CCTV devices)\n    // 2. Query Google Cloud Storage backup metadata\n    // 3. Check local backup servers\n    // 4. Verify backup integrity\n    \n    // For now, simulate backup checks with business logic\n    const now = new Date();\n    const isBackupConfigured = asset.assetType !== 'monitor' && asset.assetType !== 'keyboard'; // Only backup servers/laptops\n    \n    if (!isBackupConfigured) {\n      return {\n        assetId: asset.assetId,\n        lastBackupDate: null,\n        backupStatus: 'missing',\n        backupSize: 0,\n        backupLocation: 'N/A',\n        issues: ['Backup not configured for this asset type']\n      };\n    }\n\n    // Simulate backup check - in production, this would call actual backup APIs\n    const daysSincePurchase = asset.purchaseDate \n      ? Math.floor((now.getTime() - new Date(asset.purchaseDate).getTime()) / (1000 * 60 * 60 * 24))\n      : 0;\n    \n    // Simulate some backup failures for demo/testing\n    const hasBackupIssue = Math.random() < 0.15; // 15% failure rate for demo\n    const backupAge = Math.floor(Math.random() * 10); // 0-9 days old\n    \n    if (hasBackupIssue) {\n      return {\n        assetId: asset.assetId,\n        lastBackupDate: new Date(now.getTime() - backupAge * 24 * 60 * 60 * 1000),\n        backupStatus: backupAge > 7 ? 'missing' : 'failed',\n        backupSize: 0,\n        backupLocation: 'gs://bodycraft-backups',\n        issues: backupAge > 7 \n          ? [`No backup found in last ${backupAge} days`]\n          : ['Backup verification failed', 'Checksum mismatch detected']\n      };\n    }\n\n    // Successful backup\n    return {\n      assetId: asset.assetId,\n      lastBackupDate: new Date(now.getTime() - backupAge * 24 * 60 * 60 * 1000),\n      backupStatus: 'success',\n      backupSize: Math.floor(Math.random() * 500000) + 50000, // 50MB - 550MB\n      backupLocation: 'gs://bodycraft-backups',\n      issues: []\n    };\n  }\n\n  private async storeVerificationResult(\n    asset: any,\n    result: BackupCheckResult\n  ): Promise<void> {\n    const nextCheckDate = new Date();\n    nextCheckDate.setDate(nextCheckDate.getDate() + 1); // Daily checks\n\n    const verification: InsertBackupVerification = {\n      assetId: asset.assetId,\n      locationId: asset.locationId,\n      verificationStatus: result.backupStatus,\n      lastBackupDate: result.lastBackupDate?.toISOString() || null,\n      backupSize: result.backupSize,\n      backupLocation: result.backupLocation,\n      issuesDetected: result.issues.length > 0 ? JSON.stringify(result.issues) : null,\n      verifiedAt: new Date(),\n      nextCheckDate: nextCheckDate.toISOString()\n    };\n\n    await this.storage.createBackupVerification(verification);\n  }\n\n  private async createBackupSignal(\n    asset: any,\n    result: BackupCheckResult\n  ): Promise<void> {\n    const severity = result.backupStatus === 'missing' ? 'critical' : 'high';\n    \n    const signal: InsertComplianceSignal = {\n      assetId: asset.assetId,\n      locationId: asset.locationId,\n      signalType: result.backupStatus === 'missing' ? 'backup_missing' : 'backup_failure',\n      signalData: JSON.stringify({\n        description: result.issues.join('; '),\n        lastBackupDate: result.lastBackupDate,\n        backupLocation: result.backupLocation,\n        issues: result.issues\n      }),\n      severity: severity,\n      detectedAt: new Date(),\n      status: 'active'\n    };\n\n    await this.storage.createComplianceSignal(signal);\n  }\n\n  private async createBackupTask(\n    asset: any,\n    result: BackupCheckResult\n  ): Promise<void> {\n    const taskName = result.backupStatus === 'missing' \n      ? 'Configure Backup for Asset'\n      : 'Resolve Backup Failure';\n    \n    const description = `Backup issue detected for ${asset.modelName} (${asset.assetId}):\\n${result.issues.join('\\n')}`;\n    \n    const dueDate = new Date();\n    dueDate.setDate(dueDate.getDate() + (result.backupStatus === 'missing' ? 3 : 1));\n\n    const task: InsertComplianceTask = {\n      taskName: taskName,\n      description: description,\n      taskType: 'backup',\n      category: 'data_backup',\n      dueDate: dueDate.toISOString(),\n      createdBy: 1, // System-generated\n      status: 'pending',\n      priority: result.backupStatus === 'missing' ? 'high' : 'medium',\n      locationId: asset.locationId,\n      riskLevel: result.backupStatus === 'missing' ? 'critical' : 'high',\n      createdAt: new Date()\n    };\n\n    await this.storage.createComplianceTask(task);\n  }\n\n  async getDueVerifications(): Promise<any[]> {\n    return await this.storage.getDueBackupVerifications();\n  }\n\n  async getVerificationHistory(assetId?: string): Promise<any[]> {\n    return await this.storage.getBackupVerifications(\n      assetId ? { assetId } : undefined\n    );\n  }\n\n  async getBackupHealthSummary(locationId?: number): Promise<any> {\n    const verifications = await this.storage.getBackupVerifications(\n      locationId ? { assetId: '' } : undefined // Will filter in-memory\n    );\n\n    const summary = {\n      totalAssets: 0,\n      successfulBackups: 0,\n      failedBackups: 0,\n      missingBackups: 0,\n      lastCheckTime: new Date(),\n      criticalAssets: [] as string[]\n    };\n\n    const seen = new Set<string>();\n\n    for (const v of verifications) {\n      if (!seen.has(v.assetId)) {\n        seen.add(v.assetId);\n        summary.totalAssets++;\n\n        if (v.verificationStatus === 'success') {\n          summary.successfulBackups++;\n        } else if (v.verificationStatus === 'failed') {\n          summary.failedBackups++;\n          summary.criticalAssets.push(v.assetId);\n        } else if (v.verificationStatus === 'missing') {\n          summary.missingBackups++;\n          summary.criticalAssets.push(v.assetId);\n        }\n      }\n    }\n\n    return summary;\n  }\n\n  async triggerBackupForAsset(assetId: string): Promise<{ success: boolean; message: string }> {\n    // In production, this would:\n    // 1. Trigger actual backup via API (Google Cloud Storage, Veeam, etc.)\n    // 2. For CCTV: Call Hikvision API to force backup\n    // 3. For servers: Execute backup scripts\n    \n    console.log(`Triggering backup for asset ${assetId}`);\n    \n    // Simulate backup trigger\n    const success = Math.random() > 0.1; // 90% success rate\n    \n    if (success) {\n      // Create success signal\n      const asset = await this.storage.getAsset(assetId);\n      if (asset) {\n        const signal: InsertComplianceSignal = {\n          assetId: assetId,\n          locationId: asset.locationId,\n          signalType: 'backup_triggered',\n          signalData: JSON.stringify({\n            description: 'Manual backup initiated successfully',\n            triggeredAt: new Date()\n          }),\n          severity: 'low',\n          detectedAt: new Date(),\n          status: 'active'\n        };\n        \n        await this.storage.createComplianceSignal(signal);\n      }\n      \n      return {\n        success: true,\n        message: `Backup initiated successfully for asset ${assetId}`\n      };\n    } else {\n      return {\n        success: false,\n        message: `Failed to initiate backup for asset ${assetId}. Please check backup service.`\n      };\n    }\n  }\n}\n","size_bytes":8877}},"version":1}